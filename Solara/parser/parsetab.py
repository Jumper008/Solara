
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'IF ELSE ELIF WHILE_CYCLE FOR_CYCLE INT FLOAT CHAR STRING BOOL LIST VOID L_BRACE R_BRACE L_PAREN R_PAREN L_BRACK R_BRACK COLON COMMA PLUS MINUS MULTIPLY DIVIDE GREATER_T LESS_T GREATER_T_EQUALS LESS_T_EQUALS EQUALS PERCENTAGE IS NOT AND OR ID INT_CONT STRING_CONT CHAR_CONT FLOAT_CONT BOOL_CONT TICK SINGLE_COMMENT MULTI_COMMENT PROGRAM DRAW_CIRCLE DRAW_LINE DRAW_RECTANGLE MOVE_UP MOVE_DOWN MOVE_RIGHT MOVE_LEFT PRINT CORE VARS SOL\n    program : PROGRAM ID COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK\n  \n    DECLARATIONS : TYPE A TICK E\n  \n    A : ID B D\n  \n    B : EQUALS C\n    | empty\n  \n    C : EXPRESSION\n    | LIST_EXP\n  \n    D : COMMA A\n    | empty\n  \n    E : DECLARATIONS\n    | empty\n  \n    S_BLOCK : L_BRACE F R_BRACE\n  \n    F : S_STATUTE F\n    | empty\n  \n    S_STATUTE : SOLUTION_DEF\n    | STATUTE\n  \n    SOLUTION_DEF : SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK\n  \n    STATUTE : CONDITION\n    | CYCLE\n    | ASSIGNATION\n  \n    S_TYPE : VOID\n    | TYPE\n  \n    TYPE : INT\n    | FLOAT\n    | CHAR\n    | STRING\n    | BOOL\n    | LIST\n  \n    EXPRESSION : EXP G\n  \n    G : H EXP\n    | empty\n  \n    H : LESS_T\n    | GREATER_T\n    | GREATER_T_EQUALS\n    | LESS_T_EQUALS\n    | IS\n    | AND\n    | OR\n    | PERCENTAGE\n  \n    EXP : TERM I\n  \n    I : J EXP\n    | empty\n  \n    J : PLUS\n    | MINUS\n  \n    TERM : FACTOR K\n  \n    K : L TERM\n    | empty\n  \n    L : MULTIPLY\n    | DIVIDE\n  \n    FACTOR : L_PAREN EXPRESSION R_PAREN\n    | M CON_VAR\n  \n    M : PLUS\n    | MINUS\n    | empty\n  \n    CON_VAR : ID_REF\n    | INT_CONT\n    | STRING_CONT\n    | CHAR_CONT\n    | FLOAT_CONT\n    | BOOL_CONT\n    | SOLUTION_CALL\n  \n    NEGATION : N EXPRESSION\n  \n    N : NOT\n  \n    ID_REF : ID O\n  \n    O : L_BRACK EXPRESSION R_BRACK\n    | empty\n  \n    LIST_EXP : L_BRACK EXPRESSION P R_BRACK\n  \n    P : COMMA EXPRESSION P\n    | empty\n  \n    ASSIGNATION : ID_REF EQUALS EXPRESSION TICK\n  \n    BLOCK : L_BRACE Q R_BRACE\n  \n    Q : STATUTE Q\n    | empty\n  \n    S_ASSIGNATION : ID_REF EQUALS EXPRESSION\n  \n    WHILE : WHILE_CYCLE EXPRESSION COLON BLOCK TICK\n  \n    FOR : FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK\n  \n    CYCLE : FOR\n    | WHILE\n  \n    CONDITION : IF EXPRESSION COLON BLOCK R TICK\n  \n    R : S\n    | T\n  \n    S : ELIF EXPRESSION COLON BLOCK U\n  \n    U : S\n    | T\n    | empty\n  \n    T : ELSE BLOCK\n  \n    SOLUTION_CALL : ID L_PAREN V R_PAREN TICK\n  \n    V : W X\n  \n    W : EXPRESSION\n    | NEGATION\n  \n    X : COMMA V\n    | empty\n  \n    PARAMS : TYPE ID Y\n  \n    Y : COMMA PARAMS\n    | empty\n  empty :'
    
_lr_action_items = {'ELIF':([134,160,173,],[148,-71,148,]),'FLOAT':([6,19,47,129,165,],[7,7,7,7,7,]),'VARS':([4,],[5,]),'VOID':([47,],[94,]),'CHAR':([6,19,47,129,165,],[12,12,12,12,12,]),'PROGRAM':([0,],[2,]),'MULTIPLY':([39,61,62,63,64,65,66,67,68,69,101,102,109,132,155,],[90,-57,-59,-58,-55,-61,-51,-56,-96,-60,-64,-66,-50,-65,-87,]),'INT_CONT':([21,33,34,35,37,41,42,56,58,72,73,74,76,78,79,80,81,82,83,84,85,87,89,90,93,100,106,108,115,116,123,127,139,148,],[-96,-96,67,-96,-52,-53,-54,-96,-96,-96,-43,-44,-37,-96,-36,-32,-35,-33,-34,-39,-38,-49,-96,-48,-96,-96,-96,-96,-96,-96,-96,-63,-96,-96,]),'TICK':([16,17,20,22,28,30,31,32,36,38,39,40,59,61,62,63,64,65,66,67,68,69,71,75,77,86,88,91,98,101,102,109,110,111,112,113,120,130,131,132,135,141,150,151,152,155,160,162,170,172,173,176,177,178,179,],[19,-96,-96,-5,-3,-9,-7,-4,-96,-96,-96,-6,-8,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-29,-31,-45,-47,116,-64,-66,-50,-41,-30,-46,128,-67,-74,144,-65,153,155,-80,163,-81,-87,-71,-86,174,175,-96,-83,-85,-84,-82,]),'MINUS':([21,33,35,36,39,56,58,61,62,63,64,65,66,67,68,69,72,73,74,76,78,79,80,81,82,83,84,85,87,88,89,90,91,93,100,101,102,106,108,109,112,115,116,123,127,132,139,148,155,],[41,41,41,74,-96,41,41,-57,-59,-58,-55,-61,-51,-56,-96,-60,41,-43,-44,-37,41,-36,-32,-35,-33,-34,-39,-38,-49,-45,41,-48,-47,41,41,-64,-66,41,41,-50,-46,41,41,41,-63,-65,41,41,-87,]),'DIVIDE':([39,61,62,63,64,65,66,67,68,69,101,102,109,132,155,],[87,-57,-59,-58,-55,-61,-51,-56,-96,-60,-64,-66,-50,-65,-87,]),'STRING_CONT':([21,33,34,35,37,41,42,56,58,72,73,74,76,78,79,80,81,82,83,84,85,87,89,90,93,100,106,108,115,116,123,127,139,148,],[-96,-96,61,-96,-52,-53,-54,-96,-96,-96,-43,-44,-37,-96,-36,-32,-35,-33,-34,-39,-38,-49,-96,-48,-96,-96,-96,-96,-96,-96,-96,-63,-96,-96,]),'SOL':([23,43,44,45,48,49,50,52,53,128,153,163,174,175,],[47,-78,-15,47,-18,-19,-16,-20,-77,-70,-75,-79,-17,-76,]),'PLUS':([21,33,35,36,39,56,58,61,62,63,64,65,66,67,68,69,72,73,74,76,78,79,80,81,82,83,84,85,87,88,89,90,91,93,100,101,102,106,108,109,112,115,116,123,127,132,139,148,155,],[37,37,37,73,-96,37,37,-57,-59,-58,-55,-61,-51,-56,-96,-60,37,-43,-44,-37,37,-36,-32,-35,-33,-34,-39,-38,-49,-45,37,-48,-47,37,37,-64,-66,37,37,-50,-46,37,37,37,-63,-65,37,37,-87,]),'COLON':([3,5,15,36,38,39,61,62,63,64,65,66,67,68,69,71,75,77,86,88,91,101,102,103,104,109,110,111,112,130,132,155,156,158,161,],[4,6,18,-96,-96,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-29,-31,-45,-47,-64,-66,118,119,-50,-41,-30,-46,-74,-65,-87,164,168,169,]),'PERCENTAGE':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,84,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'IS':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,79,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'$end':([1,24,99,],[0,-1,-12,]),'CORE':([10,19,25,26,27,],[15,-96,-2,-10,-11,]),'L_PAREN':([21,33,35,56,58,68,72,73,74,76,78,79,80,81,82,83,84,85,87,89,90,93,100,106,108,114,115,116,123,127,139,148,],[35,35,35,35,35,108,35,-43,-44,-37,35,-36,-32,-35,-33,-34,-39,-38,-49,35,-48,35,35,35,35,129,35,35,35,-63,35,35,]),'FOR_CYCLE':([23,43,44,45,48,49,50,52,53,128,133,146,153,163,174,175,],[51,-78,-15,51,-18,-19,-16,-20,-77,-70,51,51,-75,-79,-17,-76,]),'STRING':([6,19,47,129,165,],[8,8,8,8,8,]),'WHILE_CYCLE':([23,43,44,45,48,49,50,52,53,128,133,146,153,163,174,175,],[58,-78,-15,58,-18,-19,-16,-20,-77,-70,58,58,-75,-79,-17,-76,]),'GREATER_T_EQUALS':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,83,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'CHAR_CONT':([21,33,34,35,37,41,42,56,58,72,73,74,76,78,79,80,81,82,83,84,85,87,89,90,93,100,106,108,115,116,123,127,139,148,],[-96,-96,63,-96,-52,-53,-54,-96,-96,-96,-43,-44,-37,-96,-36,-32,-35,-33,-34,-39,-38,-49,-96,-48,-96,-96,-96,-96,-96,-96,-96,-63,-96,-96,]),'EQUALS':([17,46,55,97,101,102,132,],[21,93,-96,115,-64,-66,-65,]),'ELSE':([134,160,173,],[149,-71,149,]),'R_PAREN':([36,38,39,61,62,63,64,65,66,67,68,69,70,71,75,77,86,88,91,101,102,109,110,111,112,122,124,125,126,132,137,138,140,142,154,155,157,166,167,171,],[-96,-96,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,109,-40,-42,-29,-31,-45,-47,-64,-66,-50,-41,-30,-46,-89,-96,141,-90,-65,-62,-88,-92,156,-91,-87,-96,-93,-95,-94,]),'ID':([2,7,8,9,11,12,13,14,21,23,29,33,34,35,37,41,42,43,44,45,48,49,50,51,52,53,56,58,72,73,74,76,78,79,80,81,82,83,84,85,87,89,90,93,94,95,96,100,106,108,115,116,123,127,128,133,139,143,144,146,148,153,163,174,175,],[3,-24,-26,-23,-28,-25,-27,17,-96,55,17,-96,68,-96,-52,-53,-54,-78,-15,55,-18,-19,-16,55,-20,-77,-96,-96,-96,-43,-44,-37,-96,-36,-32,-35,-33,-34,-39,-38,-49,-96,-48,-96,-21,114,-22,-96,-96,-96,-96,-96,-96,-63,-70,55,-96,157,55,55,-96,-75,-79,-17,-76,]),'BOOL_CONT':([21,33,34,35,37,41,42,56,58,72,73,74,76,78,79,80,81,82,83,84,85,87,89,90,93,100,106,108,115,116,123,127,139,148,],[-96,-96,69,-96,-52,-53,-54,-96,-96,-96,-43,-44,-37,-96,-36,-32,-35,-33,-34,-39,-38,-49,-96,-48,-96,-96,-96,-96,-96,-96,-96,-63,-96,-96,]),'IF':([23,43,44,45,48,49,50,52,53,128,133,146,153,163,174,175,],[56,-78,-15,56,-18,-19,-16,-20,-77,-70,56,56,-75,-79,-17,-76,]),'AND':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,76,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'LESS_T':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,80,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'FLOAT_CONT':([21,33,34,35,37,41,42,56,58,72,73,74,76,78,79,80,81,82,83,84,85,87,89,90,93,100,106,108,115,116,123,127,139,148,],[-96,-96,62,-96,-52,-53,-54,-96,-96,-96,-43,-44,-37,-96,-36,-32,-35,-33,-34,-39,-38,-49,-96,-48,-96,-96,-96,-96,-96,-96,-96,-63,-96,-96,]),'L_BRACK':([21,55,68,],[33,100,100,]),'INT':([6,19,47,129,165,],[9,9,9,9,9,]),'L_BRACE':([18,118,119,149,164,168,169,],[23,133,133,133,133,133,133,]),'LIST':([6,19,47,129,165,],[11,11,11,11,11,]),'LESS_T_EQUALS':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,81,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'BOOL':([6,19,47,129,165,],[13,13,13,13,13,]),'R_BRACE':([23,43,44,45,48,49,50,52,53,54,57,92,128,133,145,146,147,153,159,163,174,175,],[-96,-78,-15,-96,-18,-19,-16,-20,-77,99,-14,-13,-70,-96,-73,-96,160,-75,-72,-79,-17,-76,]),'GREATER_T':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,82,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'NOT':([108,139,],[127,127,]),'COMMA':([17,20,22,31,32,36,38,39,40,60,61,62,63,64,65,66,67,68,69,71,75,77,86,88,91,101,102,109,110,111,112,120,121,122,124,126,132,137,155,157,],[-96,29,-5,-7,-4,-96,-96,-96,-6,106,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-29,-31,-45,-47,-64,-66,-50,-41,-30,-46,-67,106,-89,139,-90,-65,-62,-87,165,]),'OR':([36,38,39,61,62,63,64,65,66,67,68,69,71,75,88,91,101,102,109,110,112,132,155,],[-96,85,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-45,-47,-64,-66,-50,-41,-46,-65,-87,]),'R_BRACK':([36,38,39,60,61,62,63,64,65,66,67,68,69,71,75,77,86,88,91,101,102,105,107,109,110,111,112,117,121,132,136,155,],[-96,-96,-96,-96,-57,-59,-58,-55,-61,-51,-56,-96,-60,-40,-42,-29,-31,-45,-47,-64,-66,120,-69,-50,-41,-30,-46,132,-96,-65,-68,-87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'LIST_EXP':([21,],[31,]),'DECLARATIONS':([6,19,],[10,26,]),'S_ASSIGNATION':([51,144,],[98,158,]),'G':([38,],[77,]),'WHILE':([23,45,133,146,],[43,43,43,43,]),'EXP':([21,33,35,56,58,72,78,93,100,106,108,115,116,123,139,148,],[38,38,38,38,38,110,111,38,38,38,38,38,38,38,38,38,]),'BLOCK':([118,119,149,164,168,169,],[134,135,162,170,172,173,]),'ASSIGNATION':([23,45,133,146,],[52,52,52,52,]),'SOLUTION_DEF':([23,45,],[44,44,]),'TERM':([21,33,35,56,58,72,78,89,93,100,106,108,115,116,123,139,148,],[36,36,36,36,36,36,36,112,36,36,36,36,36,36,36,36,36,]),'S_STATUTE':([23,45,],[45,45,]),'ID_REF':([23,34,45,51,133,144,146,],[46,64,46,97,46,97,46,]),'SOLUTION_CALL':([34,],[65,]),'program':([0,],[1,]),'CON_VAR':([34,],[66,]),'S_BLOCK':([18,],[24,]),'EXPRESSION':([21,33,35,56,58,93,100,106,108,115,116,123,139,148,],[40,60,70,103,104,113,117,121,122,130,131,137,122,161,]),'empty':([17,19,20,21,23,33,35,36,38,39,45,55,56,58,60,68,72,78,89,93,100,106,108,115,116,121,123,124,133,139,146,148,157,173,],[22,27,30,42,57,42,42,75,86,91,57,102,42,42,107,102,42,42,42,42,42,42,42,42,42,107,42,140,145,42,145,42,167,177,]),'CYCLE':([23,45,133,146,],[49,49,49,49,]),'A':([14,29,],[16,59,]),'STATUTE':([23,45,133,146,],[50,50,146,146,]),'C':([21,],[32,]),'B':([17,],[20,]),'E':([19,],[25,]),'D':([20,],[28,]),'FOR':([23,45,133,146,],[53,53,53,53,]),'F':([23,45,],[54,92,]),'I':([36,],[71,]),'H':([38,],[78,]),'K':([39,],[88,]),'J':([36,],[72,]),'M':([21,33,35,56,58,72,78,89,93,100,106,108,115,116,123,139,148,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'L':([39,],[89,]),'O':([55,68,],[101,101,]),'N':([108,139,],[123,123,]),'Q':([133,146,],[147,159,]),'P':([60,121,],[105,136,]),'S':([134,173,],[150,176,]),'R':([134,],[151,]),'U':([173,],[179,]),'T':([134,173,],[152,178,]),'W':([108,139,],[124,124,]),'V':([108,139,],[125,154,]),'Y':([157,],[166,]),'X':([124,],[138,]),'NEGATION':([108,139,],[126,126,]),'S_TYPE':([47,],[95,]),'PARAMS':([129,165,],[142,171,]),'CONDITION':([23,45,133,146,],[48,48,48,48,]),'FACTOR':([21,33,35,56,58,72,78,89,93,100,106,108,115,116,123,139,148,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'TYPE':([6,19,47,129,165,],[14,14,96,143,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK','program',9,'p_program','parser.py',15),
  ('DECLARATIONS -> TYPE A TICK E','DECLARATIONS',4,'p_declarations','parser.py',22),
  ('A -> ID B D','A',3,'p_a','parser.py',27),
  ('B -> EQUALS C','B',2,'p_b','parser.py',32),
  ('B -> empty','B',1,'p_b','parser.py',33),
  ('C -> EXPRESSION','C',1,'p_c','parser.py',38),
  ('C -> LIST_EXP','C',1,'p_c','parser.py',39),
  ('D -> COMMA A','D',2,'p_d','parser.py',44),
  ('D -> empty','D',1,'p_d','parser.py',45),
  ('E -> DECLARATIONS','E',1,'p_e','parser.py',50),
  ('E -> empty','E',1,'p_e','parser.py',51),
  ('S_BLOCK -> L_BRACE F R_BRACE','S_BLOCK',3,'p_s_block','parser.py',58),
  ('F -> S_STATUTE F','F',2,'p_f','parser.py',63),
  ('F -> empty','F',1,'p_f','parser.py',64),
  ('S_STATUTE -> SOLUTION_DEF','S_STATUTE',1,'p_s_statute','parser.py',71),
  ('S_STATUTE -> STATUTE','S_STATUTE',1,'p_s_statute','parser.py',72),
  ('SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK','SOLUTION_DEF',9,'p_solution_def','parser.py',79),
  ('STATUTE -> CONDITION','STATUTE',1,'p_statute','parser.py',86),
  ('STATUTE -> CYCLE','STATUTE',1,'p_statute','parser.py',87),
  ('STATUTE -> ASSIGNATION','STATUTE',1,'p_statute','parser.py',88),
  ('S_TYPE -> VOID','S_TYPE',1,'p_s_type','parser.py',95),
  ('S_TYPE -> TYPE','S_TYPE',1,'p_s_type','parser.py',96),
  ('TYPE -> INT','TYPE',1,'p_type','parser.py',103),
  ('TYPE -> FLOAT','TYPE',1,'p_type','parser.py',104),
  ('TYPE -> CHAR','TYPE',1,'p_type','parser.py',105),
  ('TYPE -> STRING','TYPE',1,'p_type','parser.py',106),
  ('TYPE -> BOOL','TYPE',1,'p_type','parser.py',107),
  ('TYPE -> LIST','TYPE',1,'p_type','parser.py',108),
  ('EXPRESSION -> EXP G','EXPRESSION',2,'p_expression','parser.py',115),
  ('G -> H EXP','G',2,'p_g','parser.py',120),
  ('G -> empty','G',1,'p_g','parser.py',121),
  ('H -> LESS_T','H',1,'p_h','parser.py',126),
  ('H -> GREATER_T','H',1,'p_h','parser.py',127),
  ('H -> GREATER_T_EQUALS','H',1,'p_h','parser.py',128),
  ('H -> LESS_T_EQUALS','H',1,'p_h','parser.py',129),
  ('H -> IS','H',1,'p_h','parser.py',130),
  ('H -> AND','H',1,'p_h','parser.py',131),
  ('H -> OR','H',1,'p_h','parser.py',132),
  ('H -> PERCENTAGE','H',1,'p_h','parser.py',133),
  ('EXP -> TERM I','EXP',2,'p_exp','parser.py',140),
  ('I -> J EXP','I',2,'p_i','parser.py',145),
  ('I -> empty','I',1,'p_i','parser.py',146),
  ('J -> PLUS','J',1,'p_j','parser.py',151),
  ('J -> MINUS','J',1,'p_j','parser.py',152),
  ('TERM -> FACTOR K','TERM',2,'p_term','parser.py',159),
  ('K -> L TERM','K',2,'p_k','parser.py',164),
  ('K -> empty','K',1,'p_k','parser.py',165),
  ('L -> MULTIPLY','L',1,'p_l','parser.py',170),
  ('L -> DIVIDE','L',1,'p_l','parser.py',171),
  ('FACTOR -> L_PAREN EXPRESSION R_PAREN','FACTOR',3,'p_factor','parser.py',178),
  ('FACTOR -> M CON_VAR','FACTOR',2,'p_factor','parser.py',179),
  ('M -> PLUS','M',1,'p_m','parser.py',184),
  ('M -> MINUS','M',1,'p_m','parser.py',185),
  ('M -> empty','M',1,'p_m','parser.py',186),
  ('CON_VAR -> ID_REF','CON_VAR',1,'p_con_var','parser.py',193),
  ('CON_VAR -> INT_CONT','CON_VAR',1,'p_con_var','parser.py',194),
  ('CON_VAR -> STRING_CONT','CON_VAR',1,'p_con_var','parser.py',195),
  ('CON_VAR -> CHAR_CONT','CON_VAR',1,'p_con_var','parser.py',196),
  ('CON_VAR -> FLOAT_CONT','CON_VAR',1,'p_con_var','parser.py',197),
  ('CON_VAR -> BOOL_CONT','CON_VAR',1,'p_con_var','parser.py',198),
  ('CON_VAR -> SOLUTION_CALL','CON_VAR',1,'p_con_var','parser.py',199),
  ('NEGATION -> N EXPRESSION','NEGATION',2,'p_negation','parser.py',206),
  ('N -> NOT','N',1,'p_n','parser.py',211),
  ('ID_REF -> ID O','ID_REF',2,'p_ID_ref','parser.py',218),
  ('O -> L_BRACK EXPRESSION R_BRACK','O',3,'p_o','parser.py',223),
  ('O -> empty','O',1,'p_o','parser.py',224),
  ('LIST_EXP -> L_BRACK EXPRESSION P R_BRACK','LIST_EXP',4,'p_list_exp','parser.py',231),
  ('P -> COMMA EXPRESSION P','P',3,'p_p','parser.py',236),
  ('P -> empty','P',1,'p_p','parser.py',237),
  ('ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK','ASSIGNATION',4,'p_assignation','parser.py',244),
  ('BLOCK -> L_BRACE Q R_BRACE','BLOCK',3,'p_block','parser.py',251),
  ('Q -> STATUTE Q','Q',2,'p_q','parser.py',256),
  ('Q -> empty','Q',1,'p_q','parser.py',257),
  ('S_ASSIGNATION -> ID_REF EQUALS EXPRESSION','S_ASSIGNATION',3,'p_s_assignation','parser.py',264),
  ('WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK','WHILE',5,'p_while','parser.py',271),
  ('FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK','FOR',9,'p_for','parser.py',278),
  ('CYCLE -> FOR','CYCLE',1,'p_cycle','parser.py',285),
  ('CYCLE -> WHILE','CYCLE',1,'p_cycle','parser.py',286),
  ('CONDITION -> IF EXPRESSION COLON BLOCK R TICK','CONDITION',6,'p_condition','parser.py',293),
  ('R -> S','R',1,'p_r','parser.py',298),
  ('R -> T','R',1,'p_r','parser.py',299),
  ('S -> ELIF EXPRESSION COLON BLOCK U','S',5,'p_s','parser.py',304),
  ('U -> S','U',1,'p_u','parser.py',309),
  ('U -> T','U',1,'p_u','parser.py',310),
  ('U -> empty','U',1,'p_u','parser.py',311),
  ('T -> ELSE BLOCK','T',2,'p_t','parser.py',316),
  ('SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK','SOLUTION_CALL',5,'p_solution_call','parser.py',323),
  ('V -> W X','V',2,'p_v','parser.py',328),
  ('W -> EXPRESSION','W',1,'p_w','parser.py',333),
  ('W -> NEGATION','W',1,'p_w','parser.py',334),
  ('X -> COMMA V','X',2,'p_x','parser.py',339),
  ('X -> empty','X',1,'p_x','parser.py',340),
  ('PARAMS -> TYPE ID Y','PARAMS',3,'p_params','parser.py',347),
  ('Y -> COMMA PARAMS','Y',2,'p_y','parser.py',352),
  ('Y -> empty','Y',1,'p_y','parser.py',353),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',360),
]
