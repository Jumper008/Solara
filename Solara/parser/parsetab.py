
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'IF ELSE ELIF WHILE_CYCLE FOR_CYCLE INT FLOAT CHAR STRING BOOL LIST VOID L_BRACE R_BRACE L_PAREN R_PAREN L_BRACK R_BRACK COLON COMMA POINT PLUS MINUS MULTIPLY DIVIDE GREATER_T LESS_T GREATER_T_EQUALS LESS_T_EQUALS EQUALS PERCENTAGE IS NOT AND OR ID INT_CONT STRING_CONT CHAR_CONT FLOAT_CONT BOOL_CONT TICK SINGLE_COMMENT MULTI_COMMENT PROGRAM DRAW_CIRCLE_R DRAW_LINE_R DRAW_RECTANGLE_R MOVE_UP_R MOVE_DOWN_R MOVE_RIGHT_R MOVE_LEFT_R PRINT_R SOLS VARS SOL MAIN_R RETURN LENGTH APPEND POP\n    program : PROGRAM ID create_global_fun COLON VAR_BLOCK update_global_fun generate_go_to_main_quad print_currentSymTab SOLS COLON SOL_DEFINITIONS MAIN_DEFINITION update_constant_number free_symbol_table print_funDir\n    \n    generate_go_to_main_quad :\n    \n    update_go_to_main_quad :\n    \n    print_funDir :\n    \n    free_symbol_table :\n    \n    update_constant_number :\n    \n    create_global_fun :\n    \n    update_global_fun :\n    \n    print_currentSymTab :\n    \n    VAR_BLOCK : VARS COLON AA\n    \n    AA : VAR_DEFINITIONS AA\n    | empty\n    \n    VAR_DEFINITIONS : TYPE store_type A TICK\n    \n    store_type :\n    \n    A : LIST_TYPE_SPECIFICATION ID check_var_duplicates update_local_count B D\n    \n    LIST_TYPE_SPECIFICATION : LESS_T LIST_TYPE GREATER_T\n    | empty check_for_list_type_specification\n    \n    check_for_list_type_specification :\n    \n    LIST_TYPE : INT\n    | FLOAT\n    | CHAR\n    | STRING\n    | BOOL\n    \n    check_var_duplicates :\n    \n    update_local_count :\n    \n    B : EQUALS C\n    | empty check_for_list_assignation\n    \n    check_for_list_assignation :\n    \n    append_left_operand :\n    \n    C : S_EXPRESSION check_for_list_definition append_equals append_left_operand process_definition_assignation_operation\n    | LIST_EXP\n    \n    check_for_list_definition :\n    \n    D : COMMA A\n    | empty\n    \n    S_BLOCK : L_BRACE F R_BRACE\n    \n    F : S_STATUTE F\n    | empty\n    \n    S_STATUTE : VAR_DEFINITIONS\n    | STATUTE\n    \n    SOLUTION_DEF : SOL S_TYPE store_type ID check_sol_duplicates upload_global_return_var L_PAREN PARAMS R_PAREN COLON S_BLOCK check_for_return_statement TICK update_fun print_currentSymTab free_symbol_table reset_execution_block\n    \n    upload_global_return_var :\n    \n    check_for_return_statement :\n    \n    reset_execution_block :\n    \n    check_sol_duplicates :\n    \n    update_fun :\n    \n    STATUTE : CONDITION\n    | CYCLE\n    | ASSIGNATION\n    | CON_VAR TICK\n    | RETURN_STATEMENT\n    \n    RETURN_STATEMENT : RETURN S_EXPRESSION TICK check_return_type_correspondence process_return_operation_with_return_value\n    | RETURN TICK process_return_operation_without_return_value\n    \n    check_return_type_correspondence :\n    \n    process_return_operation_with_return_value :\n    \n    process_return_operation_without_return_value :\n    \n    S_TYPE : VOID\n    | TYPE\n    \n    TYPE : INT\n    | FLOAT\n    | CHAR\n    | STRING\n    | BOOL\n    | LIST\n    \n    EXPRESSION : EXP G\n    \n    G : H EXP process_possible_relop_operation\n    | empty\n    \n    process_possible_relop_operation :\n    \n    H : LESS_T\n    | GREATER_T\n    | GREATER_T_EQUALS\n    | LESS_T_EQUALS\n    | IS\n    | AND\n    | OR\n    | PERCENTAGE\n    \n    EXP : TERM I\n    \n    process_possible_plus_minus_operation :\n    \n    I : J EXP process_possible_plus_minus_operation\n    | empty\n    \n    J : PLUS\n    | MINUS\n    \n    TERM : FACTOR K\n    \n    process_possible_multiply_divide_operation :\n    \n    K : L TERM process_possible_multiply_divide_operation\n    | empty\n    \n    L : MULTIPLY\n    | DIVIDE\n    \n    FACTOR : L_PAREN push_false_bottom S_EXPRESSION R_PAREN pop_false_bottom\n    | CON_VAR\n    \n    push_false_bottom :\n    \n    pop_false_bottom :\n    \n    CON_VAR : ID_REF\n    | CON_VAR_TERMINAL\n    | SOLUTION_CALL\n    | PREDEFINED_SOLS\n    \n    CON_VAR_TERMINAL : INT_CONT\n    | STRING_CONT\n    | CHAR_CONT\n    | FLOAT_CONT\n    | BOOL_CONT\n    \n    NEGATION : N S_EXPRESSION process_negation_operation\n    \n    process_negation_operation :\n    \n    N : NOT\n    \n    ID_REF : ID check_var_existence get_var_type O\n    \n    check_var_existence :\n    \n    get_var_type :\n    \n    O : L_BRACK id_ref_check_type_correspondence S_EXPRESSION check_int_type R_BRACK process_list_reference\n    | POINT id_ref_check_type_correspondence LENGTH L_PAREN R_PAREN process_list_length_reference\n    | POINT id_ref_check_type_correspondence APPEND L_PAREN S_EXPRESSION check_list_append_exp_type R_PAREN process_list_append_reference\n    | POINT id_ref_check_type_correspondence POP L_PAREN R_PAREN process_list_pop_reference\n    | empty check_for_list_reference process_var_reference\n    \n    check_list_append_exp_type :\n    \n    process_list_append_reference :\n    \n    process_list_pop_reference :\n    \n     process_list_length_reference :\n    \n    process_var_reference :\n    \n    process_list_reference :\n    \n    check_for_list_reference :\n    \n    id_ref_check_type_correspondence :\n    \n    check_int_type :\n    \n    LIST_EXP : L_BRACK check_type_correspondence P R_BRACK end_list_processing\n    \n    end_list_processing :\n    \n    check_type_correspondence :\n    \n    P : S_EXPRESSION check_list_exp_type_correspondence update_list_local_or_global_count append_equals ask_for_avail process_definition_assignation_operation PP\n    | empty\n    \n    update_list_local_or_global_count :\n    \n    check_list_exp_type_correspondence :\n    \n    process_definition_assignation_operation :\n    \n    ask_for_avail :\n    \n    PP : COMMA S_EXPRESSION check_list_exp_type_correspondence update_list_local_or_global_count append_equals ask_for_avail process_definition_assignation_operation process_next_element PP\n    | empty\n    \n    process_next_element :\n    \n    ASSIGNATION : ID_REF EQUALS append_equals S_EXPRESSION process_assignation_operation TICK\n    \n    append_equals :\n    \n    process_assignation_operation :\n    \n    BLOCK : L_BRACE Q R_BRACE\n    \n    Q : STATUTE Q\n    | empty\n    \n    S_ASSIGNATION : ID_REF EQUALS append_equals S_EXPRESSION process_assignation_operation\n    \n    WHILE : WHILE_CYCLE append_jump S_EXPRESSION process_condition_operation COLON BLOCK end_while_operation_processing TICK\n    \n    append_jump :\n    \n    end_while_operation_processing :\n    \n    FOR : FOR_CYCLE S_ASSIGNATION TICK append_jump S_EXPRESSION process_for_condition_operation TICK S_ASSIGNATION process_for_assignation_operation COLON BLOCK end_for_operation_processing TICK\n    \n    process_for_condition_operation :\n    \n    process_for_assignation_operation :\n    \n    end_for_operation_processing :\n    \n    CYCLE : FOR\n    | WHILE\n    \n    CONDITION : IF append_false_bottom S_EXPRESSION process_condition_operation COLON BLOCK R TICK end_condition_operation_processing\n    \n    end_condition_operation_processing :\n    \n    append_false_bottom :\n    \n    process_condition_operation :\n    \n    R : S\n    | T\n    | empty\n    \n    S : ELIF process_elif_operation S_EXPRESSION process_condition_operation COLON BLOCK U\n    \n    process_elif_operation :\n    \n    U : S\n    | T\n    | empty\n    \n    T : ELSE process_else_operation COLON BLOCK end_else_operation_processing\n    \n    process_else_operation :\n    \n    end_else_operation_processing :\n    \n    SOLUTION_CALL : ID check_sol_existence L_PAREN generate_era_quad V R_PAREN end_argument_processing\n    \n    end_argument_processing :\n    \n    generate_era_quad :\n    \n    check_sol_existence :\n    \n    V : S_EXPRESSION process_argument X\n    | empty\n    \n    process_argument :\n    \n    X : COMMA V\n    | empty\n    \n    S_EXPRESSION : EXPRESSION\n    | NEGATION\n    \n    PARAMS : TYPE store_type ID check_param_duplicates update_param_count Y\n    | empty\n    \n    check_param_duplicates :\n    \n    update_param_count :\n    \n    Y : COMMA PARAMS\n    | empty\n    \n    SOL_DEFINITIONS : Z\n    \n    Z : SOLUTION_DEF Z\n    | empty\n    \n    MAIN_DEFINITION : INT store_type MAIN_R check_sol_duplicates upload_global_return_var L_PAREN R_PAREN COLON S_BLOCK check_for_return_statement TICK update_fun print_currentSymTab free_symbol_table reset_execution_block update_go_to_main_quad\n    \n    DRAW_CIRCLE : DRAW_CIRCLE_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument R_PAREN end_draw_argument_processing generate_exec_draw_circle_quad\n    \n    generate_exec_draw_circle_quad :\n    \n    DRAW_LINE : DRAW_LINE_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument R_PAREN end_draw_argument_processing generate_exec_draw_line_quad\n    \n    generate_exec_draw_line_quad :\n    \n    DRAW_RECTANGLE : DRAW_RECTANGLE_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument R_PAREN end_draw_argument_processing generate_exec_draw_rectangle_quad\n    \n    generate_exec_draw_rectangle_quad :\n    \n    process_draw_argument :\n    \n    end_draw_argument_processing :\n    \n    MOVE_UP : MOVE_UP_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_up_quad\n    \n    generate_exec_move_up_quad :\n    \n    MOVE_RIGHT : MOVE_RIGHT_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_right_quad\n    \n    generate_exec_move_right_quad :\n    \n    MOVE_DOWN : MOVE_DOWN_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_down_quad\n    \n    generate_exec_move_down_quad :\n    \n    MOVE_LEFT : MOVE_LEFT_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_left_quad\n    \n    generate_exec_move_left_quad :\n    \n    process_move_argument :\n    \n    PRINT : PRINT_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_print_argument R_PAREN generate_exec_print_quad\n    \n    generate_exec_print_quad :\n    \n    process_print_argument :\n    \n    generate_predefined_sol_quad :\n    \n    PREDEFINED_SOLS : DRAW_LINE\n    | DRAW_CIRCLE\n    | DRAW_RECTANGLE\n    | MOVE_UP\n    | MOVE_RIGHT\n    | MOVE_DOWN\n    | MOVE_LEFT\n    | PRINT\n    empty :\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '
    
_lr_action_items = {'DIVIDE':([66,68,69,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,131,155,167,176,177,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,-213,-96,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,135,-207,-106,-214,-91,-118,-104,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'L_BRACE':([227,245,341,343,388,394,399,],[247,247,353,353,353,353,353,]),'RETURN':([29,247,260,261,264,266,267,269,274,275,276,296,300,315,316,330,342,350,353,364,380,382,389,402,],[-13,268,-38,-46,-147,-50,-148,268,-47,-39,-48,-55,-49,-53,-52,-54,-51,-133,268,268,-140,-150,-149,-143,]),'VARS':([5,],[6,]),'DRAW_LINE_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,86,-90,86,-123,-103,86,-73,-69,86,-72,-68,-71,-70,-75,-74,86,-80,-81,86,-87,86,-86,86,86,86,86,86,-166,86,86,86,86,-119,86,86,86,86,86,86,86,-38,-46,-147,-141,-50,-148,86,86,-151,-47,-39,-48,86,86,86,86,-134,86,-55,86,-49,86,-134,-141,-53,-52,86,86,-54,86,86,-51,-133,86,86,-157,-140,-150,86,-149,-143,]),'MOVE_DOWN_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,63,-90,63,-123,-103,63,-73,-69,63,-72,-68,-71,-70,-75,-74,63,-80,-81,63,-87,63,-86,63,63,63,63,63,-166,63,63,63,63,-119,63,63,63,63,63,63,63,-38,-46,-147,-141,-50,-148,63,63,-151,-47,-39,-48,63,63,63,63,-134,63,-55,63,-49,63,-134,-141,-53,-52,63,63,-54,63,63,-51,-133,63,63,-157,-140,-150,63,-149,-143,]),'PRINT_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,99,-90,99,-123,-103,99,-73,-69,99,-72,-68,-71,-70,-75,-74,99,-80,-81,99,-87,99,-86,99,99,99,99,99,-166,99,99,99,99,-119,99,99,99,99,99,99,99,-38,-46,-147,-141,-50,-148,99,99,-151,-47,-39,-48,99,99,99,99,-134,99,-55,99,-49,99,-134,-141,-53,-52,99,99,-54,99,99,-51,-133,99,99,-157,-140,-150,99,-149,-143,]),'ELIF':([355,379,401,],[372,-136,372,]),'SOL':([38,41,307,324,337,349,361,],[42,42,-45,-9,-5,-43,-40,]),'LESS_T':([11,13,14,15,16,17,18,22,60,66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-61,-58,-59,-63,-60,-62,-14,25,25,-94,114,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'PROGRAM':([0,],[2,]),'MULTIPLY':([66,68,69,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,131,155,167,176,177,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,-213,-96,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,138,-207,-106,-214,-91,-118,-104,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'INT_CONT':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,69,-90,69,-123,-103,69,-73,-69,69,-72,-68,-71,-70,-75,-74,69,-80,-81,69,-87,69,-86,69,69,69,69,69,-166,69,69,69,69,-119,69,69,69,69,69,69,69,-38,-46,-147,-141,-50,-148,69,69,-151,-47,-39,-48,69,69,69,69,-134,69,-55,69,-49,69,-134,-141,-53,-52,69,69,-54,69,69,-51,-133,69,69,-157,-140,-150,69,-149,-143,]),'TICK':([24,36,40,46,53,55,59,61,62,64,66,67,68,69,72,73,74,75,76,77,78,79,80,81,83,85,87,88,89,91,93,94,95,97,100,101,105,107,111,119,122,126,127,131,136,139,145,147,150,151,155,161,166,167,168,171,176,177,180,183,188,189,198,201,209,210,215,219,222,223,224,228,229,236,242,243,244,248,253,254,256,258,262,268,273,277,281,282,284,288,292,295,298,305,322,326,333,338,339,340,345,351,352,354,355,357,366,367,368,370,371,374,375,379,384,385,391,392,395,397,398,400,401,403,404,405,406,],[29,-24,-25,-214,-214,-28,-15,-34,-31,-32,-94,-214,-213,-96,-214,-212,-92,-210,-209,-89,-173,-98,-26,-97,-208,-206,-105,-100,-99,-93,-174,-95,-211,-214,-207,-27,-33,-134,-64,-66,-76,-79,-102,-106,-82,-85,-29,-67,-77,-101,-214,-83,-128,-91,-65,-78,-118,-104,-122,-84,-30,-88,-116,-121,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-42,-114,-115,-117,-42,-92,296,300,301,-110,-108,-107,307,313,315,-35,-113,-109,-135,-192,350,-135,-144,-186,-139,362,-142,-214,-185,380,-155,-154,-153,382,-192,-192,-136,-190,-188,-189,-187,-163,-146,-161,402,-214,-158,-160,-159,-156,]),'MINUS':([66,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,131,136,139,155,161,167,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,-213,-96,125,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-106,-82,-85,-214,-83,-91,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'APPEND':([175,197,],[-119,218,]),'DRAW_CIRCLE_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,71,-90,71,-123,-103,71,-73,-69,71,-72,-68,-71,-70,-75,-74,71,-80,-81,71,-87,71,-86,71,71,71,71,71,-166,71,71,71,71,-119,71,71,71,71,71,71,71,-38,-46,-147,-141,-50,-148,71,71,-151,-47,-39,-48,71,71,71,71,-134,71,-55,71,-49,71,-134,-141,-53,-52,71,71,-54,71,71,-51,-133,71,71,-157,-140,-150,71,-149,-143,]),'IS':([66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,113,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'STRING_CONT':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,81,-90,81,-123,-103,81,-73,-69,81,-72,-68,-71,-70,-75,-74,81,-80,-81,81,-87,81,-86,81,81,81,81,81,-166,81,81,81,81,-119,81,81,81,81,81,81,81,-38,-46,-147,-141,-50,-148,81,81,-151,-47,-39,-48,81,81,81,81,-134,81,-55,81,-49,81,-134,-141,-53,-52,81,81,-54,81,81,-51,-133,81,81,-157,-140,-150,81,-149,-143,]),'POINT':([87,131,155,293,],[-105,-106,175,-105,]),'MOVE_RIGHT_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,96,-90,96,-123,-103,96,-73,-69,96,-72,-68,-71,-70,-75,-74,96,-80,-81,96,-87,96,-86,96,96,96,96,96,-166,96,96,96,96,-119,96,96,96,96,96,96,96,-38,-46,-147,-141,-50,-148,96,96,-151,-47,-39,-48,96,96,96,96,-134,96,-55,96,-49,96,-134,-141,-53,-52,96,96,-54,96,96,-51,-133,96,96,-157,-140,-150,96,-149,-143,]),'MOVE_LEFT_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,70,-90,70,-123,-103,70,-73,-69,70,-72,-68,-71,-70,-75,-74,70,-80,-81,70,-87,70,-86,70,70,70,70,70,-166,70,70,70,70,-119,70,70,70,70,70,70,70,-38,-46,-147,-141,-50,-148,70,70,-151,-47,-39,-48,70,70,70,70,-134,70,-55,70,-49,70,-134,-141,-53,-52,70,70,-54,70,70,-51,-133,70,70,-157,-140,-150,70,-149,-143,]),'POP':([175,197,],[-119,216,]),'SOLS':([7,8,9,10,12,19,20,21,23,29,],[-8,-214,-2,-10,-214,-12,-9,-11,28,-13,]),'COLON':([3,4,6,28,66,67,68,69,72,73,74,75,76,77,78,79,81,83,85,87,88,89,91,93,94,95,97,100,111,119,122,126,127,131,136,139,147,150,151,155,161,167,168,171,176,177,183,189,198,208,209,210,215,219,222,223,224,225,228,229,236,242,243,244,253,254,256,281,282,284,305,314,317,322,329,331,333,339,345,351,357,369,374,375,377,381,384,385,387,390,391,392,396,],[-7,5,8,38,-94,-214,-213,-96,-214,-212,-92,-210,-209,-89,-173,-98,-97,-208,-206,-105,-100,-99,-93,-174,-95,-211,-214,-207,-64,-66,-76,-79,-102,-106,-82,-85,-67,-77,-101,-214,-83,-91,-65,-78,-118,-104,-84,-88,-116,227,-198,-200,-165,-111,-194,-196,-203,245,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-152,-152,-109,341,343,-192,-135,-186,-139,-185,-162,-192,-192,-145,388,-190,-188,394,-152,-189,-187,399,]),'COMMA':([36,40,46,53,55,62,64,66,67,68,69,72,73,74,75,76,77,78,79,80,81,83,85,87,88,89,91,93,94,95,97,100,101,107,111,119,122,126,127,131,136,139,145,147,150,151,155,156,161,166,167,168,170,171,172,173,176,177,179,180,183,188,189,191,192,193,194,198,200,201,209,210,214,215,219,221,222,223,224,228,229,230,231,232,236,241,242,243,244,246,249,250,251,253,254,256,257,259,281,282,284,289,303,304,305,306,320,321,322,323,333,336,345,348,357,360,374,375,376,384,385,386,391,392,],[-24,-25,-214,60,-28,-31,-32,-94,-214,-213,-96,-214,-212,-92,-210,-209,-89,-173,-98,-26,-97,-208,-206,-105,-100,-99,-93,-174,-95,-211,-214,-207,-27,-134,-64,-66,-76,-79,-102,-106,-82,-85,-29,-67,-77,-101,-214,-127,-83,-128,-91,-65,-191,-78,-191,-191,-118,-104,-126,-122,-84,-30,-88,211,212,213,-170,-116,-134,-121,-198,-200,233,-165,-111,-129,-194,-196,-203,-197,-199,-191,-191,-191,-164,-128,-193,-195,-202,-177,278,279,280,-114,-115,-117,286,-178,-110,-108,-107,308,-191,-191,-113,-127,334,335,-109,-126,-192,-134,-186,-129,-185,-128,-192,-192,-132,-190,-188,286,-189,-187,]),'PERCENTAGE':([66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,117,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'VOID':([42,],[48,]),'$end':([1,52,58,104,143,301,318,332,344,356,373,],[0,-6,-5,-4,-1,-45,-9,-5,-43,-3,-184,]),'PLUS':([66,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,131,136,139,155,161,167,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,-213,-96,124,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-106,-82,-85,-214,-83,-91,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'L_PAREN':([54,63,65,70,71,82,84,86,87,90,92,96,98,99,102,103,106,108,109,110,112,113,114,115,116,117,118,120,121,123,124,125,128,129,130,132,133,134,135,137,138,140,141,142,144,148,149,152,153,154,159,160,162,163,164,174,178,199,211,212,213,216,217,218,233,239,265,268,272,278,279,280,286,290,294,299,311,312,313,327,328,334,335,372,383,],[65,-205,-90,-205,-205,65,-205,-205,-167,-123,-205,-205,-103,-205,-44,-44,144,65,-73,-69,65,-72,-68,-71,-70,-75,-74,148,149,65,-80,-81,152,153,154,65,159,160,-87,65,-86,162,-41,-41,65,65,65,65,65,-166,65,65,65,185,186,65,-119,65,65,65,65,237,238,239,65,65,-141,65,-151,65,65,65,65,-134,65,65,65,-134,-141,65,65,65,65,-157,65,]),'FOR_CYCLE':([29,247,260,261,264,266,267,269,274,275,276,296,300,315,316,330,342,350,353,364,380,382,389,402,],[-13,263,-38,-46,-147,-50,-148,263,-47,-39,-48,-55,-49,-53,-52,-54,-51,-133,263,263,-140,-150,-149,-143,]),'STRING':([8,12,25,29,42,185,247,260,261,264,266,267,269,274,275,276,296,300,308,315,316,330,342,350,380,382,389,402,],[11,11,35,-13,11,11,11,-38,-46,-147,-50,-148,11,-47,-39,-48,-55,-49,11,-53,-52,-54,-51,-133,-140,-150,-149,-143,]),'GREATER_T_EQUALS':([66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,116,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'CHAR_CONT':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,79,-90,79,-123,-103,79,-73,-69,79,-72,-68,-71,-70,-75,-74,79,-80,-81,79,-87,79,-86,79,79,79,79,79,-166,79,79,79,79,-119,79,79,79,79,79,79,79,-38,-46,-147,-141,-50,-148,79,79,-151,-47,-39,-48,79,79,79,79,-134,79,-55,79,-49,79,-134,-141,-53,-52,79,79,-54,79,79,-51,-133,79,79,-157,-140,-150,79,-149,-143,]),'EQUALS':([36,40,46,87,131,155,176,177,198,219,253,254,256,262,281,282,284,291,293,305,322,],[-24,-25,54,-105,-106,-214,-118,-104,-116,-111,-114,-115,-117,290,-110,-108,-107,312,-105,-113,-109,]),'ELSE':([355,379,401,],[369,-136,369,]),'R_PAREN':([66,67,68,69,72,73,74,75,76,77,78,79,81,83,85,87,88,89,91,93,94,95,97,100,111,119,122,126,127,131,136,139,146,147,150,151,154,155,161,165,167,168,169,171,174,176,177,181,182,183,184,185,186,187,189,190,194,195,196,198,202,203,204,205,206,209,210,214,215,219,222,223,224,228,229,233,234,235,236,237,238,242,243,244,246,252,253,254,255,256,259,281,282,283,284,289,302,305,308,309,310,319,322,325,333,345,346,347,357,358,359,374,375,384,385,391,392,],[-94,-214,-213,-96,-214,-212,-92,-210,-209,-89,-173,-98,-97,-208,-206,-105,-100,-99,-93,-174,-95,-211,-214,-207,-64,-66,-76,-79,-102,-106,-82,-85,167,-67,-77,-101,-166,-214,-83,-201,-91,-65,-201,-78,-214,-118,-104,-201,-201,-84,-204,-214,208,209,-88,210,-170,-169,215,-116,222,223,224,-176,225,-198,-200,-214,-165,-111,-194,-196,-203,-197,-199,-214,-168,-172,-164,253,254,-193,-195,-202,-177,-171,-114,-115,-112,-117,-178,-110,-108,305,-107,-214,-191,-113,-214,-175,-180,333,-109,-179,-192,-186,-191,-191,-185,374,375,-192,-192,-190,-188,-189,-187,]),'DRAW_RECTANGLE_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,84,-90,84,-123,-103,84,-73,-69,84,-72,-68,-71,-70,-75,-74,84,-80,-81,84,-87,84,-86,84,84,84,84,84,-166,84,84,84,84,-119,84,84,84,84,84,84,84,-38,-46,-147,-141,-50,-148,84,84,-151,-47,-39,-48,84,84,84,84,-134,84,-55,84,-49,84,-134,-141,-53,-52,84,84,-54,84,84,-51,-133,84,84,-157,-140,-150,84,-149,-143,]),'LENGTH':([175,197,],[-119,217,]),'ID':([2,11,13,14,15,16,17,18,22,26,27,29,37,39,48,49,50,54,56,60,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,207,211,212,213,226,233,239,247,260,261,263,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,362,364,372,380,382,383,389,402,],[3,-61,-58,-59,-63,-60,-62,-14,-214,36,-18,-13,-17,-16,-56,-14,-57,87,102,-214,-90,87,-123,-103,87,-73,-69,87,-72,-68,-71,-70,-75,-74,87,-80,-81,87,-87,87,-86,87,87,87,87,87,-166,87,87,87,87,-119,87,-14,87,87,87,246,87,87,87,-38,-46,293,-147,-141,-50,-148,87,87,-151,-47,-39,-48,87,87,87,87,-134,87,-55,87,-49,87,-134,-141,-53,-52,87,87,-54,87,87,-51,-133,87,293,87,-157,-140,-150,87,-149,-143,]),'BOOL_CONT':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,88,-90,88,-123,-103,88,-73,-69,88,-72,-68,-71,-70,-75,-74,88,-80,-81,88,-87,88,-86,88,88,88,88,88,-166,88,88,88,88,-119,88,88,88,88,88,88,88,-38,-46,-147,-141,-50,-148,88,88,-151,-47,-39,-48,88,88,88,88,-134,88,-55,88,-49,88,-134,-141,-53,-52,88,88,-54,88,88,-51,-133,88,88,-157,-140,-150,88,-149,-143,]),'IF':([29,247,260,261,264,266,267,269,274,275,276,296,300,315,316,330,342,350,353,364,380,382,389,402,],[-13,272,-38,-46,-147,-50,-148,272,-47,-39,-48,-55,-49,-53,-52,-54,-51,-133,272,272,-140,-150,-149,-143,]),'AND':([66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,109,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'CHAR':([8,12,25,29,42,185,247,260,261,264,266,267,269,274,275,276,296,300,308,315,316,330,342,350,380,382,389,402,],[16,16,30,-13,16,16,16,-38,-46,-147,-50,-148,16,-47,-39,-48,-55,-49,16,-53,-52,-54,-51,-133,-140,-150,-149,-143,]),'FLOAT_CONT':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,89,-90,89,-123,-103,89,-73,-69,89,-72,-68,-71,-70,-75,-74,89,-80,-81,89,-87,89,-86,89,89,89,89,89,-166,89,89,89,89,-119,89,89,89,89,89,89,89,-38,-46,-147,-141,-50,-148,89,89,-151,-47,-39,-48,89,89,89,89,-134,89,-55,89,-49,89,-134,-141,-53,-52,89,89,-54,89,89,-51,-133,89,89,-157,-140,-150,89,-149,-143,]),'L_BRACK':([54,87,131,155,293,],[90,-105,-106,178,-105,]),'MOVE_UP_R':([29,54,65,82,90,98,108,109,110,112,113,114,115,116,117,118,123,124,125,132,135,137,138,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,247,260,261,264,265,266,267,268,269,272,274,275,276,278,279,280,286,290,294,296,299,300,311,312,313,315,316,327,328,330,334,335,342,350,353,364,372,380,382,383,389,402,],[-13,92,-90,92,-123,-103,92,-73,-69,92,-72,-68,-71,-70,-75,-74,92,-80,-81,92,-87,92,-86,92,92,92,92,92,-166,92,92,92,92,-119,92,92,92,92,92,92,92,-38,-46,-147,-141,-50,-148,92,92,-151,-47,-39,-48,92,92,92,92,-134,92,-55,92,-49,92,-134,-141,-53,-52,92,92,-54,92,92,-51,-133,92,92,-157,-140,-150,92,-149,-143,]),'INT':([8,12,25,29,38,41,42,43,44,45,47,185,247,260,261,264,266,267,269,274,275,276,296,300,307,308,315,316,324,330,337,342,349,350,361,380,382,389,402,],[13,13,32,-13,-214,-214,13,-183,51,-181,-182,13,13,-38,-46,-147,-50,-148,13,-47,-39,-48,-55,-49,-45,13,-53,-52,-9,-54,-5,-51,-43,-133,-40,-140,-150,-149,-143,]),'FLOAT':([8,12,25,29,42,185,247,260,261,264,266,267,269,274,275,276,296,300,308,315,316,330,342,350,380,382,389,402,],[14,14,33,-13,14,14,14,-38,-46,-147,-50,-148,14,-47,-39,-48,-55,-49,14,-53,-52,-54,-51,-133,-140,-150,-149,-143,]),'LIST':([8,12,29,42,185,247,260,261,264,266,267,269,274,275,276,296,300,308,315,316,330,342,350,380,382,389,402,],[15,15,-13,15,15,15,-38,-46,-147,-50,-148,15,-47,-39,-48,-55,-49,15,-53,-52,-54,-51,-133,-140,-150,-149,-143,]),'MAIN_R':([51,57,],[-14,103,]),'LESS_T_EQUALS':([66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,115,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'BOOL':([8,12,25,29,42,185,247,260,261,264,266,267,269,274,275,276,296,300,308,315,316,330,342,350,380,382,389,402,],[17,17,34,-13,17,17,17,-38,-46,-147,-50,-148,17,-47,-39,-48,-55,-49,17,-53,-52,-54,-51,-133,-140,-150,-149,-143,]),'R_BRACE':([29,247,260,261,264,266,267,269,270,271,274,275,276,296,297,300,315,316,330,342,350,353,363,364,365,378,380,382,389,402,],[-13,-214,-38,-46,-147,-50,-148,-214,-37,298,-47,-39,-48,-55,-36,-49,-53,-52,-54,-51,-133,-214,-138,-214,379,-137,-140,-150,-149,-143,]),'GREATER_T':([30,31,32,33,34,35,66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-21,39,-19,-20,-23,-22,-94,110,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'NOT':([54,65,82,90,98,108,132,144,148,149,152,153,154,159,160,162,174,178,199,211,212,213,233,239,265,268,272,278,279,280,286,290,294,299,311,312,313,327,328,334,335,372,383,],[98,-90,98,-123,-103,98,98,98,98,98,98,98,-166,98,98,98,98,-119,98,98,98,98,98,98,-141,98,-151,98,98,98,98,-134,98,98,98,-134,-141,98,98,98,98,-157,98,]),'WHILE_CYCLE':([29,247,260,261,264,266,267,269,274,275,276,296,300,315,316,330,342,350,353,364,380,382,389,402,],[-13,265,-38,-46,-147,-50,-148,265,-47,-39,-48,-55,-49,-53,-52,-54,-51,-133,265,265,-140,-150,-149,-143,]),'OR':([66,67,68,69,72,73,74,75,76,77,79,81,83,85,87,88,89,91,94,95,97,100,122,126,131,136,139,150,155,161,167,171,176,177,183,189,198,209,210,215,219,222,223,224,228,229,236,242,243,244,253,254,256,281,282,284,305,322,333,345,357,374,375,384,385,391,392,],[-94,118,-213,-96,-214,-212,-92,-210,-209,-89,-98,-97,-208,-206,-105,-100,-99,-93,-95,-211,-214,-207,-76,-79,-106,-82,-85,-77,-214,-83,-91,-78,-118,-104,-84,-88,-116,-198,-200,-165,-111,-194,-196,-203,-197,-199,-164,-193,-195,-202,-114,-115,-117,-110,-108,-107,-113,-109,-192,-186,-185,-192,-192,-190,-188,-189,-187,]),'R_BRACK':([66,67,68,69,72,73,74,75,76,77,78,79,81,83,85,87,88,89,90,91,93,94,95,97,100,111,119,122,126,127,131,132,136,139,147,150,151,155,156,157,158,161,167,168,171,176,177,179,183,189,198,200,209,210,215,219,220,221,222,223,224,228,229,236,240,241,242,243,244,253,254,256,257,281,282,284,285,287,305,306,322,323,333,336,345,348,357,360,374,375,376,384,385,386,391,392,393,],[-94,-214,-213,-96,-214,-212,-92,-210,-209,-89,-173,-98,-97,-208,-206,-105,-100,-99,-123,-93,-174,-95,-211,-214,-207,-64,-66,-76,-79,-102,-106,-214,-82,-85,-67,-77,-101,-214,-127,-125,180,-83,-91,-65,-78,-118,-104,-126,-84,-88,-116,-134,-198,-200,-165,-111,-120,-129,-194,-196,-203,-197,-199,-164,256,-128,-193,-195,-202,-114,-115,-117,-214,-110,-108,-107,-124,-131,-113,-127,-109,-126,-192,-134,-186,-129,-185,-128,-192,-192,-132,-190,-188,-214,-189,-187,-130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'process_move_argument':([165,169,181,182,],[187,190,202,203,]),'end_list_processing':([180,],[201,]),'process_elif_operation':([372,],[383,]),'S_BLOCK':([227,245,],[248,258,]),'append_left_operand':([145,],[166,]),'EXP':([54,82,108,112,123,132,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,268,278,279,280,286,294,299,311,327,328,334,335,383,],[67,67,67,147,150,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'X':([214,],[234,]),'update_constant_number':([52,],[58,]),'append_equals':([107,200,290,312,336,],[145,221,311,327,348,]),'end_draw_argument_processing':([333,374,375,],[345,384,385,]),'generate_predefined_sol_quad':([63,70,71,84,86,92,96,99,],[106,120,121,128,129,133,134,140,]),'VAR_DEFINITIONS':([8,12,247,269,],[12,12,260,260,]),'SOLUTION_CALL':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'program':([0,],[1,]),'generate_exec_move_right_quad':([223,],[243,]),'process_definition_assignation_operation':([166,241,360,],[188,257,376,]),'generate_exec_move_up_quad':([222,],[242,]),'CONDITION':([247,269,353,364,],[261,261,261,261,]),'D':([53,],[59,]),'update_fun':([301,307,],[318,324,]),'H':([67,],[112,]),'end_else_operation_processing':([395,],[398,]),'L':([97,],[137,]),'SOL_DEFINITIONS':([38,],[44,]),'CON_VAR_TERMINAL':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'T':([355,401,],[368,405,]),'free_symbol_table':([58,332,337,],[104,344,349,]),'generate_exec_move_down_quad':([209,],[228,]),'MOVE_UP':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'generate_era_quad':([154,],[174,]),'check_sol_existence':([87,],[130,]),'PREDEFINED_SOLS':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'S_TYPE':([42,],[49,]),'process_condition_operation':([314,317,390,],[329,331,396,]),'end_condition_operation_processing':([382,],[389,]),'update_go_to_main_quad':([356,],[373,]),'DRAW_CIRCLE':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'check_list_exp_type_correspondence':([156,306,],[179,323,]),'LIST_EXP':([54,],[62,]),'AA':([8,12,],[10,21,]),'store_type':([18,49,51,207,],[22,56,57,226,]),'NEGATION':([54,82,108,132,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,268,278,279,280,286,294,299,311,327,328,334,335,383,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'PRINT':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'process_else_operation':([369,],[381,]),'process_list_pop_reference':([253,],[281,]),'ASSIGNATION':([247,269,353,364,],[276,276,276,276,]),'SOLUTION_DEF':([38,41,],[41,41,]),'PP':([257,386,],[285,393,]),'update_param_count':([259,],[289,]),'ask_for_avail':([221,348,],[241,360,]),'ID_REF':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,263,268,269,278,279,280,286,294,299,311,327,328,334,335,353,362,364,383,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,262,291,74,262,74,74,74,74,74,74,74,74,74,74,74,262,291,262,74,]),'S_ASSIGNATION':([263,362,],[292,377,]),'append_jump':([265,313,],[294,328,]),'update_global_fun':([7,],[9,]),'end_for_operation_processing':([397,],[400,]),'process_return_operation_with_return_value':([330,],[342,]),'C':([54,],[80,]),'G':([67,],[111,]),'check_int_type':([220,],[240,]),'check_return_type_correspondence':([315,],[330,]),'K':([97,],[136,]),'check_sol_duplicates':([102,103,],[141,142,]),'O':([155,],[177,]),'generate_go_to_main_quad':([9,],[20,]),'generate_exec_draw_rectangle_quad':([384,],[391,]),'DRAW_RECTANGLE':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'check_var_duplicates':([36,],[40,]),'push_false_bottom':([65,],[108,]),'get_var_type':([131,],[155,]),'process_list_reference':([256,],[284,]),'S':([355,401,],[370,403,]),'process_for_condition_operation':([340,],[352,]),'process_print_argument':([184,],[204,]),'MOVE_DOWN':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'LIST_TYPE':([25,],[31,]),'FACTOR':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,268,278,279,280,286,294,299,311,327,328,334,335,383,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'MAIN_DEFINITION':([44,],[52,]),'RETURN_STATEMENT':([247,269,353,364,],[266,266,266,266,]),'WHILE':([247,269,353,364,],[267,267,267,267,]),'create_global_fun':([3,],[4,]),'process_list_length_reference':([254,],[282,]),'BLOCK':([341,343,388,394,399,],[354,355,395,397,401,]),'S_STATUTE':([247,269,],[269,269,]),'MOVE_LEFT':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'process_next_element':([376,],[386,]),'LIST_TYPE_SPECIFICATION':([22,60,],[26,26,]),'process_negation_operation':([127,],[151,]),'generate_exec_draw_circle_quad':([345,],[357,]),'process_assignation_operation':([326,339,],[338,351,]),'EXPRESSION':([54,82,108,132,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,268,278,279,280,286,294,299,311,327,328,334,335,383,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'empty':([8,12,22,38,41,46,53,60,67,72,97,132,155,174,185,214,233,247,257,269,289,308,353,355,364,386,401,],[19,19,27,43,43,55,61,27,119,126,139,157,176,195,205,235,195,270,287,270,310,205,363,367,363,287,404,]),'upload_global_return_var':([141,142,],[163,164,]),'B':([46,],[53,]),'end_argument_processing':([215,],[236,]),'F':([247,269,],[271,297,]),'J':([72,],[123,]),'append_false_bottom':([272,],[299,]),'N':([54,82,108,132,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,268,278,279,280,286,294,299,311,327,328,334,335,383,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'R':([355,],[371,]),'V':([174,233,],[196,252,]),'Z':([38,41,],[45,47,]),'check_param_duplicates':([246,],[259,]),'id_ref_check_type_correspondence':([175,178,],[197,199,]),'check_list_append_exp_type':([255,],[283,]),'reset_execution_block':([344,349,],[356,361,]),'process_possible_plus_minus_operation':([150,],[171,]),'PARAMS':([185,308,],[206,325,]),'TYPE':([8,12,42,185,247,269,308,],[18,18,50,207,18,18,207,]),'process_var_reference':([198,],[219,]),'process_for_assignation_operation':([377,],[387,]),'check_for_list_definition':([64,],[107,]),'update_local_count':([40,],[46,]),'S_EXPRESSION':([54,82,108,132,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,268,278,279,280,286,294,299,311,327,328,334,335,383,],[64,127,146,156,165,169,170,172,173,181,182,184,194,220,230,231,232,194,255,295,302,303,304,306,314,317,326,339,340,346,347,390,]),'process_list_append_reference':([305,],[322,]),'check_type_correspondence':([90,],[132,]),'process_possible_multiply_divide_operation':([161,],[183,]),'FOR':([247,269,353,364,],[264,264,264,264,]),'TERM':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,268,278,279,280,286,294,299,311,327,328,334,335,383,],[72,72,72,72,72,72,161,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'check_for_list_type_specification':([27,],[37,]),'pop_false_bottom':([167,],[189,]),'MOVE_RIGHT':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'print_funDir':([104,],[143,]),'check_for_list_reference':([176,],[198,]),'generate_exec_print_quad':([224,],[244,]),'CON_VAR':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,273,77,273,77,77,77,77,77,77,77,77,77,77,77,273,273,77,]),'print_currentSymTab':([20,318,324,],[23,332,337,]),'process_return_operation_without_return_value':([296,],[316,]),'CYCLE':([247,269,353,364,],[274,274,274,274,]),'A':([22,60,],[24,105,]),'STATUTE':([247,269,353,364,],[275,275,364,364,]),'process_argument':([194,],[214,]),'update_list_local_or_global_count':([179,323,],[200,336,]),'end_while_operation_processing':([354,],[366,]),'I':([72,],[122,]),'DRAW_LINE':([54,82,108,112,123,132,137,144,148,149,152,153,159,160,162,174,199,211,212,213,233,239,247,268,269,278,279,280,286,294,299,311,327,328,334,335,353,364,383,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'Q':([353,364,],[365,378,]),'U':([401,],[406,]),'Y':([289,],[309,]),'check_for_return_statement':([248,258,],[277,288,]),'process_draw_argument':([170,172,173,230,231,232,302,303,304,346,347,],[191,192,193,249,250,251,319,320,321,358,359,]),'generate_exec_draw_line_quad':([385,],[392,]),'P':([132,],[158,]),'check_for_list_assignation':([55,],[101,]),'VAR_BLOCK':([5,],[7,]),'check_var_existence':([87,293,],[131,131,]),'process_possible_relop_operation':([147,],[168,]),'generate_exec_move_left_quad':([210,],[229,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID create_global_fun COLON VAR_BLOCK update_global_fun generate_go_to_main_quad print_currentSymTab SOLS COLON SOL_DEFINITIONS MAIN_DEFINITION update_constant_number free_symbol_table print_funDir','program',15,'p_program','parser.py',61),
  ('generate_go_to_main_quad -> <empty>','generate_go_to_main_quad',0,'p_generate_go_to_main_quad','parser.py',66),
  ('update_go_to_main_quad -> <empty>','update_go_to_main_quad',0,'p_update_go_to_main_quad','parser.py',73),
  ('print_funDir -> <empty>','print_funDir',0,'p_print_funDir','parser.py',80),
  ('free_symbol_table -> <empty>','free_symbol_table',0,'p_free_symbol_table','parser.py',86),
  ('update_constant_number -> <empty>','update_constant_number',0,'p_update_constant_number','parser.py',93),
  ('create_global_fun -> <empty>','create_global_fun',0,'p_create_global_fun','parser.py',102),
  ('update_global_fun -> <empty>','update_global_fun',0,'p_update_global_fun','parser.py',114),
  ('print_currentSymTab -> <empty>','print_currentSymTab',0,'p_print_currentSymTab','parser.py',128),
  ('VAR_BLOCK -> VARS COLON AA','VAR_BLOCK',3,'p_var_block','parser.py',136),
  ('AA -> VAR_DEFINITIONS AA','AA',2,'p_aa','parser.py',141),
  ('AA -> empty','AA',1,'p_aa','parser.py',142),
  ('VAR_DEFINITIONS -> TYPE store_type A TICK','VAR_DEFINITIONS',4,'p_var_definitions','parser.py',149),
  ('store_type -> <empty>','store_type',0,'p_store_type','parser.py',154),
  ('A -> LIST_TYPE_SPECIFICATION ID check_var_duplicates update_local_count B D','A',6,'p_a','parser.py',174),
  ('LIST_TYPE_SPECIFICATION -> LESS_T LIST_TYPE GREATER_T','LIST_TYPE_SPECIFICATION',3,'p_list_type_specification','parser.py',179),
  ('LIST_TYPE_SPECIFICATION -> empty check_for_list_type_specification','LIST_TYPE_SPECIFICATION',2,'p_list_type_specification','parser.py',180),
  ('check_for_list_type_specification -> <empty>','check_for_list_type_specification',0,'p_check_for_list_type_specification','parser.py',185),
  ('LIST_TYPE -> INT','LIST_TYPE',1,'p_list_type','parser.py',193),
  ('LIST_TYPE -> FLOAT','LIST_TYPE',1,'p_list_type','parser.py',194),
  ('LIST_TYPE -> CHAR','LIST_TYPE',1,'p_list_type','parser.py',195),
  ('LIST_TYPE -> STRING','LIST_TYPE',1,'p_list_type','parser.py',196),
  ('LIST_TYPE -> BOOL','LIST_TYPE',1,'p_list_type','parser.py',197),
  ('check_var_duplicates -> <empty>','check_var_duplicates',0,'p_check_var_duplicates','parser.py',217),
  ('update_local_count -> <empty>','update_local_count',0,'p_update_local_count','parser.py',241),
  ('B -> EQUALS C','B',2,'p_b','parser.py',250),
  ('B -> empty check_for_list_assignation','B',2,'p_b','parser.py',251),
  ('check_for_list_assignation -> <empty>','check_for_list_assignation',0,'p_check_for_list_assignation','parser.py',256),
  ('append_left_operand -> <empty>','append_left_operand',0,'p_append_left_operand','parser.py',264),
  ('C -> S_EXPRESSION check_for_list_definition append_equals append_left_operand process_definition_assignation_operation','C',5,'p_c','parser.py',274),
  ('C -> LIST_EXP','C',1,'p_c','parser.py',275),
  ('check_for_list_definition -> <empty>','check_for_list_definition',0,'p_check_for_list_definition','parser.py',280),
  ('D -> COMMA A','D',2,'p_d','parser.py',288),
  ('D -> empty','D',1,'p_d','parser.py',289),
  ('S_BLOCK -> L_BRACE F R_BRACE','S_BLOCK',3,'p_s_block','parser.py',296),
  ('F -> S_STATUTE F','F',2,'p_f','parser.py',301),
  ('F -> empty','F',1,'p_f','parser.py',302),
  ('S_STATUTE -> VAR_DEFINITIONS','S_STATUTE',1,'p_s_statute','parser.py',309),
  ('S_STATUTE -> STATUTE','S_STATUTE',1,'p_s_statute','parser.py',310),
  ('SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates upload_global_return_var L_PAREN PARAMS R_PAREN COLON S_BLOCK check_for_return_statement TICK update_fun print_currentSymTab free_symbol_table reset_execution_block','SOLUTION_DEF',17,'p_solution_def','parser.py',317),
  ('upload_global_return_var -> <empty>','upload_global_return_var',0,'p_upload_global_return_var','parser.py',322),
  ('check_for_return_statement -> <empty>','check_for_return_statement',0,'p_check_for_return_statement','parser.py',337),
  ('reset_execution_block -> <empty>','reset_execution_block',0,'p_reset_execution_block','parser.py',347),
  ('check_sol_duplicates -> <empty>','check_sol_duplicates',0,'p_check_sol_duplicates','parser.py',353),
  ('update_fun -> <empty>','update_fun',0,'p_update_fun','parser.py',367),
  ('STATUTE -> CONDITION','STATUTE',1,'p_statute','parser.py',384),
  ('STATUTE -> CYCLE','STATUTE',1,'p_statute','parser.py',385),
  ('STATUTE -> ASSIGNATION','STATUTE',1,'p_statute','parser.py',386),
  ('STATUTE -> CON_VAR TICK','STATUTE',2,'p_statute','parser.py',387),
  ('STATUTE -> RETURN_STATEMENT','STATUTE',1,'p_statute','parser.py',388),
  ('RETURN_STATEMENT -> RETURN S_EXPRESSION TICK check_return_type_correspondence process_return_operation_with_return_value','RETURN_STATEMENT',5,'p_return','parser.py',395),
  ('RETURN_STATEMENT -> RETURN TICK process_return_operation_without_return_value','RETURN_STATEMENT',3,'p_return','parser.py',396),
  ('check_return_type_correspondence -> <empty>','check_return_type_correspondence',0,'p_check_return_type_correspondence','parser.py',401),
  ('process_return_operation_with_return_value -> <empty>','process_return_operation_with_return_value',0,'p_process_return_operation_with_return_value','parser.py',411),
  ('process_return_operation_without_return_value -> <empty>','process_return_operation_without_return_value',0,'p_process_return_operation_without_return_value','parser.py',427),
  ('S_TYPE -> VOID','S_TYPE',1,'p_s_type','parser.py',442),
  ('S_TYPE -> TYPE','S_TYPE',1,'p_s_type','parser.py',443),
  ('TYPE -> INT','TYPE',1,'p_type','parser.py',454),
  ('TYPE -> FLOAT','TYPE',1,'p_type','parser.py',455),
  ('TYPE -> CHAR','TYPE',1,'p_type','parser.py',456),
  ('TYPE -> STRING','TYPE',1,'p_type','parser.py',457),
  ('TYPE -> BOOL','TYPE',1,'p_type','parser.py',458),
  ('TYPE -> LIST','TYPE',1,'p_type','parser.py',459),
  ('EXPRESSION -> EXP G','EXPRESSION',2,'p_expression','parser.py',478),
  ('G -> H EXP process_possible_relop_operation','G',3,'p_g','parser.py',483),
  ('G -> empty','G',1,'p_g','parser.py',484),
  ('process_possible_relop_operation -> <empty>','process_possible_relop_operation',0,'p_process_possible_relop_operation','parser.py',489),
  ('H -> LESS_T','H',1,'p_h','parser.py',522),
  ('H -> GREATER_T','H',1,'p_h','parser.py',523),
  ('H -> GREATER_T_EQUALS','H',1,'p_h','parser.py',524),
  ('H -> LESS_T_EQUALS','H',1,'p_h','parser.py',525),
  ('H -> IS','H',1,'p_h','parser.py',526),
  ('H -> AND','H',1,'p_h','parser.py',527),
  ('H -> OR','H',1,'p_h','parser.py',528),
  ('H -> PERCENTAGE','H',1,'p_h','parser.py',529),
  ('EXP -> TERM I','EXP',2,'p_exp','parser.py',552),
  ('process_possible_plus_minus_operation -> <empty>','process_possible_plus_minus_operation',0,'p_process_possible_plus_minus_operation','parser.py',557),
  ('I -> J EXP process_possible_plus_minus_operation','I',3,'p_i','parser.py',589),
  ('I -> empty','I',1,'p_i','parser.py',590),
  ('J -> PLUS','J',1,'p_j','parser.py',595),
  ('J -> MINUS','J',1,'p_j','parser.py',596),
  ('TERM -> FACTOR K','TERM',2,'p_term','parser.py',607),
  ('process_possible_multiply_divide_operation -> <empty>','process_possible_multiply_divide_operation',0,'p_process_possible_multiply_divide_operation','parser.py',612),
  ('K -> L TERM process_possible_multiply_divide_operation','K',3,'p_k','parser.py',644),
  ('K -> empty','K',1,'p_k','parser.py',645),
  ('L -> MULTIPLY','L',1,'p_l','parser.py',650),
  ('L -> DIVIDE','L',1,'p_l','parser.py',651),
  ('FACTOR -> L_PAREN push_false_bottom S_EXPRESSION R_PAREN pop_false_bottom','FACTOR',5,'p_factor','parser.py',662),
  ('FACTOR -> CON_VAR','FACTOR',1,'p_factor','parser.py',663),
  ('push_false_bottom -> <empty>','push_false_bottom',0,'p_push_false_bottom','parser.py',668),
  ('pop_false_bottom -> <empty>','pop_false_bottom',0,'p_pop_false_bottom','parser.py',674),
  ('CON_VAR -> ID_REF','CON_VAR',1,'p_con_var','parser.py',682),
  ('CON_VAR -> CON_VAR_TERMINAL','CON_VAR',1,'p_con_var','parser.py',683),
  ('CON_VAR -> SOLUTION_CALL','CON_VAR',1,'p_con_var','parser.py',684),
  ('CON_VAR -> PREDEFINED_SOLS','CON_VAR',1,'p_con_var','parser.py',685),
  ('CON_VAR_TERMINAL -> INT_CONT','CON_VAR_TERMINAL',1,'p_con_var_terminal','parser.py',690),
  ('CON_VAR_TERMINAL -> STRING_CONT','CON_VAR_TERMINAL',1,'p_con_var_terminal','parser.py',691),
  ('CON_VAR_TERMINAL -> CHAR_CONT','CON_VAR_TERMINAL',1,'p_con_var_terminal','parser.py',692),
  ('CON_VAR_TERMINAL -> FLOAT_CONT','CON_VAR_TERMINAL',1,'p_con_var_terminal','parser.py',693),
  ('CON_VAR_TERMINAL -> BOOL_CONT','CON_VAR_TERMINAL',1,'p_con_var_terminal','parser.py',694),
  ('NEGATION -> N S_EXPRESSION process_negation_operation','NEGATION',3,'p_negation','parser.py',742),
  ('process_negation_operation -> <empty>','process_negation_operation',0,'p_process_negation_operation','parser.py',747),
  ('N -> NOT','N',1,'p_n','parser.py',777),
  ('ID_REF -> ID check_var_existence get_var_type O','ID_REF',4,'p_ID_ref','parser.py',785),
  ('check_var_existence -> <empty>','check_var_existence',0,'p_check_var_existence','parser.py',790),
  ('get_var_type -> <empty>','get_var_type',0,'p_get_var_type','parser.py',799),
  ('O -> L_BRACK id_ref_check_type_correspondence S_EXPRESSION check_int_type R_BRACK process_list_reference','O',6,'p_o','parser.py',812),
  ('O -> POINT id_ref_check_type_correspondence LENGTH L_PAREN R_PAREN process_list_length_reference','O',6,'p_o','parser.py',813),
  ('O -> POINT id_ref_check_type_correspondence APPEND L_PAREN S_EXPRESSION check_list_append_exp_type R_PAREN process_list_append_reference','O',8,'p_o','parser.py',814),
  ('O -> POINT id_ref_check_type_correspondence POP L_PAREN R_PAREN process_list_pop_reference','O',6,'p_o','parser.py',815),
  ('O -> empty check_for_list_reference process_var_reference','O',3,'p_o','parser.py',816),
  ('check_list_append_exp_type -> <empty>','check_list_append_exp_type',0,'p_check_list_append_exp_type','parser.py',821),
  ('process_list_append_reference -> <empty>','process_list_append_reference',0,'p_process_list_append_reference','parser.py',830),
  ('process_list_pop_reference -> <empty>','process_list_pop_reference',0,'p_process_list_pop_reference','parser.py',841),
  ('process_list_length_reference -> <empty>','process_list_length_reference',0,'p_process_list_length_reference','parser.py',874),
  ('process_var_reference -> <empty>','process_var_reference',0,'p_process_var_reference','parser.py',901),
  ('process_list_reference -> <empty>','process_list_reference',0,'p_process_list_reference','parser.py',918),
  ('check_for_list_reference -> <empty>','check_for_list_reference',0,'p_check_for_list_reference','parser.py',951),
  ('id_ref_check_type_correspondence -> <empty>','id_ref_check_type_correspondence',0,'p_id_ref_check_type_correspondence','parser.py',959),
  ('check_int_type -> <empty>','check_int_type',0,'p_check_int_type','parser.py',967),
  ('LIST_EXP -> L_BRACK check_type_correspondence P R_BRACK end_list_processing','LIST_EXP',5,'p_list_exp','parser.py',977),
  ('end_list_processing -> <empty>','end_list_processing',0,'p_end_list_processing','parser.py',982),
  ('check_type_correspondence -> <empty>','check_type_correspondence',0,'p_check_type_correspondence','parser.py',1004),
  ('P -> S_EXPRESSION check_list_exp_type_correspondence update_list_local_or_global_count append_equals ask_for_avail process_definition_assignation_operation PP','P',7,'p_p','parser.py',1012),
  ('P -> empty','P',1,'p_p','parser.py',1013),
  ('update_list_local_or_global_count -> <empty>','update_list_local_or_global_count',0,'p_update_list_local_or_global_count','parser.py',1018),
  ('check_list_exp_type_correspondence -> <empty>','check_list_exp_type_correspondence',0,'p_check_list_exp_type_correspondence','parser.py',1026),
  ('process_definition_assignation_operation -> <empty>','process_definition_assignation_operation',0,'p_process_definition_assignation_operation','parser.py',1035),
  ('ask_for_avail -> <empty>','ask_for_avail',0,'p_ask_for_avail','parser.py',1057),
  ('PP -> COMMA S_EXPRESSION check_list_exp_type_correspondence update_list_local_or_global_count append_equals ask_for_avail process_definition_assignation_operation process_next_element PP','PP',9,'p_pp','parser.py',1081),
  ('PP -> empty','PP',1,'p_pp','parser.py',1082),
  ('process_next_element -> <empty>','process_next_element',0,'p_process_next_element','parser.py',1087),
  ('ASSIGNATION -> ID_REF EQUALS append_equals S_EXPRESSION process_assignation_operation TICK','ASSIGNATION',6,'p_assignation','parser.py',1098),
  ('append_equals -> <empty>','append_equals',0,'p_append_equals','parser.py',1103),
  ('process_assignation_operation -> <empty>','process_assignation_operation',0,'p_process_assignation_operation','parser.py',1109),
  ('BLOCK -> L_BRACE Q R_BRACE','BLOCK',3,'p_block','parser.py',1131),
  ('Q -> STATUTE Q','Q',2,'p_q','parser.py',1136),
  ('Q -> empty','Q',1,'p_q','parser.py',1137),
  ('S_ASSIGNATION -> ID_REF EQUALS append_equals S_EXPRESSION process_assignation_operation','S_ASSIGNATION',5,'p_s_assignation','parser.py',1144),
  ('WHILE -> WHILE_CYCLE append_jump S_EXPRESSION process_condition_operation COLON BLOCK end_while_operation_processing TICK','WHILE',8,'p_while','parser.py',1151),
  ('append_jump -> <empty>','append_jump',0,'p_append_jump','parser.py',1156),
  ('end_while_operation_processing -> <empty>','end_while_operation_processing',0,'p_end_while_operation_processing','parser.py',1162),
  ('FOR -> FOR_CYCLE S_ASSIGNATION TICK append_jump S_EXPRESSION process_for_condition_operation TICK S_ASSIGNATION process_for_assignation_operation COLON BLOCK end_for_operation_processing TICK','FOR',13,'p_for','parser.py',1173),
  ('process_for_condition_operation -> <empty>','process_for_condition_operation',0,'p_process_for_condition_operation','parser.py',1178),
  ('process_for_assignation_operation -> <empty>','process_for_assignation_operation',0,'p_process_for_assignation_operation','parser.py',1193),
  ('end_for_operation_processing -> <empty>','end_for_operation_processing',0,'p_end_for_operation_processing','parser.py',1201),
  ('CYCLE -> FOR','CYCLE',1,'p_cycle','parser.py',1216),
  ('CYCLE -> WHILE','CYCLE',1,'p_cycle','parser.py',1217),
  ('CONDITION -> IF append_false_bottom S_EXPRESSION process_condition_operation COLON BLOCK R TICK end_condition_operation_processing','CONDITION',9,'p_condition','parser.py',1224),
  ('end_condition_operation_processing -> <empty>','end_condition_operation_processing',0,'p_end_condition_operation_processing','parser.py',1229),
  ('append_false_bottom -> <empty>','append_false_bottom',0,'p_append_false_bottom','parser.py',1239),
  ('process_condition_operation -> <empty>','process_condition_operation',0,'p_process_condition_operation','parser.py',1245),
  ('R -> S','R',1,'p_r','parser.py',1257),
  ('R -> T','R',1,'p_r','parser.py',1258),
  ('R -> empty','R',1,'p_r','parser.py',1259),
  ('S -> ELIF process_elif_operation S_EXPRESSION process_condition_operation COLON BLOCK U','S',7,'p_s','parser.py',1264),
  ('process_elif_operation -> <empty>','process_elif_operation',0,'p_process_elif_operation','parser.py',1269),
  ('U -> S','U',1,'p_u','parser.py',1278),
  ('U -> T','U',1,'p_u','parser.py',1279),
  ('U -> empty','U',1,'p_u','parser.py',1280),
  ('T -> ELSE process_else_operation COLON BLOCK end_else_operation_processing','T',5,'p_t','parser.py',1285),
  ('process_else_operation -> <empty>','process_else_operation',0,'p_process_else_operation','parser.py',1290),
  ('end_else_operation_processing -> <empty>','end_else_operation_processing',0,'p_end_else_operation_processing','parser.py',1299),
  ('SOLUTION_CALL -> ID check_sol_existence L_PAREN generate_era_quad V R_PAREN end_argument_processing','SOLUTION_CALL',7,'p_solution_call','parser.py',1308),
  ('end_argument_processing -> <empty>','end_argument_processing',0,'p_end_argument_processing','parser.py',1313),
  ('generate_era_quad -> <empty>','generate_era_quad',0,'p_generate_era_quad','parser.py',1338),
  ('check_sol_existence -> <empty>','check_sol_existence',0,'p_check_sol_existence','parser.py',1346),
  ('V -> S_EXPRESSION process_argument X','V',3,'p_v','parser.py',1359),
  ('V -> empty','V',1,'p_v','parser.py',1360),
  ('process_argument -> <empty>','process_argument',0,'p_process_argument','parser.py',1365),
  ('X -> COMMA V','X',2,'p_x','parser.py',1384),
  ('X -> empty','X',1,'p_x','parser.py',1385),
  ('S_EXPRESSION -> EXPRESSION','S_EXPRESSION',1,'p_s_expression','parser.py',1392),
  ('S_EXPRESSION -> NEGATION','S_EXPRESSION',1,'p_s_expression','parser.py',1393),
  ('PARAMS -> TYPE store_type ID check_param_duplicates update_param_count Y','PARAMS',6,'p_params','parser.py',1400),
  ('PARAMS -> empty','PARAMS',1,'p_params','parser.py',1401),
  ('check_param_duplicates -> <empty>','check_param_duplicates',0,'p_check_param_duplicates','parser.py',1406),
  ('update_param_count -> <empty>','update_param_count',0,'p_update_param_count','parser.py',1422),
  ('Y -> COMMA PARAMS','Y',2,'p_y','parser.py',1429),
  ('Y -> empty','Y',1,'p_y','parser.py',1430),
  ('SOL_DEFINITIONS -> Z','SOL_DEFINITIONS',1,'p_sol_definitions','parser.py',1437),
  ('Z -> SOLUTION_DEF Z','Z',2,'p_z','parser.py',1442),
  ('Z -> empty','Z',1,'p_z','parser.py',1443),
  ('MAIN_DEFINITION -> INT store_type MAIN_R check_sol_duplicates upload_global_return_var L_PAREN R_PAREN COLON S_BLOCK check_for_return_statement TICK update_fun print_currentSymTab free_symbol_table reset_execution_block update_go_to_main_quad','MAIN_DEFINITION',16,'p_main_definition','parser.py',1450),
  ('DRAW_CIRCLE -> DRAW_CIRCLE_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument R_PAREN end_draw_argument_processing generate_exec_draw_circle_quad','DRAW_CIRCLE',14,'p_draw_circle','parser.py',1461),
  ('generate_exec_draw_circle_quad -> <empty>','generate_exec_draw_circle_quad',0,'p_generate_exec_draw_circle_quad','parser.py',1467),
  ('DRAW_LINE -> DRAW_LINE_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument R_PAREN end_draw_argument_processing generate_exec_draw_line_quad','DRAW_LINE',17,'p_draw_line','parser.py',1475),
  ('generate_exec_draw_line_quad -> <empty>','generate_exec_draw_line_quad',0,'p_generate_exec_draw_line_quad','parser.py',1481),
  ('DRAW_RECTANGLE -> DRAW_RECTANGLE_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument COMMA S_EXPRESSION process_draw_argument R_PAREN end_draw_argument_processing generate_exec_draw_rectangle_quad','DRAW_RECTANGLE',17,'p_draw_rectangle','parser.py',1489),
  ('generate_exec_draw_rectangle_quad -> <empty>','generate_exec_draw_rectangle_quad',0,'p_generate_exec_draw_rectangle_quad','parser.py',1495),
  ('process_draw_argument -> <empty>','process_draw_argument',0,'p_process_draw_argument','parser.py',1501),
  ('end_draw_argument_processing -> <empty>','end_draw_argument_processing',0,'p_end_draw_argument_processing','parser.py',1514),
  ('MOVE_UP -> MOVE_UP_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_up_quad','MOVE_UP',7,'p_move_up','parser.py',1523),
  ('generate_exec_move_up_quad -> <empty>','generate_exec_move_up_quad',0,'p_generate_exec_move_up_quad','parser.py',1529),
  ('MOVE_RIGHT -> MOVE_RIGHT_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_right_quad','MOVE_RIGHT',7,'p_move_right','parser.py',1537),
  ('generate_exec_move_right_quad -> <empty>','generate_exec_move_right_quad',0,'p_generate_exec_move_right_quad','parser.py',1543),
  ('MOVE_DOWN -> MOVE_DOWN_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_down_quad','MOVE_DOWN',7,'p_move_down','parser.py',1551),
  ('generate_exec_move_down_quad -> <empty>','generate_exec_move_down_quad',0,'p_generate_exec_move_down_quad','parser.py',1557),
  ('MOVE_LEFT -> MOVE_LEFT_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_move_argument R_PAREN generate_exec_move_left_quad','MOVE_LEFT',7,'p_move_left','parser.py',1565),
  ('generate_exec_move_left_quad -> <empty>','generate_exec_move_left_quad',0,'p_generate_exec_move_left_quad','parser.py',1571),
  ('process_move_argument -> <empty>','process_move_argument',0,'p_process_move_argument','parser.py',1577),
  ('PRINT -> PRINT_R generate_predefined_sol_quad L_PAREN S_EXPRESSION process_print_argument R_PAREN generate_exec_print_quad','PRINT',7,'p_print','parser.py',1590),
  ('generate_exec_print_quad -> <empty>','generate_exec_print_quad',0,'p_generate_exec_print_quad','parser.py',1596),
  ('process_print_argument -> <empty>','process_print_argument',0,'p_process_print_argument','parser.py',1602),
  ('generate_predefined_sol_quad -> <empty>','generate_predefined_sol_quad',0,'p_generate_predefined_sol_quad','parser.py',1613),
  ('PREDEFINED_SOLS -> DRAW_LINE','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1636),
  ('PREDEFINED_SOLS -> DRAW_CIRCLE','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1637),
  ('PREDEFINED_SOLS -> DRAW_RECTANGLE','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1638),
  ('PREDEFINED_SOLS -> MOVE_UP','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1639),
  ('PREDEFINED_SOLS -> MOVE_RIGHT','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1640),
  ('PREDEFINED_SOLS -> MOVE_DOWN','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1641),
  ('PREDEFINED_SOLS -> MOVE_LEFT','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1642),
  ('PREDEFINED_SOLS -> PRINT','PREDEFINED_SOLS',1,'p_predefined_sols','parser.py',1643),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1652),
]
