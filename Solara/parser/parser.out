Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    MOVE_LEFT
    MOVE_RIGHT
    MOVE_DOWN
    MOVE_UP
    MULTI_COMMENT
    DRAW_LINE
    DRAW_RECTANGLE
    SINGLE_COMMENT
    DRAW_CIRCLE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK
Rule 2     DECLARATIONS -> TYPE A TICK E
Rule 3     A -> ID B D
Rule 4     B -> EQUALS C
Rule 5     B -> empty
Rule 6     C -> EXPRESSION
Rule 7     C -> LIST_EXP
Rule 8     D -> COMMA A
Rule 9     D -> empty
Rule 10    E -> DECLARATIONS
Rule 11    E -> empty
Rule 12    S_BLOCK -> L_BRACE F R_BRACE
Rule 13    F -> S_STATUTE F
Rule 14    F -> empty
Rule 15    S_STATUTE -> SOLUTION_DEF
Rule 16    S_STATUTE -> STATUTE
Rule 17    SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK
Rule 18    STATUTE -> CONDITION
Rule 19    STATUTE -> CYCLE
Rule 20    STATUTE -> ASSIGNATION
Rule 21    S_TYPE -> VOID
Rule 22    S_TYPE -> TYPE
Rule 23    TYPE -> INT
Rule 24    TYPE -> FLOAT
Rule 25    TYPE -> CHAR
Rule 26    TYPE -> STRING
Rule 27    TYPE -> BOOL
Rule 28    TYPE -> LIST
Rule 29    EXPRESSION -> EXP G
Rule 30    G -> H EXP
Rule 31    G -> empty
Rule 32    H -> LESS_T
Rule 33    H -> GREATER_T
Rule 34    H -> GREATER_T_EQUALS
Rule 35    H -> LESS_T_EQUALS
Rule 36    H -> IS
Rule 37    H -> AND
Rule 38    H -> OR
Rule 39    H -> PERCENTAGE
Rule 40    EXP -> TERM I
Rule 41    I -> J EXP
Rule 42    I -> empty
Rule 43    J -> PLUS
Rule 44    J -> MINUS
Rule 45    TERM -> FACTOR K
Rule 46    K -> L TERM
Rule 47    K -> empty
Rule 48    L -> MULTIPLY
Rule 49    L -> DIVIDE
Rule 50    FACTOR -> L_PAREN EXPRESSION R_PAREN
Rule 51    FACTOR -> M CON_VAR
Rule 52    M -> PLUS
Rule 53    M -> MINUS
Rule 54    M -> empty
Rule 55    CON_VAR -> ID_REF
Rule 56    CON_VAR -> INT_CONT
Rule 57    CON_VAR -> STRING_CONT
Rule 58    CON_VAR -> CHAR_CONT
Rule 59    CON_VAR -> FLOAT_CONT
Rule 60    CON_VAR -> BOOL_CONT
Rule 61    CON_VAR -> SOLUTION_CALL
Rule 62    NEGATION -> N EXPRESSION
Rule 63    N -> NOT
Rule 64    ID_REF -> ID O
Rule 65    O -> L_BRACK EXPRESSION R_BRACK
Rule 66    O -> empty
Rule 67    LIST_EXP -> L_BRACK EXPRESSION P R_BRACK
Rule 68    P -> COMMA EXPRESSION P
Rule 69    P -> empty
Rule 70    ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK
Rule 71    BLOCK -> L_BRACE Q R_BRACE
Rule 72    Q -> STATUTE Q
Rule 73    Q -> empty
Rule 74    S_ASSIGNATION -> ID_REF EQUALS EXPRESSION
Rule 75    WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK
Rule 76    FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
Rule 77    CYCLE -> FOR
Rule 78    CYCLE -> WHILE
Rule 79    CONDITION -> IF EXPRESSION COLON BLOCK R TICK
Rule 80    R -> S
Rule 81    R -> T
Rule 82    S -> ELIF EXPRESSION COLON BLOCK U
Rule 83    U -> S
Rule 84    U -> T
Rule 85    U -> empty
Rule 86    T -> ELSE BLOCK
Rule 87    SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK
Rule 88    V -> W X
Rule 89    W -> EXPRESSION
Rule 90    W -> NEGATION
Rule 91    X -> COMMA V
Rule 92    X -> empty
Rule 93    PARAMS -> TYPE ID Y
Rule 94    Y -> COMMA PARAMS
Rule 95    Y -> empty
Rule 96    empty -> <empty>

Terminals, with rules where they appear

AND                  : 37
BOOL                 : 27
BOOL_CONT            : 60
CHAR                 : 25
CHAR_CONT            : 58
COLON                : 1 1 1 17 75 76 79 82
COMMA                : 8 68 91 94
CORE                 : 1
DIVIDE               : 49
DRAW_CIRCLE          : 
DRAW_LINE            : 
DRAW_RECTANGLE       : 
ELIF                 : 82
ELSE                 : 86
EQUALS               : 4 70 74
FLOAT                : 24
FLOAT_CONT           : 59
FOR_CYCLE            : 76
GREATER_T            : 33
GREATER_T_EQUALS     : 34
ID                   : 1 3 17 64 87 93
IF                   : 79
INT                  : 23
INT_CONT             : 56
IS                   : 36
LESS_T               : 32
LESS_T_EQUALS        : 35
LIST                 : 28
L_BRACE              : 12 71
L_BRACK              : 65 67
L_PAREN              : 17 50 87
MINUS                : 44 53
MOVE_DOWN            : 
MOVE_LEFT            : 
MOVE_RIGHT           : 
MOVE_UP              : 
MULTIPLY             : 48
MULTI_COMMENT        : 
NOT                  : 63
OR                   : 38
PERCENTAGE           : 39
PLUS                 : 43 52
PRINT                : 
PROGRAM              : 1
R_BRACE              : 12 71
R_BRACK              : 65 67
R_PAREN              : 17 50 87
SINGLE_COMMENT       : 
SOL                  : 17
STRING               : 26
STRING_CONT          : 57
TICK                 : 2 17 70 75 76 76 76 79 87
VARS                 : 1
VOID                 : 21
WHILE_CYCLE          : 75
error                : 

Nonterminals, with rules where they appear

A                    : 2 8
ASSIGNATION          : 20
B                    : 3
BLOCK                : 17 75 76 79 82 86
C                    : 4
CONDITION            : 18
CON_VAR              : 51
CYCLE                : 19
D                    : 3
DECLARATIONS         : 1 10
E                    : 2
EXP                  : 29 30 41
EXPRESSION           : 6 50 62 65 67 68 70 74 75 76 79 82 89
F                    : 12 13
FACTOR               : 45
FOR                  : 77
G                    : 29
H                    : 30
I                    : 40
ID_REF               : 55 70 74
J                    : 41
K                    : 45
L                    : 46
LIST_EXP             : 7
M                    : 51
N                    : 62
NEGATION             : 90
O                    : 64
P                    : 67 68
PARAMS               : 17 94
Q                    : 71 72
R                    : 79
S                    : 80 83
SOLUTION_CALL        : 61
SOLUTION_DEF         : 15
STATUTE              : 16 72
S_ASSIGNATION        : 76 76
S_BLOCK              : 1
S_STATUTE            : 13
S_TYPE               : 17
T                    : 81 84
TERM                 : 40 46
TYPE                 : 2 22 93
U                    : 82
V                    : 87 91
W                    : 88
WHILE                : 78
X                    : 88
Y                    : 93
empty                : 5 9 11 14 31 42 47 54 66 69 73 85 92 95
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . VARS COLON DECLARATIONS CORE COLON S_BLOCK

    VARS            shift and go to state 5


state 5

    (1) program -> PROGRAM ID COLON VARS . COLON DECLARATIONS CORE COLON S_BLOCK

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM ID COLON VARS COLON . DECLARATIONS CORE COLON S_BLOCK
    (2) DECLARATIONS -> . TYPE A TICK E
    (23) TYPE -> . INT
    (24) TYPE -> . FLOAT
    (25) TYPE -> . CHAR
    (26) TYPE -> . STRING
    (27) TYPE -> . BOOL
    (28) TYPE -> . LIST

    INT             shift and go to state 9
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 12
    STRING          shift and go to state 8
    BOOL            shift and go to state 13
    LIST            shift and go to state 11

    DECLARATIONS                   shift and go to state 10
    TYPE                           shift and go to state 14

state 7

    (24) TYPE -> FLOAT .

    ID              reduce using rule 24 (TYPE -> FLOAT .)


state 8

    (26) TYPE -> STRING .

    ID              reduce using rule 26 (TYPE -> STRING .)


state 9

    (23) TYPE -> INT .

    ID              reduce using rule 23 (TYPE -> INT .)


state 10

    (1) program -> PROGRAM ID COLON VARS COLON DECLARATIONS . CORE COLON S_BLOCK

    CORE            shift and go to state 15


state 11

    (28) TYPE -> LIST .

    ID              reduce using rule 28 (TYPE -> LIST .)


state 12

    (25) TYPE -> CHAR .

    ID              reduce using rule 25 (TYPE -> CHAR .)


state 13

    (27) TYPE -> BOOL .

    ID              reduce using rule 27 (TYPE -> BOOL .)


state 14

    (2) DECLARATIONS -> TYPE . A TICK E
    (3) A -> . ID B D

    ID              shift and go to state 17

    A                              shift and go to state 16

state 15

    (1) program -> PROGRAM ID COLON VARS COLON DECLARATIONS CORE . COLON S_BLOCK

    COLON           shift and go to state 18


state 16

    (2) DECLARATIONS -> TYPE A . TICK E

    TICK            shift and go to state 19


state 17

    (3) A -> ID . B D
    (4) B -> . EQUALS C
    (5) B -> . empty
    (96) empty -> .

    EQUALS          shift and go to state 21
    COMMA           reduce using rule 96 (empty -> .)
    TICK            reduce using rule 96 (empty -> .)

    B                              shift and go to state 20
    empty                          shift and go to state 22

state 18

    (1) program -> PROGRAM ID COLON VARS COLON DECLARATIONS CORE COLON . S_BLOCK
    (12) S_BLOCK -> . L_BRACE F R_BRACE

    L_BRACE         shift and go to state 23

    S_BLOCK                        shift and go to state 24

state 19

    (2) DECLARATIONS -> TYPE A TICK . E
    (10) E -> . DECLARATIONS
    (11) E -> . empty
    (2) DECLARATIONS -> . TYPE A TICK E
    (96) empty -> .
    (23) TYPE -> . INT
    (24) TYPE -> . FLOAT
    (25) TYPE -> . CHAR
    (26) TYPE -> . STRING
    (27) TYPE -> . BOOL
    (28) TYPE -> . LIST

    CORE            reduce using rule 96 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 12
    STRING          shift and go to state 8
    BOOL            shift and go to state 13
    LIST            shift and go to state 11

    E                              shift and go to state 25
    DECLARATIONS                   shift and go to state 26
    TYPE                           shift and go to state 14
    empty                          shift and go to state 27

state 20

    (3) A -> ID B . D
    (8) D -> . COMMA A
    (9) D -> . empty
    (96) empty -> .

    COMMA           shift and go to state 29
    TICK            reduce using rule 96 (empty -> .)

    D                              shift and go to state 28
    empty                          shift and go to state 30

state 21

    (4) B -> EQUALS . C
    (6) C -> . EXPRESSION
    (7) C -> . LIST_EXP
    (29) EXPRESSION -> . EXP G
    (67) LIST_EXP -> . L_BRACK EXPRESSION P R_BRACK
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_BRACK         shift and go to state 33
    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    LIST_EXP                       shift and go to state 31
    C                              shift and go to state 32
    M                              shift and go to state 34
    TERM                           shift and go to state 36
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 40
    empty                          shift and go to state 42

state 22

    (5) B -> empty .

    COMMA           reduce using rule 5 (B -> empty .)
    TICK            reduce using rule 5 (B -> empty .)


state 23

    (12) S_BLOCK -> L_BRACE . F R_BRACE
    (13) F -> . S_STATUTE F
    (14) F -> . empty
    (15) S_STATUTE -> . SOLUTION_DEF
    (16) S_STATUTE -> . STATUTE
    (96) empty -> .
    (17) SOLUTION_DEF -> . SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (18) STATUTE -> . CONDITION
    (19) STATUTE -> . CYCLE
    (20) STATUTE -> . ASSIGNATION
    (79) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (77) CYCLE -> . FOR
    (78) CYCLE -> . WHILE
    (70) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (76) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (75) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (64) ID_REF -> . ID O

    R_BRACE         reduce using rule 96 (empty -> .)
    SOL             shift and go to state 47
    IF              shift and go to state 56
    FOR_CYCLE       shift and go to state 51
    WHILE_CYCLE     shift and go to state 58
    ID              shift and go to state 55

    SOLUTION_DEF                   shift and go to state 44
    ID_REF                         shift and go to state 46
    S_STATUTE                      shift and go to state 45
    FOR                            shift and go to state 53
    STATUTE                        shift and go to state 50
    F                              shift and go to state 54
    WHILE                          shift and go to state 43
    ASSIGNATION                    shift and go to state 52
    CONDITION                      shift and go to state 48
    empty                          shift and go to state 57
    CYCLE                          shift and go to state 49

state 24

    (1) program -> PROGRAM ID COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK .)


state 25

    (2) DECLARATIONS -> TYPE A TICK E .

    CORE            reduce using rule 2 (DECLARATIONS -> TYPE A TICK E .)


state 26

    (10) E -> DECLARATIONS .

    CORE            reduce using rule 10 (E -> DECLARATIONS .)


state 27

    (11) E -> empty .

    CORE            reduce using rule 11 (E -> empty .)


state 28

    (3) A -> ID B D .

    TICK            reduce using rule 3 (A -> ID B D .)


state 29

    (8) D -> COMMA . A
    (3) A -> . ID B D

    ID              shift and go to state 17

    A                              shift and go to state 59

state 30

    (9) D -> empty .

    TICK            reduce using rule 9 (D -> empty .)


state 31

    (7) C -> LIST_EXP .

    COMMA           reduce using rule 7 (C -> LIST_EXP .)
    TICK            reduce using rule 7 (C -> LIST_EXP .)


state 32

    (4) B -> EQUALS C .

    COMMA           reduce using rule 4 (B -> EQUALS C .)
    TICK            reduce using rule 4 (B -> EQUALS C .)


state 33

    (67) LIST_EXP -> L_BRACK . EXPRESSION P R_BRACK
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 60
    empty                          shift and go to state 42

state 34

    (51) FACTOR -> M . CON_VAR
    (55) CON_VAR -> . ID_REF
    (56) CON_VAR -> . INT_CONT
    (57) CON_VAR -> . STRING_CONT
    (58) CON_VAR -> . CHAR_CONT
    (59) CON_VAR -> . FLOAT_CONT
    (60) CON_VAR -> . BOOL_CONT
    (61) CON_VAR -> . SOLUTION_CALL
    (64) ID_REF -> . ID O
    (87) SOLUTION_CALL -> . ID L_PAREN V R_PAREN TICK

    INT_CONT        shift and go to state 67
    STRING_CONT     shift and go to state 61
    CHAR_CONT       shift and go to state 63
    FLOAT_CONT      shift and go to state 62
    BOOL_CONT       shift and go to state 69
    ID              shift and go to state 68

    ID_REF                         shift and go to state 64
    SOLUTION_CALL                  shift and go to state 65
    CON_VAR                        shift and go to state 66

state 35

    (50) FACTOR -> L_PAREN . EXPRESSION R_PAREN
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 70
    empty                          shift and go to state 42

state 36

    (40) EXP -> TERM . I
    (41) I -> . J EXP
    (42) I -> . empty
    (43) J -> . PLUS
    (44) J -> . MINUS
    (96) empty -> .

    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    LESS_T          reduce using rule 96 (empty -> .)
    GREATER_T       reduce using rule 96 (empty -> .)
    GREATER_T_EQUALS reduce using rule 96 (empty -> .)
    LESS_T_EQUALS   reduce using rule 96 (empty -> .)
    IS              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    PERCENTAGE      reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    TICK            reduce using rule 96 (empty -> .)
    R_BRACK         reduce using rule 96 (empty -> .)
    R_PAREN         reduce using rule 96 (empty -> .)
    COLON           reduce using rule 96 (empty -> .)

    I                              shift and go to state 71
    J                              shift and go to state 72
    empty                          shift and go to state 75

state 37

    (52) M -> PLUS .

    INT_CONT        reduce using rule 52 (M -> PLUS .)
    STRING_CONT     reduce using rule 52 (M -> PLUS .)
    CHAR_CONT       reduce using rule 52 (M -> PLUS .)
    FLOAT_CONT      reduce using rule 52 (M -> PLUS .)
    BOOL_CONT       reduce using rule 52 (M -> PLUS .)
    ID              reduce using rule 52 (M -> PLUS .)


state 38

    (29) EXPRESSION -> EXP . G
    (30) G -> . H EXP
    (31) G -> . empty
    (32) H -> . LESS_T
    (33) H -> . GREATER_T
    (34) H -> . GREATER_T_EQUALS
    (35) H -> . LESS_T_EQUALS
    (36) H -> . IS
    (37) H -> . AND
    (38) H -> . OR
    (39) H -> . PERCENTAGE
    (96) empty -> .

    LESS_T          shift and go to state 80
    GREATER_T       shift and go to state 82
    GREATER_T_EQUALS shift and go to state 83
    LESS_T_EQUALS   shift and go to state 81
    IS              shift and go to state 79
    AND             shift and go to state 76
    OR              shift and go to state 85
    PERCENTAGE      shift and go to state 84
    COMMA           reduce using rule 96 (empty -> .)
    TICK            reduce using rule 96 (empty -> .)
    R_BRACK         reduce using rule 96 (empty -> .)
    R_PAREN         reduce using rule 96 (empty -> .)
    COLON           reduce using rule 96 (empty -> .)

    H                              shift and go to state 78
    empty                          shift and go to state 86
    G                              shift and go to state 77

state 39

    (45) TERM -> FACTOR . K
    (46) K -> . L TERM
    (47) K -> . empty
    (48) L -> . MULTIPLY
    (49) L -> . DIVIDE
    (96) empty -> .

    MULTIPLY        shift and go to state 90
    DIVIDE          shift and go to state 87
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    LESS_T          reduce using rule 96 (empty -> .)
    GREATER_T       reduce using rule 96 (empty -> .)
    GREATER_T_EQUALS reduce using rule 96 (empty -> .)
    LESS_T_EQUALS   reduce using rule 96 (empty -> .)
    IS              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    PERCENTAGE      reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    TICK            reduce using rule 96 (empty -> .)
    R_BRACK         reduce using rule 96 (empty -> .)
    R_PAREN         reduce using rule 96 (empty -> .)
    COLON           reduce using rule 96 (empty -> .)

    K                              shift and go to state 88
    L                              shift and go to state 89
    empty                          shift and go to state 91

state 40

    (6) C -> EXPRESSION .

    COMMA           reduce using rule 6 (C -> EXPRESSION .)
    TICK            reduce using rule 6 (C -> EXPRESSION .)


state 41

    (53) M -> MINUS .

    INT_CONT        reduce using rule 53 (M -> MINUS .)
    STRING_CONT     reduce using rule 53 (M -> MINUS .)
    CHAR_CONT       reduce using rule 53 (M -> MINUS .)
    FLOAT_CONT      reduce using rule 53 (M -> MINUS .)
    BOOL_CONT       reduce using rule 53 (M -> MINUS .)
    ID              reduce using rule 53 (M -> MINUS .)


state 42

    (54) M -> empty .

    INT_CONT        reduce using rule 54 (M -> empty .)
    STRING_CONT     reduce using rule 54 (M -> empty .)
    CHAR_CONT       reduce using rule 54 (M -> empty .)
    FLOAT_CONT      reduce using rule 54 (M -> empty .)
    BOOL_CONT       reduce using rule 54 (M -> empty .)
    ID              reduce using rule 54 (M -> empty .)


state 43

    (78) CYCLE -> WHILE .

    IF              reduce using rule 78 (CYCLE -> WHILE .)
    FOR_CYCLE       reduce using rule 78 (CYCLE -> WHILE .)
    WHILE_CYCLE     reduce using rule 78 (CYCLE -> WHILE .)
    ID              reduce using rule 78 (CYCLE -> WHILE .)
    R_BRACE         reduce using rule 78 (CYCLE -> WHILE .)
    SOL             reduce using rule 78 (CYCLE -> WHILE .)


state 44

    (15) S_STATUTE -> SOLUTION_DEF .

    SOL             reduce using rule 15 (S_STATUTE -> SOLUTION_DEF .)
    IF              reduce using rule 15 (S_STATUTE -> SOLUTION_DEF .)
    FOR_CYCLE       reduce using rule 15 (S_STATUTE -> SOLUTION_DEF .)
    WHILE_CYCLE     reduce using rule 15 (S_STATUTE -> SOLUTION_DEF .)
    ID              reduce using rule 15 (S_STATUTE -> SOLUTION_DEF .)
    R_BRACE         reduce using rule 15 (S_STATUTE -> SOLUTION_DEF .)


state 45

    (13) F -> S_STATUTE . F
    (13) F -> . S_STATUTE F
    (14) F -> . empty
    (15) S_STATUTE -> . SOLUTION_DEF
    (16) S_STATUTE -> . STATUTE
    (96) empty -> .
    (17) SOLUTION_DEF -> . SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (18) STATUTE -> . CONDITION
    (19) STATUTE -> . CYCLE
    (20) STATUTE -> . ASSIGNATION
    (79) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (77) CYCLE -> . FOR
    (78) CYCLE -> . WHILE
    (70) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (76) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (75) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (64) ID_REF -> . ID O

    R_BRACE         reduce using rule 96 (empty -> .)
    SOL             shift and go to state 47
    IF              shift and go to state 56
    FOR_CYCLE       shift and go to state 51
    WHILE_CYCLE     shift and go to state 58
    ID              shift and go to state 55

    SOLUTION_DEF                   shift and go to state 44
    ID_REF                         shift and go to state 46
    S_STATUTE                      shift and go to state 45
    FOR                            shift and go to state 53
    STATUTE                        shift and go to state 50
    F                              shift and go to state 92
    WHILE                          shift and go to state 43
    ASSIGNATION                    shift and go to state 52
    CONDITION                      shift and go to state 48
    empty                          shift and go to state 57
    CYCLE                          shift and go to state 49

state 46

    (70) ASSIGNATION -> ID_REF . EQUALS EXPRESSION TICK

    EQUALS          shift and go to state 93


state 47

    (17) SOLUTION_DEF -> SOL . S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (21) S_TYPE -> . VOID
    (22) S_TYPE -> . TYPE
    (23) TYPE -> . INT
    (24) TYPE -> . FLOAT
    (25) TYPE -> . CHAR
    (26) TYPE -> . STRING
    (27) TYPE -> . BOOL
    (28) TYPE -> . LIST

    VOID            shift and go to state 94
    INT             shift and go to state 9
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 12
    STRING          shift and go to state 8
    BOOL            shift and go to state 13
    LIST            shift and go to state 11

    S_TYPE                         shift and go to state 95
    TYPE                           shift and go to state 96

state 48

    (18) STATUTE -> CONDITION .

    SOL             reduce using rule 18 (STATUTE -> CONDITION .)
    IF              reduce using rule 18 (STATUTE -> CONDITION .)
    FOR_CYCLE       reduce using rule 18 (STATUTE -> CONDITION .)
    WHILE_CYCLE     reduce using rule 18 (STATUTE -> CONDITION .)
    ID              reduce using rule 18 (STATUTE -> CONDITION .)
    R_BRACE         reduce using rule 18 (STATUTE -> CONDITION .)


state 49

    (19) STATUTE -> CYCLE .

    SOL             reduce using rule 19 (STATUTE -> CYCLE .)
    IF              reduce using rule 19 (STATUTE -> CYCLE .)
    FOR_CYCLE       reduce using rule 19 (STATUTE -> CYCLE .)
    WHILE_CYCLE     reduce using rule 19 (STATUTE -> CYCLE .)
    ID              reduce using rule 19 (STATUTE -> CYCLE .)
    R_BRACE         reduce using rule 19 (STATUTE -> CYCLE .)


state 50

    (16) S_STATUTE -> STATUTE .

    SOL             reduce using rule 16 (S_STATUTE -> STATUTE .)
    IF              reduce using rule 16 (S_STATUTE -> STATUTE .)
    FOR_CYCLE       reduce using rule 16 (S_STATUTE -> STATUTE .)
    WHILE_CYCLE     reduce using rule 16 (S_STATUTE -> STATUTE .)
    ID              reduce using rule 16 (S_STATUTE -> STATUTE .)
    R_BRACE         reduce using rule 16 (S_STATUTE -> STATUTE .)


state 51

    (76) FOR -> FOR_CYCLE . S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (74) S_ASSIGNATION -> . ID_REF EQUALS EXPRESSION
    (64) ID_REF -> . ID O

    ID              shift and go to state 55

    ID_REF                         shift and go to state 97
    S_ASSIGNATION                  shift and go to state 98

state 52

    (20) STATUTE -> ASSIGNATION .

    SOL             reduce using rule 20 (STATUTE -> ASSIGNATION .)
    IF              reduce using rule 20 (STATUTE -> ASSIGNATION .)
    FOR_CYCLE       reduce using rule 20 (STATUTE -> ASSIGNATION .)
    WHILE_CYCLE     reduce using rule 20 (STATUTE -> ASSIGNATION .)
    ID              reduce using rule 20 (STATUTE -> ASSIGNATION .)
    R_BRACE         reduce using rule 20 (STATUTE -> ASSIGNATION .)


state 53

    (77) CYCLE -> FOR .

    IF              reduce using rule 77 (CYCLE -> FOR .)
    FOR_CYCLE       reduce using rule 77 (CYCLE -> FOR .)
    WHILE_CYCLE     reduce using rule 77 (CYCLE -> FOR .)
    ID              reduce using rule 77 (CYCLE -> FOR .)
    R_BRACE         reduce using rule 77 (CYCLE -> FOR .)
    SOL             reduce using rule 77 (CYCLE -> FOR .)


state 54

    (12) S_BLOCK -> L_BRACE F . R_BRACE

    R_BRACE         shift and go to state 99


state 55

    (64) ID_REF -> ID . O
    (65) O -> . L_BRACK EXPRESSION R_BRACK
    (66) O -> . empty
    (96) empty -> .

    L_BRACK         shift and go to state 100
    EQUALS          reduce using rule 96 (empty -> .)

    empty                          shift and go to state 102
    O                              shift and go to state 101

state 56

    (79) CONDITION -> IF . EXPRESSION COLON BLOCK R TICK
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    empty                          shift and go to state 42
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 103

state 57

    (14) F -> empty .

    R_BRACE         reduce using rule 14 (F -> empty .)


state 58

    (75) WHILE -> WHILE_CYCLE . EXPRESSION COLON BLOCK TICK
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    empty                          shift and go to state 42
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 104

state 59

    (8) D -> COMMA A .

    TICK            reduce using rule 8 (D -> COMMA A .)


state 60

    (67) LIST_EXP -> L_BRACK EXPRESSION . P R_BRACK
    (68) P -> . COMMA EXPRESSION P
    (69) P -> . empty
    (96) empty -> .

    COMMA           shift and go to state 106
    R_BRACK         reduce using rule 96 (empty -> .)

    P                              shift and go to state 105
    empty                          shift and go to state 107

state 61

    (57) CON_VAR -> STRING_CONT .

    MULTIPLY        reduce using rule 57 (CON_VAR -> STRING_CONT .)
    DIVIDE          reduce using rule 57 (CON_VAR -> STRING_CONT .)
    PLUS            reduce using rule 57 (CON_VAR -> STRING_CONT .)
    MINUS           reduce using rule 57 (CON_VAR -> STRING_CONT .)
    LESS_T          reduce using rule 57 (CON_VAR -> STRING_CONT .)
    GREATER_T       reduce using rule 57 (CON_VAR -> STRING_CONT .)
    GREATER_T_EQUALS reduce using rule 57 (CON_VAR -> STRING_CONT .)
    LESS_T_EQUALS   reduce using rule 57 (CON_VAR -> STRING_CONT .)
    IS              reduce using rule 57 (CON_VAR -> STRING_CONT .)
    AND             reduce using rule 57 (CON_VAR -> STRING_CONT .)
    OR              reduce using rule 57 (CON_VAR -> STRING_CONT .)
    PERCENTAGE      reduce using rule 57 (CON_VAR -> STRING_CONT .)
    COMMA           reduce using rule 57 (CON_VAR -> STRING_CONT .)
    TICK            reduce using rule 57 (CON_VAR -> STRING_CONT .)
    R_BRACK         reduce using rule 57 (CON_VAR -> STRING_CONT .)
    R_PAREN         reduce using rule 57 (CON_VAR -> STRING_CONT .)
    COLON           reduce using rule 57 (CON_VAR -> STRING_CONT .)


state 62

    (59) CON_VAR -> FLOAT_CONT .

    MULTIPLY        reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    DIVIDE          reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    PLUS            reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    MINUS           reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    LESS_T          reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    GREATER_T       reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    GREATER_T_EQUALS reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    LESS_T_EQUALS   reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    IS              reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    AND             reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    OR              reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    PERCENTAGE      reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    COMMA           reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    TICK            reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    R_BRACK         reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    R_PAREN         reduce using rule 59 (CON_VAR -> FLOAT_CONT .)
    COLON           reduce using rule 59 (CON_VAR -> FLOAT_CONT .)


state 63

    (58) CON_VAR -> CHAR_CONT .

    MULTIPLY        reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    DIVIDE          reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    PLUS            reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    MINUS           reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    LESS_T          reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    GREATER_T       reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    GREATER_T_EQUALS reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    LESS_T_EQUALS   reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    IS              reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    AND             reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    OR              reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    PERCENTAGE      reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    COMMA           reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    TICK            reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    R_BRACK         reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    R_PAREN         reduce using rule 58 (CON_VAR -> CHAR_CONT .)
    COLON           reduce using rule 58 (CON_VAR -> CHAR_CONT .)


state 64

    (55) CON_VAR -> ID_REF .

    MULTIPLY        reduce using rule 55 (CON_VAR -> ID_REF .)
    DIVIDE          reduce using rule 55 (CON_VAR -> ID_REF .)
    PLUS            reduce using rule 55 (CON_VAR -> ID_REF .)
    MINUS           reduce using rule 55 (CON_VAR -> ID_REF .)
    LESS_T          reduce using rule 55 (CON_VAR -> ID_REF .)
    GREATER_T       reduce using rule 55 (CON_VAR -> ID_REF .)
    GREATER_T_EQUALS reduce using rule 55 (CON_VAR -> ID_REF .)
    LESS_T_EQUALS   reduce using rule 55 (CON_VAR -> ID_REF .)
    IS              reduce using rule 55 (CON_VAR -> ID_REF .)
    AND             reduce using rule 55 (CON_VAR -> ID_REF .)
    OR              reduce using rule 55 (CON_VAR -> ID_REF .)
    PERCENTAGE      reduce using rule 55 (CON_VAR -> ID_REF .)
    COMMA           reduce using rule 55 (CON_VAR -> ID_REF .)
    TICK            reduce using rule 55 (CON_VAR -> ID_REF .)
    R_BRACK         reduce using rule 55 (CON_VAR -> ID_REF .)
    R_PAREN         reduce using rule 55 (CON_VAR -> ID_REF .)
    COLON           reduce using rule 55 (CON_VAR -> ID_REF .)


state 65

    (61) CON_VAR -> SOLUTION_CALL .

    MULTIPLY        reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    DIVIDE          reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    PLUS            reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    MINUS           reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    LESS_T          reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    GREATER_T       reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    GREATER_T_EQUALS reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    LESS_T_EQUALS   reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    IS              reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    AND             reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    OR              reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    PERCENTAGE      reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    COMMA           reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    TICK            reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    R_BRACK         reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    R_PAREN         reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)
    COLON           reduce using rule 61 (CON_VAR -> SOLUTION_CALL .)


state 66

    (51) FACTOR -> M CON_VAR .

    MULTIPLY        reduce using rule 51 (FACTOR -> M CON_VAR .)
    DIVIDE          reduce using rule 51 (FACTOR -> M CON_VAR .)
    PLUS            reduce using rule 51 (FACTOR -> M CON_VAR .)
    MINUS           reduce using rule 51 (FACTOR -> M CON_VAR .)
    LESS_T          reduce using rule 51 (FACTOR -> M CON_VAR .)
    GREATER_T       reduce using rule 51 (FACTOR -> M CON_VAR .)
    GREATER_T_EQUALS reduce using rule 51 (FACTOR -> M CON_VAR .)
    LESS_T_EQUALS   reduce using rule 51 (FACTOR -> M CON_VAR .)
    IS              reduce using rule 51 (FACTOR -> M CON_VAR .)
    AND             reduce using rule 51 (FACTOR -> M CON_VAR .)
    OR              reduce using rule 51 (FACTOR -> M CON_VAR .)
    PERCENTAGE      reduce using rule 51 (FACTOR -> M CON_VAR .)
    COMMA           reduce using rule 51 (FACTOR -> M CON_VAR .)
    TICK            reduce using rule 51 (FACTOR -> M CON_VAR .)
    R_BRACK         reduce using rule 51 (FACTOR -> M CON_VAR .)
    R_PAREN         reduce using rule 51 (FACTOR -> M CON_VAR .)
    COLON           reduce using rule 51 (FACTOR -> M CON_VAR .)


state 67

    (56) CON_VAR -> INT_CONT .

    MULTIPLY        reduce using rule 56 (CON_VAR -> INT_CONT .)
    DIVIDE          reduce using rule 56 (CON_VAR -> INT_CONT .)
    PLUS            reduce using rule 56 (CON_VAR -> INT_CONT .)
    MINUS           reduce using rule 56 (CON_VAR -> INT_CONT .)
    LESS_T          reduce using rule 56 (CON_VAR -> INT_CONT .)
    GREATER_T       reduce using rule 56 (CON_VAR -> INT_CONT .)
    GREATER_T_EQUALS reduce using rule 56 (CON_VAR -> INT_CONT .)
    LESS_T_EQUALS   reduce using rule 56 (CON_VAR -> INT_CONT .)
    IS              reduce using rule 56 (CON_VAR -> INT_CONT .)
    AND             reduce using rule 56 (CON_VAR -> INT_CONT .)
    OR              reduce using rule 56 (CON_VAR -> INT_CONT .)
    PERCENTAGE      reduce using rule 56 (CON_VAR -> INT_CONT .)
    COMMA           reduce using rule 56 (CON_VAR -> INT_CONT .)
    TICK            reduce using rule 56 (CON_VAR -> INT_CONT .)
    R_BRACK         reduce using rule 56 (CON_VAR -> INT_CONT .)
    R_PAREN         reduce using rule 56 (CON_VAR -> INT_CONT .)
    COLON           reduce using rule 56 (CON_VAR -> INT_CONT .)


state 68

    (64) ID_REF -> ID . O
    (87) SOLUTION_CALL -> ID . L_PAREN V R_PAREN TICK
    (65) O -> . L_BRACK EXPRESSION R_BRACK
    (66) O -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 108
    L_BRACK         shift and go to state 100
    MULTIPLY        reduce using rule 96 (empty -> .)
    DIVIDE          reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    LESS_T          reduce using rule 96 (empty -> .)
    GREATER_T       reduce using rule 96 (empty -> .)
    GREATER_T_EQUALS reduce using rule 96 (empty -> .)
    LESS_T_EQUALS   reduce using rule 96 (empty -> .)
    IS              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    PERCENTAGE      reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    TICK            reduce using rule 96 (empty -> .)
    R_BRACK         reduce using rule 96 (empty -> .)
    R_PAREN         reduce using rule 96 (empty -> .)
    COLON           reduce using rule 96 (empty -> .)

    empty                          shift and go to state 102
    O                              shift and go to state 101

state 69

    (60) CON_VAR -> BOOL_CONT .

    MULTIPLY        reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    DIVIDE          reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    PLUS            reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    MINUS           reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    LESS_T          reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    GREATER_T       reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    GREATER_T_EQUALS reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    LESS_T_EQUALS   reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    IS              reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    AND             reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    OR              reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    PERCENTAGE      reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    COMMA           reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    TICK            reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    R_BRACK         reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    R_PAREN         reduce using rule 60 (CON_VAR -> BOOL_CONT .)
    COLON           reduce using rule 60 (CON_VAR -> BOOL_CONT .)


state 70

    (50) FACTOR -> L_PAREN EXPRESSION . R_PAREN

    R_PAREN         shift and go to state 109


state 71

    (40) EXP -> TERM I .

    LESS_T          reduce using rule 40 (EXP -> TERM I .)
    GREATER_T       reduce using rule 40 (EXP -> TERM I .)
    GREATER_T_EQUALS reduce using rule 40 (EXP -> TERM I .)
    LESS_T_EQUALS   reduce using rule 40 (EXP -> TERM I .)
    IS              reduce using rule 40 (EXP -> TERM I .)
    AND             reduce using rule 40 (EXP -> TERM I .)
    OR              reduce using rule 40 (EXP -> TERM I .)
    PERCENTAGE      reduce using rule 40 (EXP -> TERM I .)
    R_PAREN         reduce using rule 40 (EXP -> TERM I .)
    COLON           reduce using rule 40 (EXP -> TERM I .)
    COMMA           reduce using rule 40 (EXP -> TERM I .)
    R_BRACK         reduce using rule 40 (EXP -> TERM I .)
    TICK            reduce using rule 40 (EXP -> TERM I .)


state 72

    (41) I -> J . EXP
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 110
    FACTOR                         shift and go to state 39
    empty                          shift and go to state 42

state 73

    (43) J -> PLUS .

    L_PAREN         reduce using rule 43 (J -> PLUS .)
    PLUS            reduce using rule 43 (J -> PLUS .)
    MINUS           reduce using rule 43 (J -> PLUS .)
    INT_CONT        reduce using rule 43 (J -> PLUS .)
    STRING_CONT     reduce using rule 43 (J -> PLUS .)
    CHAR_CONT       reduce using rule 43 (J -> PLUS .)
    FLOAT_CONT      reduce using rule 43 (J -> PLUS .)
    BOOL_CONT       reduce using rule 43 (J -> PLUS .)
    ID              reduce using rule 43 (J -> PLUS .)


state 74

    (44) J -> MINUS .

    L_PAREN         reduce using rule 44 (J -> MINUS .)
    PLUS            reduce using rule 44 (J -> MINUS .)
    MINUS           reduce using rule 44 (J -> MINUS .)
    INT_CONT        reduce using rule 44 (J -> MINUS .)
    STRING_CONT     reduce using rule 44 (J -> MINUS .)
    CHAR_CONT       reduce using rule 44 (J -> MINUS .)
    FLOAT_CONT      reduce using rule 44 (J -> MINUS .)
    BOOL_CONT       reduce using rule 44 (J -> MINUS .)
    ID              reduce using rule 44 (J -> MINUS .)


state 75

    (42) I -> empty .

    LESS_T          reduce using rule 42 (I -> empty .)
    GREATER_T       reduce using rule 42 (I -> empty .)
    GREATER_T_EQUALS reduce using rule 42 (I -> empty .)
    LESS_T_EQUALS   reduce using rule 42 (I -> empty .)
    IS              reduce using rule 42 (I -> empty .)
    AND             reduce using rule 42 (I -> empty .)
    OR              reduce using rule 42 (I -> empty .)
    PERCENTAGE      reduce using rule 42 (I -> empty .)
    COMMA           reduce using rule 42 (I -> empty .)
    TICK            reduce using rule 42 (I -> empty .)
    R_BRACK         reduce using rule 42 (I -> empty .)
    R_PAREN         reduce using rule 42 (I -> empty .)
    COLON           reduce using rule 42 (I -> empty .)


state 76

    (37) H -> AND .

    L_PAREN         reduce using rule 37 (H -> AND .)
    PLUS            reduce using rule 37 (H -> AND .)
    MINUS           reduce using rule 37 (H -> AND .)
    INT_CONT        reduce using rule 37 (H -> AND .)
    STRING_CONT     reduce using rule 37 (H -> AND .)
    CHAR_CONT       reduce using rule 37 (H -> AND .)
    FLOAT_CONT      reduce using rule 37 (H -> AND .)
    BOOL_CONT       reduce using rule 37 (H -> AND .)
    ID              reduce using rule 37 (H -> AND .)


state 77

    (29) EXPRESSION -> EXP G .

    COMMA           reduce using rule 29 (EXPRESSION -> EXP G .)
    R_PAREN         reduce using rule 29 (EXPRESSION -> EXP G .)
    COLON           reduce using rule 29 (EXPRESSION -> EXP G .)
    R_BRACK         reduce using rule 29 (EXPRESSION -> EXP G .)
    TICK            reduce using rule 29 (EXPRESSION -> EXP G .)


state 78

    (30) G -> H . EXP
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 111
    FACTOR                         shift and go to state 39
    empty                          shift and go to state 42

state 79

    (36) H -> IS .

    L_PAREN         reduce using rule 36 (H -> IS .)
    PLUS            reduce using rule 36 (H -> IS .)
    MINUS           reduce using rule 36 (H -> IS .)
    INT_CONT        reduce using rule 36 (H -> IS .)
    STRING_CONT     reduce using rule 36 (H -> IS .)
    CHAR_CONT       reduce using rule 36 (H -> IS .)
    FLOAT_CONT      reduce using rule 36 (H -> IS .)
    BOOL_CONT       reduce using rule 36 (H -> IS .)
    ID              reduce using rule 36 (H -> IS .)


state 80

    (32) H -> LESS_T .

    L_PAREN         reduce using rule 32 (H -> LESS_T .)
    PLUS            reduce using rule 32 (H -> LESS_T .)
    MINUS           reduce using rule 32 (H -> LESS_T .)
    INT_CONT        reduce using rule 32 (H -> LESS_T .)
    STRING_CONT     reduce using rule 32 (H -> LESS_T .)
    CHAR_CONT       reduce using rule 32 (H -> LESS_T .)
    FLOAT_CONT      reduce using rule 32 (H -> LESS_T .)
    BOOL_CONT       reduce using rule 32 (H -> LESS_T .)
    ID              reduce using rule 32 (H -> LESS_T .)


state 81

    (35) H -> LESS_T_EQUALS .

    L_PAREN         reduce using rule 35 (H -> LESS_T_EQUALS .)
    PLUS            reduce using rule 35 (H -> LESS_T_EQUALS .)
    MINUS           reduce using rule 35 (H -> LESS_T_EQUALS .)
    INT_CONT        reduce using rule 35 (H -> LESS_T_EQUALS .)
    STRING_CONT     reduce using rule 35 (H -> LESS_T_EQUALS .)
    CHAR_CONT       reduce using rule 35 (H -> LESS_T_EQUALS .)
    FLOAT_CONT      reduce using rule 35 (H -> LESS_T_EQUALS .)
    BOOL_CONT       reduce using rule 35 (H -> LESS_T_EQUALS .)
    ID              reduce using rule 35 (H -> LESS_T_EQUALS .)


state 82

    (33) H -> GREATER_T .

    L_PAREN         reduce using rule 33 (H -> GREATER_T .)
    PLUS            reduce using rule 33 (H -> GREATER_T .)
    MINUS           reduce using rule 33 (H -> GREATER_T .)
    INT_CONT        reduce using rule 33 (H -> GREATER_T .)
    STRING_CONT     reduce using rule 33 (H -> GREATER_T .)
    CHAR_CONT       reduce using rule 33 (H -> GREATER_T .)
    FLOAT_CONT      reduce using rule 33 (H -> GREATER_T .)
    BOOL_CONT       reduce using rule 33 (H -> GREATER_T .)
    ID              reduce using rule 33 (H -> GREATER_T .)


state 83

    (34) H -> GREATER_T_EQUALS .

    L_PAREN         reduce using rule 34 (H -> GREATER_T_EQUALS .)
    PLUS            reduce using rule 34 (H -> GREATER_T_EQUALS .)
    MINUS           reduce using rule 34 (H -> GREATER_T_EQUALS .)
    INT_CONT        reduce using rule 34 (H -> GREATER_T_EQUALS .)
    STRING_CONT     reduce using rule 34 (H -> GREATER_T_EQUALS .)
    CHAR_CONT       reduce using rule 34 (H -> GREATER_T_EQUALS .)
    FLOAT_CONT      reduce using rule 34 (H -> GREATER_T_EQUALS .)
    BOOL_CONT       reduce using rule 34 (H -> GREATER_T_EQUALS .)
    ID              reduce using rule 34 (H -> GREATER_T_EQUALS .)


state 84

    (39) H -> PERCENTAGE .

    L_PAREN         reduce using rule 39 (H -> PERCENTAGE .)
    PLUS            reduce using rule 39 (H -> PERCENTAGE .)
    MINUS           reduce using rule 39 (H -> PERCENTAGE .)
    INT_CONT        reduce using rule 39 (H -> PERCENTAGE .)
    STRING_CONT     reduce using rule 39 (H -> PERCENTAGE .)
    CHAR_CONT       reduce using rule 39 (H -> PERCENTAGE .)
    FLOAT_CONT      reduce using rule 39 (H -> PERCENTAGE .)
    BOOL_CONT       reduce using rule 39 (H -> PERCENTAGE .)
    ID              reduce using rule 39 (H -> PERCENTAGE .)


state 85

    (38) H -> OR .

    L_PAREN         reduce using rule 38 (H -> OR .)
    PLUS            reduce using rule 38 (H -> OR .)
    MINUS           reduce using rule 38 (H -> OR .)
    INT_CONT        reduce using rule 38 (H -> OR .)
    STRING_CONT     reduce using rule 38 (H -> OR .)
    CHAR_CONT       reduce using rule 38 (H -> OR .)
    FLOAT_CONT      reduce using rule 38 (H -> OR .)
    BOOL_CONT       reduce using rule 38 (H -> OR .)
    ID              reduce using rule 38 (H -> OR .)


state 86

    (31) G -> empty .

    COMMA           reduce using rule 31 (G -> empty .)
    TICK            reduce using rule 31 (G -> empty .)
    R_BRACK         reduce using rule 31 (G -> empty .)
    R_PAREN         reduce using rule 31 (G -> empty .)
    COLON           reduce using rule 31 (G -> empty .)


state 87

    (49) L -> DIVIDE .

    L_PAREN         reduce using rule 49 (L -> DIVIDE .)
    PLUS            reduce using rule 49 (L -> DIVIDE .)
    MINUS           reduce using rule 49 (L -> DIVIDE .)
    INT_CONT        reduce using rule 49 (L -> DIVIDE .)
    STRING_CONT     reduce using rule 49 (L -> DIVIDE .)
    CHAR_CONT       reduce using rule 49 (L -> DIVIDE .)
    FLOAT_CONT      reduce using rule 49 (L -> DIVIDE .)
    BOOL_CONT       reduce using rule 49 (L -> DIVIDE .)
    ID              reduce using rule 49 (L -> DIVIDE .)


state 88

    (45) TERM -> FACTOR K .

    PLUS            reduce using rule 45 (TERM -> FACTOR K .)
    MINUS           reduce using rule 45 (TERM -> FACTOR K .)
    LESS_T          reduce using rule 45 (TERM -> FACTOR K .)
    GREATER_T       reduce using rule 45 (TERM -> FACTOR K .)
    GREATER_T_EQUALS reduce using rule 45 (TERM -> FACTOR K .)
    LESS_T_EQUALS   reduce using rule 45 (TERM -> FACTOR K .)
    IS              reduce using rule 45 (TERM -> FACTOR K .)
    AND             reduce using rule 45 (TERM -> FACTOR K .)
    OR              reduce using rule 45 (TERM -> FACTOR K .)
    PERCENTAGE      reduce using rule 45 (TERM -> FACTOR K .)
    COMMA           reduce using rule 45 (TERM -> FACTOR K .)
    TICK            reduce using rule 45 (TERM -> FACTOR K .)
    COLON           reduce using rule 45 (TERM -> FACTOR K .)
    R_BRACK         reduce using rule 45 (TERM -> FACTOR K .)
    R_PAREN         reduce using rule 45 (TERM -> FACTOR K .)


state 89

    (46) K -> L . TERM
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 112
    M                              shift and go to state 34
    FACTOR                         shift and go to state 39
    empty                          shift and go to state 42

state 90

    (48) L -> MULTIPLY .

    L_PAREN         reduce using rule 48 (L -> MULTIPLY .)
    PLUS            reduce using rule 48 (L -> MULTIPLY .)
    MINUS           reduce using rule 48 (L -> MULTIPLY .)
    INT_CONT        reduce using rule 48 (L -> MULTIPLY .)
    STRING_CONT     reduce using rule 48 (L -> MULTIPLY .)
    CHAR_CONT       reduce using rule 48 (L -> MULTIPLY .)
    FLOAT_CONT      reduce using rule 48 (L -> MULTIPLY .)
    BOOL_CONT       reduce using rule 48 (L -> MULTIPLY .)
    ID              reduce using rule 48 (L -> MULTIPLY .)


state 91

    (47) K -> empty .

    PLUS            reduce using rule 47 (K -> empty .)
    MINUS           reduce using rule 47 (K -> empty .)
    LESS_T          reduce using rule 47 (K -> empty .)
    GREATER_T       reduce using rule 47 (K -> empty .)
    GREATER_T_EQUALS reduce using rule 47 (K -> empty .)
    LESS_T_EQUALS   reduce using rule 47 (K -> empty .)
    IS              reduce using rule 47 (K -> empty .)
    AND             reduce using rule 47 (K -> empty .)
    OR              reduce using rule 47 (K -> empty .)
    PERCENTAGE      reduce using rule 47 (K -> empty .)
    COMMA           reduce using rule 47 (K -> empty .)
    TICK            reduce using rule 47 (K -> empty .)
    R_BRACK         reduce using rule 47 (K -> empty .)
    R_PAREN         reduce using rule 47 (K -> empty .)
    COLON           reduce using rule 47 (K -> empty .)


state 92

    (13) F -> S_STATUTE F .

    R_BRACE         reduce using rule 13 (F -> S_STATUTE F .)


state 93

    (70) ASSIGNATION -> ID_REF EQUALS . EXPRESSION TICK
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 113
    empty                          shift and go to state 42

state 94

    (21) S_TYPE -> VOID .

    ID              reduce using rule 21 (S_TYPE -> VOID .)


state 95

    (17) SOLUTION_DEF -> SOL S_TYPE . ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK

    ID              shift and go to state 114


state 96

    (22) S_TYPE -> TYPE .

    ID              reduce using rule 22 (S_TYPE -> TYPE .)


state 97

    (74) S_ASSIGNATION -> ID_REF . EQUALS EXPRESSION

    EQUALS          shift and go to state 115


state 98

    (76) FOR -> FOR_CYCLE S_ASSIGNATION . TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK

    TICK            shift and go to state 116


state 99

    (12) S_BLOCK -> L_BRACE F R_BRACE .

    $end            reduce using rule 12 (S_BLOCK -> L_BRACE F R_BRACE .)


state 100

    (65) O -> L_BRACK . EXPRESSION R_BRACK
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 117
    empty                          shift and go to state 42

state 101

    (64) ID_REF -> ID O .

    EQUALS          reduce using rule 64 (ID_REF -> ID O .)
    MULTIPLY        reduce using rule 64 (ID_REF -> ID O .)
    DIVIDE          reduce using rule 64 (ID_REF -> ID O .)
    PLUS            reduce using rule 64 (ID_REF -> ID O .)
    MINUS           reduce using rule 64 (ID_REF -> ID O .)
    LESS_T          reduce using rule 64 (ID_REF -> ID O .)
    GREATER_T       reduce using rule 64 (ID_REF -> ID O .)
    GREATER_T_EQUALS reduce using rule 64 (ID_REF -> ID O .)
    LESS_T_EQUALS   reduce using rule 64 (ID_REF -> ID O .)
    IS              reduce using rule 64 (ID_REF -> ID O .)
    AND             reduce using rule 64 (ID_REF -> ID O .)
    OR              reduce using rule 64 (ID_REF -> ID O .)
    PERCENTAGE      reduce using rule 64 (ID_REF -> ID O .)
    COMMA           reduce using rule 64 (ID_REF -> ID O .)
    TICK            reduce using rule 64 (ID_REF -> ID O .)
    R_BRACK         reduce using rule 64 (ID_REF -> ID O .)
    R_PAREN         reduce using rule 64 (ID_REF -> ID O .)
    COLON           reduce using rule 64 (ID_REF -> ID O .)


state 102

    (66) O -> empty .

    MULTIPLY        reduce using rule 66 (O -> empty .)
    DIVIDE          reduce using rule 66 (O -> empty .)
    PLUS            reduce using rule 66 (O -> empty .)
    MINUS           reduce using rule 66 (O -> empty .)
    LESS_T          reduce using rule 66 (O -> empty .)
    GREATER_T       reduce using rule 66 (O -> empty .)
    GREATER_T_EQUALS reduce using rule 66 (O -> empty .)
    LESS_T_EQUALS   reduce using rule 66 (O -> empty .)
    IS              reduce using rule 66 (O -> empty .)
    AND             reduce using rule 66 (O -> empty .)
    OR              reduce using rule 66 (O -> empty .)
    PERCENTAGE      reduce using rule 66 (O -> empty .)
    COMMA           reduce using rule 66 (O -> empty .)
    TICK            reduce using rule 66 (O -> empty .)
    R_BRACK         reduce using rule 66 (O -> empty .)
    R_PAREN         reduce using rule 66 (O -> empty .)
    COLON           reduce using rule 66 (O -> empty .)
    EQUALS          reduce using rule 66 (O -> empty .)


state 103

    (79) CONDITION -> IF EXPRESSION . COLON BLOCK R TICK

    COLON           shift and go to state 118


state 104

    (75) WHILE -> WHILE_CYCLE EXPRESSION . COLON BLOCK TICK

    COLON           shift and go to state 119


state 105

    (67) LIST_EXP -> L_BRACK EXPRESSION P . R_BRACK

    R_BRACK         shift and go to state 120


state 106

    (68) P -> COMMA . EXPRESSION P
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 121
    empty                          shift and go to state 42

state 107

    (69) P -> empty .

    R_BRACK         reduce using rule 69 (P -> empty .)


state 108

    (87) SOLUTION_CALL -> ID L_PAREN . V R_PAREN TICK
    (88) V -> . W X
    (89) W -> . EXPRESSION
    (90) W -> . NEGATION
    (29) EXPRESSION -> . EXP G
    (62) NEGATION -> . N EXPRESSION
    (40) EXP -> . TERM I
    (63) N -> . NOT
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    NOT             shift and go to state 127
    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    W                              shift and go to state 124
    FACTOR                         shift and go to state 39
    M                              shift and go to state 34
    NEGATION                       shift and go to state 126
    N                              shift and go to state 123
    EXP                            shift and go to state 38
    V                              shift and go to state 125
    EXPRESSION                     shift and go to state 122
    empty                          shift and go to state 42

state 109

    (50) FACTOR -> L_PAREN EXPRESSION R_PAREN .

    MULTIPLY        reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    DIVIDE          reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    PLUS            reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    MINUS           reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    LESS_T          reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    GREATER_T       reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    GREATER_T_EQUALS reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    LESS_T_EQUALS   reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    IS              reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    AND             reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    OR              reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    PERCENTAGE      reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    COMMA           reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    TICK            reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    R_BRACK         reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    R_PAREN         reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    COLON           reduce using rule 50 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)


state 110

    (41) I -> J EXP .

    LESS_T          reduce using rule 41 (I -> J EXP .)
    GREATER_T       reduce using rule 41 (I -> J EXP .)
    GREATER_T_EQUALS reduce using rule 41 (I -> J EXP .)
    LESS_T_EQUALS   reduce using rule 41 (I -> J EXP .)
    IS              reduce using rule 41 (I -> J EXP .)
    AND             reduce using rule 41 (I -> J EXP .)
    OR              reduce using rule 41 (I -> J EXP .)
    PERCENTAGE      reduce using rule 41 (I -> J EXP .)
    COMMA           reduce using rule 41 (I -> J EXP .)
    TICK            reduce using rule 41 (I -> J EXP .)
    R_BRACK         reduce using rule 41 (I -> J EXP .)
    R_PAREN         reduce using rule 41 (I -> J EXP .)
    COLON           reduce using rule 41 (I -> J EXP .)


state 111

    (30) G -> H EXP .

    COMMA           reduce using rule 30 (G -> H EXP .)
    TICK            reduce using rule 30 (G -> H EXP .)
    R_BRACK         reduce using rule 30 (G -> H EXP .)
    R_PAREN         reduce using rule 30 (G -> H EXP .)
    COLON           reduce using rule 30 (G -> H EXP .)


state 112

    (46) K -> L TERM .

    PLUS            reduce using rule 46 (K -> L TERM .)
    MINUS           reduce using rule 46 (K -> L TERM .)
    LESS_T          reduce using rule 46 (K -> L TERM .)
    GREATER_T       reduce using rule 46 (K -> L TERM .)
    GREATER_T_EQUALS reduce using rule 46 (K -> L TERM .)
    LESS_T_EQUALS   reduce using rule 46 (K -> L TERM .)
    IS              reduce using rule 46 (K -> L TERM .)
    AND             reduce using rule 46 (K -> L TERM .)
    OR              reduce using rule 46 (K -> L TERM .)
    PERCENTAGE      reduce using rule 46 (K -> L TERM .)
    COMMA           reduce using rule 46 (K -> L TERM .)
    TICK            reduce using rule 46 (K -> L TERM .)
    R_BRACK         reduce using rule 46 (K -> L TERM .)
    R_PAREN         reduce using rule 46 (K -> L TERM .)
    COLON           reduce using rule 46 (K -> L TERM .)


state 113

    (70) ASSIGNATION -> ID_REF EQUALS EXPRESSION . TICK

    TICK            shift and go to state 128


state 114

    (17) SOLUTION_DEF -> SOL S_TYPE ID . L_PAREN PARAMS R_PAREN COLON BLOCK TICK

    L_PAREN         shift and go to state 129


state 115

    (74) S_ASSIGNATION -> ID_REF EQUALS . EXPRESSION
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 130
    empty                          shift and go to state 42

state 116

    (76) FOR -> FOR_CYCLE S_ASSIGNATION TICK . EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    empty                          shift and go to state 42
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 131

state 117

    (65) O -> L_BRACK EXPRESSION . R_BRACK

    R_BRACK         shift and go to state 132


state 118

    (79) CONDITION -> IF EXPRESSION COLON . BLOCK R TICK
    (71) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 133

    BLOCK                          shift and go to state 134

state 119

    (75) WHILE -> WHILE_CYCLE EXPRESSION COLON . BLOCK TICK
    (71) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 133

    BLOCK                          shift and go to state 135

state 120

    (67) LIST_EXP -> L_BRACK EXPRESSION P R_BRACK .

    COMMA           reduce using rule 67 (LIST_EXP -> L_BRACK EXPRESSION P R_BRACK .)
    TICK            reduce using rule 67 (LIST_EXP -> L_BRACK EXPRESSION P R_BRACK .)


state 121

    (68) P -> COMMA EXPRESSION . P
    (68) P -> . COMMA EXPRESSION P
    (69) P -> . empty
    (96) empty -> .

    COMMA           shift and go to state 106
    R_BRACK         reduce using rule 96 (empty -> .)

    P                              shift and go to state 136
    empty                          shift and go to state 107

state 122

    (89) W -> EXPRESSION .

    COMMA           reduce using rule 89 (W -> EXPRESSION .)
    R_PAREN         reduce using rule 89 (W -> EXPRESSION .)


state 123

    (62) NEGATION -> N . EXPRESSION
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 137
    empty                          shift and go to state 42

state 124

    (88) V -> W . X
    (91) X -> . COMMA V
    (92) X -> . empty
    (96) empty -> .

    COMMA           shift and go to state 139
    R_PAREN         reduce using rule 96 (empty -> .)

    X                              shift and go to state 138
    empty                          shift and go to state 140

state 125

    (87) SOLUTION_CALL -> ID L_PAREN V . R_PAREN TICK

    R_PAREN         shift and go to state 141


state 126

    (90) W -> NEGATION .

    COMMA           reduce using rule 90 (W -> NEGATION .)
    R_PAREN         reduce using rule 90 (W -> NEGATION .)


state 127

    (63) N -> NOT .

    L_PAREN         reduce using rule 63 (N -> NOT .)
    PLUS            reduce using rule 63 (N -> NOT .)
    MINUS           reduce using rule 63 (N -> NOT .)
    INT_CONT        reduce using rule 63 (N -> NOT .)
    STRING_CONT     reduce using rule 63 (N -> NOT .)
    CHAR_CONT       reduce using rule 63 (N -> NOT .)
    FLOAT_CONT      reduce using rule 63 (N -> NOT .)
    BOOL_CONT       reduce using rule 63 (N -> NOT .)
    ID              reduce using rule 63 (N -> NOT .)


state 128

    (70) ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .

    IF              reduce using rule 70 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    FOR_CYCLE       reduce using rule 70 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    WHILE_CYCLE     reduce using rule 70 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    ID              reduce using rule 70 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    R_BRACE         reduce using rule 70 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    SOL             reduce using rule 70 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)


state 129

    (17) SOLUTION_DEF -> SOL S_TYPE ID L_PAREN . PARAMS R_PAREN COLON BLOCK TICK
    (93) PARAMS -> . TYPE ID Y
    (23) TYPE -> . INT
    (24) TYPE -> . FLOAT
    (25) TYPE -> . CHAR
    (26) TYPE -> . STRING
    (27) TYPE -> . BOOL
    (28) TYPE -> . LIST

    INT             shift and go to state 9
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 12
    STRING          shift and go to state 8
    BOOL            shift and go to state 13
    LIST            shift and go to state 11

    TYPE                           shift and go to state 143
    PARAMS                         shift and go to state 142

state 130

    (74) S_ASSIGNATION -> ID_REF EQUALS EXPRESSION .

    TICK            reduce using rule 74 (S_ASSIGNATION -> ID_REF EQUALS EXPRESSION .)
    COLON           reduce using rule 74 (S_ASSIGNATION -> ID_REF EQUALS EXPRESSION .)


state 131

    (76) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION . TICK S_ASSIGNATION COLON BLOCK TICK

    TICK            shift and go to state 144


state 132

    (65) O -> L_BRACK EXPRESSION R_BRACK .

    MULTIPLY        reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    DIVIDE          reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    PLUS            reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    MINUS           reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    LESS_T          reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    GREATER_T       reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    GREATER_T_EQUALS reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    LESS_T_EQUALS   reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    IS              reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    AND             reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    OR              reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    PERCENTAGE      reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    COMMA           reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    TICK            reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    R_BRACK         reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    R_PAREN         reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    COLON           reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)
    EQUALS          reduce using rule 65 (O -> L_BRACK EXPRESSION R_BRACK .)


state 133

    (71) BLOCK -> L_BRACE . Q R_BRACE
    (72) Q -> . STATUTE Q
    (73) Q -> . empty
    (18) STATUTE -> . CONDITION
    (19) STATUTE -> . CYCLE
    (20) STATUTE -> . ASSIGNATION
    (96) empty -> .
    (79) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (77) CYCLE -> . FOR
    (78) CYCLE -> . WHILE
    (70) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (76) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (75) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (64) ID_REF -> . ID O

    R_BRACE         reduce using rule 96 (empty -> .)
    IF              shift and go to state 56
    FOR_CYCLE       shift and go to state 51
    WHILE_CYCLE     shift and go to state 58
    ID              shift and go to state 55

    STATUTE                        shift and go to state 146
    ASSIGNATION                    shift and go to state 52
    FOR                            shift and go to state 53
    ID_REF                         shift and go to state 46
    Q                              shift and go to state 147
    WHILE                          shift and go to state 43
    empty                          shift and go to state 145
    CONDITION                      shift and go to state 48
    CYCLE                          shift and go to state 49

state 134

    (79) CONDITION -> IF EXPRESSION COLON BLOCK . R TICK
    (80) R -> . S
    (81) R -> . T
    (82) S -> . ELIF EXPRESSION COLON BLOCK U
    (86) T -> . ELSE BLOCK

    ELIF            shift and go to state 148
    ELSE            shift and go to state 149

    S                              shift and go to state 150
    R                              shift and go to state 151
    T                              shift and go to state 152

state 135

    (75) WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK . TICK

    TICK            shift and go to state 153


state 136

    (68) P -> COMMA EXPRESSION P .

    R_BRACK         reduce using rule 68 (P -> COMMA EXPRESSION P .)


state 137

    (62) NEGATION -> N EXPRESSION .

    COMMA           reduce using rule 62 (NEGATION -> N EXPRESSION .)
    R_PAREN         reduce using rule 62 (NEGATION -> N EXPRESSION .)


state 138

    (88) V -> W X .

    R_PAREN         reduce using rule 88 (V -> W X .)


state 139

    (91) X -> COMMA . V
    (88) V -> . W X
    (89) W -> . EXPRESSION
    (90) W -> . NEGATION
    (29) EXPRESSION -> . EXP G
    (62) NEGATION -> . N EXPRESSION
    (40) EXP -> . TERM I
    (63) N -> . NOT
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    NOT             shift and go to state 127
    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    W                              shift and go to state 124
    FACTOR                         shift and go to state 39
    M                              shift and go to state 34
    NEGATION                       shift and go to state 126
    N                              shift and go to state 123
    EXP                            shift and go to state 38
    V                              shift and go to state 154
    EXPRESSION                     shift and go to state 122
    empty                          shift and go to state 42

state 140

    (92) X -> empty .

    R_PAREN         reduce using rule 92 (X -> empty .)


state 141

    (87) SOLUTION_CALL -> ID L_PAREN V R_PAREN . TICK

    TICK            shift and go to state 155


state 142

    (17) SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS . R_PAREN COLON BLOCK TICK

    R_PAREN         shift and go to state 156


state 143

    (93) PARAMS -> TYPE . ID Y

    ID              shift and go to state 157


state 144

    (76) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK . S_ASSIGNATION COLON BLOCK TICK
    (74) S_ASSIGNATION -> . ID_REF EQUALS EXPRESSION
    (64) ID_REF -> . ID O

    ID              shift and go to state 55

    ID_REF                         shift and go to state 97
    S_ASSIGNATION                  shift and go to state 158

state 145

    (73) Q -> empty .

    R_BRACE         reduce using rule 73 (Q -> empty .)


state 146

    (72) Q -> STATUTE . Q
    (72) Q -> . STATUTE Q
    (73) Q -> . empty
    (18) STATUTE -> . CONDITION
    (19) STATUTE -> . CYCLE
    (20) STATUTE -> . ASSIGNATION
    (96) empty -> .
    (79) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (77) CYCLE -> . FOR
    (78) CYCLE -> . WHILE
    (70) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (76) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (75) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (64) ID_REF -> . ID O

    R_BRACE         reduce using rule 96 (empty -> .)
    IF              shift and go to state 56
    FOR_CYCLE       shift and go to state 51
    WHILE_CYCLE     shift and go to state 58
    ID              shift and go to state 55

    STATUTE                        shift and go to state 146
    ASSIGNATION                    shift and go to state 52
    FOR                            shift and go to state 53
    ID_REF                         shift and go to state 46
    Q                              shift and go to state 159
    WHILE                          shift and go to state 43
    empty                          shift and go to state 145
    CONDITION                      shift and go to state 48
    CYCLE                          shift and go to state 49

state 147

    (71) BLOCK -> L_BRACE Q . R_BRACE

    R_BRACE         shift and go to state 160


state 148

    (82) S -> ELIF . EXPRESSION COLON BLOCK U
    (29) EXPRESSION -> . EXP G
    (40) EXP -> . TERM I
    (45) TERM -> . FACTOR K
    (50) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (51) FACTOR -> . M CON_VAR
    (52) M -> . PLUS
    (53) M -> . MINUS
    (54) M -> . empty
    (96) empty -> .

    L_PAREN         shift and go to state 35
    PLUS            shift and go to state 37
    MINUS           shift and go to state 41
    INT_CONT        reduce using rule 96 (empty -> .)
    STRING_CONT     reduce using rule 96 (empty -> .)
    CHAR_CONT       reduce using rule 96 (empty -> .)
    FLOAT_CONT      reduce using rule 96 (empty -> .)
    BOOL_CONT       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)

    TERM                           shift and go to state 36
    M                              shift and go to state 34
    empty                          shift and go to state 42
    EXP                            shift and go to state 38
    FACTOR                         shift and go to state 39
    EXPRESSION                     shift and go to state 161

state 149

    (86) T -> ELSE . BLOCK
    (71) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 133

    BLOCK                          shift and go to state 162

state 150

    (80) R -> S .

    TICK            reduce using rule 80 (R -> S .)


state 151

    (79) CONDITION -> IF EXPRESSION COLON BLOCK R . TICK

    TICK            shift and go to state 163


state 152

    (81) R -> T .

    TICK            reduce using rule 81 (R -> T .)


state 153

    (75) WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .

    IF              reduce using rule 75 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    FOR_CYCLE       reduce using rule 75 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    WHILE_CYCLE     reduce using rule 75 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    ID              reduce using rule 75 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    R_BRACE         reduce using rule 75 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    SOL             reduce using rule 75 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)


state 154

    (91) X -> COMMA V .

    R_PAREN         reduce using rule 91 (X -> COMMA V .)


state 155

    (87) SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .

    MULTIPLY        reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    DIVIDE          reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    PLUS            reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    MINUS           reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    LESS_T          reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    GREATER_T       reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    GREATER_T_EQUALS reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    LESS_T_EQUALS   reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    IS              reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    AND             reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    OR              reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    PERCENTAGE      reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    COMMA           reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    TICK            reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    R_BRACK         reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    R_PAREN         reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    COLON           reduce using rule 87 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)


state 156

    (17) SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN . COLON BLOCK TICK

    COLON           shift and go to state 164


state 157

    (93) PARAMS -> TYPE ID . Y
    (94) Y -> . COMMA PARAMS
    (95) Y -> . empty
    (96) empty -> .

    COMMA           shift and go to state 165
    R_PAREN         reduce using rule 96 (empty -> .)

    Y                              shift and go to state 166
    empty                          shift and go to state 167

state 158

    (76) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION . COLON BLOCK TICK

    COLON           shift and go to state 168


state 159

    (72) Q -> STATUTE Q .

    R_BRACE         reduce using rule 72 (Q -> STATUTE Q .)


state 160

    (71) BLOCK -> L_BRACE Q R_BRACE .

    TICK            reduce using rule 71 (BLOCK -> L_BRACE Q R_BRACE .)
    ELIF            reduce using rule 71 (BLOCK -> L_BRACE Q R_BRACE .)
    ELSE            reduce using rule 71 (BLOCK -> L_BRACE Q R_BRACE .)


state 161

    (82) S -> ELIF EXPRESSION . COLON BLOCK U

    COLON           shift and go to state 169


state 162

    (86) T -> ELSE BLOCK .

    TICK            reduce using rule 86 (T -> ELSE BLOCK .)


state 163

    (79) CONDITION -> IF EXPRESSION COLON BLOCK R TICK .

    IF              reduce using rule 79 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    FOR_CYCLE       reduce using rule 79 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    WHILE_CYCLE     reduce using rule 79 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    ID              reduce using rule 79 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    R_BRACE         reduce using rule 79 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    SOL             reduce using rule 79 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)


state 164

    (17) SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON . BLOCK TICK
    (71) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 133

    BLOCK                          shift and go to state 170

state 165

    (94) Y -> COMMA . PARAMS
    (93) PARAMS -> . TYPE ID Y
    (23) TYPE -> . INT
    (24) TYPE -> . FLOAT
    (25) TYPE -> . CHAR
    (26) TYPE -> . STRING
    (27) TYPE -> . BOOL
    (28) TYPE -> . LIST

    INT             shift and go to state 9
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 12
    STRING          shift and go to state 8
    BOOL            shift and go to state 13
    LIST            shift and go to state 11

    TYPE                           shift and go to state 143
    PARAMS                         shift and go to state 171

state 166

    (93) PARAMS -> TYPE ID Y .

    R_PAREN         reduce using rule 93 (PARAMS -> TYPE ID Y .)


state 167

    (95) Y -> empty .

    R_PAREN         reduce using rule 95 (Y -> empty .)


state 168

    (76) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON . BLOCK TICK
    (71) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 133

    BLOCK                          shift and go to state 172

state 169

    (82) S -> ELIF EXPRESSION COLON . BLOCK U
    (71) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 133

    BLOCK                          shift and go to state 173

state 170

    (17) SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK . TICK

    TICK            shift and go to state 174


state 171

    (94) Y -> COMMA PARAMS .

    R_PAREN         reduce using rule 94 (Y -> COMMA PARAMS .)


state 172

    (76) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK . TICK

    TICK            shift and go to state 175


state 173

    (82) S -> ELIF EXPRESSION COLON BLOCK . U
    (83) U -> . S
    (84) U -> . T
    (85) U -> . empty
    (82) S -> . ELIF EXPRESSION COLON BLOCK U
    (86) T -> . ELSE BLOCK
    (96) empty -> .

    ELIF            shift and go to state 148
    ELSE            shift and go to state 149
    TICK            reduce using rule 96 (empty -> .)

    S                              shift and go to state 176
    U                              shift and go to state 179
    T                              shift and go to state 178
    empty                          shift and go to state 177

state 174

    (17) SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK .

    SOL             reduce using rule 17 (SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    IF              reduce using rule 17 (SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    FOR_CYCLE       reduce using rule 17 (SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    WHILE_CYCLE     reduce using rule 17 (SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    ID              reduce using rule 17 (SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    R_BRACE         reduce using rule 17 (SOLUTION_DEF -> SOL S_TYPE ID L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)


state 175

    (76) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .

    IF              reduce using rule 76 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    FOR_CYCLE       reduce using rule 76 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    WHILE_CYCLE     reduce using rule 76 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    ID              reduce using rule 76 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    R_BRACE         reduce using rule 76 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    SOL             reduce using rule 76 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)


state 176

    (83) U -> S .

    TICK            reduce using rule 83 (U -> S .)


state 177

    (85) U -> empty .

    TICK            reduce using rule 85 (U -> empty .)


state 178

    (84) U -> T .

    TICK            reduce using rule 84 (U -> T .)


state 179

    (82) S -> ELIF EXPRESSION COLON BLOCK U .

    TICK            reduce using rule 82 (S -> ELIF EXPRESSION COLON BLOCK U .)

