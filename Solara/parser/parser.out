Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    MOVE_LEFT
    MOVE_RIGHT
    MOVE_DOWN
    MOVE_UP
    MULTI_COMMENT
    DRAW_LINE
    DRAW_RECTANGLE
    SINGLE_COMMENT
    DRAW_CIRCLE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID create_global_fun COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK
Rule 2     create_global_fun -> <empty>
Rule 3     DECLARATIONS -> TYPE store_type A TICK E
Rule 4     store_type -> <empty>
Rule 5     A -> ID check_var_duplicates B D
Rule 6     check_var_duplicates -> <empty>
Rule 7     B -> EQUALS C assign_var_value
Rule 8     B -> empty
Rule 9     assign_var_value -> <empty>
Rule 10    C -> EXPRESSION
Rule 11    C -> LIST_EXP
Rule 12    D -> COMMA A
Rule 13    D -> empty
Rule 14    E -> DECLARATIONS
Rule 15    E -> empty
Rule 16    S_BLOCK -> L_BRACE F R_BRACE
Rule 17    F -> S_STATUTE F
Rule 18    F -> empty
Rule 19    S_STATUTE -> SOLUTION_DEF
Rule 20    S_STATUTE -> STATUTE
Rule 21    SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK
Rule 22    check_sol_duplicates -> <empty>
Rule 23    STATUTE -> CONDITION
Rule 24    STATUTE -> CYCLE
Rule 25    STATUTE -> ASSIGNATION
Rule 26    S_TYPE -> VOID
Rule 27    S_TYPE -> TYPE
Rule 28    TYPE -> INT
Rule 29    TYPE -> FLOAT
Rule 30    TYPE -> CHAR
Rule 31    TYPE -> STRING
Rule 32    TYPE -> BOOL
Rule 33    TYPE -> LIST
Rule 34    EXPRESSION -> EXP G
Rule 35    G -> H EXP
Rule 36    G -> empty
Rule 37    H -> LESS_T
Rule 38    H -> GREATER_T
Rule 39    H -> GREATER_T_EQUALS
Rule 40    H -> LESS_T_EQUALS
Rule 41    H -> IS
Rule 42    H -> AND
Rule 43    H -> OR
Rule 44    H -> PERCENTAGE
Rule 45    EXP -> TERM I
Rule 46    I -> J EXP
Rule 47    I -> empty
Rule 48    J -> PLUS
Rule 49    J -> MINUS
Rule 50    TERM -> FACTOR K
Rule 51    K -> L TERM
Rule 52    K -> empty
Rule 53    L -> MULTIPLY
Rule 54    L -> DIVIDE
Rule 55    FACTOR -> L_PAREN EXPRESSION R_PAREN
Rule 56    FACTOR -> M CON_VAR
Rule 57    M -> PLUS
Rule 58    M -> MINUS
Rule 59    M -> empty
Rule 60    CON_VAR -> ID_REF
Rule 61    CON_VAR -> INT_CONT
Rule 62    CON_VAR -> STRING_CONT
Rule 63    CON_VAR -> CHAR_CONT
Rule 64    CON_VAR -> FLOAT_CONT
Rule 65    CON_VAR -> BOOL_CONT
Rule 66    CON_VAR -> SOLUTION_CALL
Rule 67    NEGATION -> N EXPRESSION
Rule 68    N -> NOT
Rule 69    ID_REF -> ID O
Rule 70    O -> L_BRACK EXPRESSION R_BRACK
Rule 71    O -> empty
Rule 72    LIST_EXP -> L_BRACK EXPRESSION P R_BRACK
Rule 73    P -> COMMA EXPRESSION P
Rule 74    P -> empty
Rule 75    ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK
Rule 76    BLOCK -> L_BRACE Q R_BRACE
Rule 77    Q -> STATUTE Q
Rule 78    Q -> empty
Rule 79    S_ASSIGNATION -> ID_REF EQUALS EXPRESSION
Rule 80    WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK
Rule 81    FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
Rule 82    CYCLE -> FOR
Rule 83    CYCLE -> WHILE
Rule 84    CONDITION -> IF EXPRESSION COLON BLOCK R TICK
Rule 85    R -> S
Rule 86    R -> T
Rule 87    S -> ELIF EXPRESSION COLON BLOCK U
Rule 88    U -> S
Rule 89    U -> T
Rule 90    U -> empty
Rule 91    T -> ELSE BLOCK
Rule 92    SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK
Rule 93    V -> W X
Rule 94    W -> EXPRESSION
Rule 95    W -> NEGATION
Rule 96    X -> COMMA V
Rule 97    X -> empty
Rule 98    PARAMS -> TYPE store_type ID check_param_duplicates Y
Rule 99    check_param_duplicates -> <empty>
Rule 100   Y -> COMMA PARAMS
Rule 101   Y -> empty
Rule 102   empty -> <empty>

Terminals, with rules where they appear

AND                  : 42
BOOL                 : 32
BOOL_CONT            : 65
CHAR                 : 30
CHAR_CONT            : 63
COLON                : 1 1 1 21 80 81 84 87
COMMA                : 12 73 96 100
CORE                 : 1
DIVIDE               : 54
DRAW_CIRCLE          : 
DRAW_LINE            : 
DRAW_RECTANGLE       : 
ELIF                 : 87
ELSE                 : 91
EQUALS               : 7 75 79
FLOAT                : 29
FLOAT_CONT           : 64
FOR_CYCLE            : 81
GREATER_T            : 38
GREATER_T_EQUALS     : 39
ID                   : 1 5 21 69 92 98
IF                   : 84
INT                  : 28
INT_CONT             : 61
IS                   : 41
LESS_T               : 37
LESS_T_EQUALS        : 40
LIST                 : 33
L_BRACE              : 16 76
L_BRACK              : 70 72
L_PAREN              : 21 55 92
MINUS                : 49 58
MOVE_DOWN            : 
MOVE_LEFT            : 
MOVE_RIGHT           : 
MOVE_UP              : 
MULTIPLY             : 53
MULTI_COMMENT        : 
NOT                  : 68
OR                   : 43
PERCENTAGE           : 44
PLUS                 : 48 57
PRINT                : 
PROGRAM              : 1
R_BRACE              : 16 76
R_BRACK              : 70 72
R_PAREN              : 21 55 92
SINGLE_COMMENT       : 
SOL                  : 21
STRING               : 31
STRING_CONT          : 62
TICK                 : 3 21 75 80 81 81 81 84 92
VARS                 : 1
VOID                 : 26
WHILE_CYCLE          : 80
error                : 

Nonterminals, with rules where they appear

A                    : 3 12
ASSIGNATION          : 25
B                    : 5
BLOCK                : 21 80 81 84 87 91
C                    : 7
CONDITION            : 23
CON_VAR              : 56
CYCLE                : 24
D                    : 5
DECLARATIONS         : 1 14
E                    : 3
EXP                  : 34 35 46
EXPRESSION           : 10 55 67 70 72 73 75 79 80 81 84 87 94
F                    : 16 17
FACTOR               : 50
FOR                  : 82
G                    : 34
H                    : 35
I                    : 45
ID_REF               : 60 75 79
J                    : 46
K                    : 50
L                    : 51
LIST_EXP             : 11
M                    : 56
N                    : 67
NEGATION             : 95
O                    : 69
P                    : 72 73
PARAMS               : 21 100
Q                    : 76 77
R                    : 84
S                    : 85 88
SOLUTION_CALL        : 66
SOLUTION_DEF         : 19
STATUTE              : 20 77
S_ASSIGNATION        : 81 81
S_BLOCK              : 1
S_STATUTE            : 17
S_TYPE               : 21
T                    : 86 89
TERM                 : 45 51
TYPE                 : 3 27 98
U                    : 87
V                    : 92 96
W                    : 93
WHILE                : 83
X                    : 93
Y                    : 98
assign_var_value     : 7
check_param_duplicates : 98
check_sol_duplicates : 21
check_var_duplicates : 5
create_global_fun    : 1
empty                : 8 13 15 18 36 47 52 59 71 74 78 90 97 101
program              : 0
store_type           : 3 21 98

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID create_global_fun COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID create_global_fun COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . create_global_fun COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK
    (2) create_global_fun -> .

    COLON           reduce using rule 2 (create_global_fun -> .)

    create_global_fun              shift and go to state 4

state 4

    (1) program -> PROGRAM ID create_global_fun . COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK

    COLON           shift and go to state 5


state 5

    (1) program -> PROGRAM ID create_global_fun COLON . VARS COLON DECLARATIONS CORE COLON S_BLOCK

    VARS            shift and go to state 6


state 6

    (1) program -> PROGRAM ID create_global_fun COLON VARS . COLON DECLARATIONS CORE COLON S_BLOCK

    COLON           shift and go to state 7


state 7

    (1) program -> PROGRAM ID create_global_fun COLON VARS COLON . DECLARATIONS CORE COLON S_BLOCK
    (3) DECLARATIONS -> . TYPE store_type A TICK E
    (28) TYPE -> . INT
    (29) TYPE -> . FLOAT
    (30) TYPE -> . CHAR
    (31) TYPE -> . STRING
    (32) TYPE -> . BOOL
    (33) TYPE -> . LIST

    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    CHAR            shift and go to state 13
    STRING          shift and go to state 9
    BOOL            shift and go to state 15
    LIST            shift and go to state 12

    DECLARATIONS                   shift and go to state 11
    TYPE                           shift and go to state 14

state 8

    (29) TYPE -> FLOAT .

    ID              reduce using rule 29 (TYPE -> FLOAT .)


state 9

    (31) TYPE -> STRING .

    ID              reduce using rule 31 (TYPE -> STRING .)


state 10

    (28) TYPE -> INT .

    ID              reduce using rule 28 (TYPE -> INT .)


state 11

    (1) program -> PROGRAM ID create_global_fun COLON VARS COLON DECLARATIONS . CORE COLON S_BLOCK

    CORE            shift and go to state 16


state 12

    (33) TYPE -> LIST .

    ID              reduce using rule 33 (TYPE -> LIST .)


state 13

    (30) TYPE -> CHAR .

    ID              reduce using rule 30 (TYPE -> CHAR .)


state 14

    (3) DECLARATIONS -> TYPE . store_type A TICK E
    (4) store_type -> .

    ID              reduce using rule 4 (store_type -> .)

    store_type                     shift and go to state 17

state 15

    (32) TYPE -> BOOL .

    ID              reduce using rule 32 (TYPE -> BOOL .)


state 16

    (1) program -> PROGRAM ID create_global_fun COLON VARS COLON DECLARATIONS CORE . COLON S_BLOCK

    COLON           shift and go to state 18


state 17

    (3) DECLARATIONS -> TYPE store_type . A TICK E
    (5) A -> . ID check_var_duplicates B D

    ID              shift and go to state 20

    A                              shift and go to state 19

state 18

    (1) program -> PROGRAM ID create_global_fun COLON VARS COLON DECLARATIONS CORE COLON . S_BLOCK
    (16) S_BLOCK -> . L_BRACE F R_BRACE

    L_BRACE         shift and go to state 21

    S_BLOCK                        shift and go to state 22

state 19

    (3) DECLARATIONS -> TYPE store_type A . TICK E

    TICK            shift and go to state 23


state 20

    (5) A -> ID . check_var_duplicates B D
    (6) check_var_duplicates -> .

    EQUALS          reduce using rule 6 (check_var_duplicates -> .)
    COMMA           reduce using rule 6 (check_var_duplicates -> .)
    TICK            reduce using rule 6 (check_var_duplicates -> .)

    check_var_duplicates           shift and go to state 24

state 21

    (16) S_BLOCK -> L_BRACE . F R_BRACE
    (17) F -> . S_STATUTE F
    (18) F -> . empty
    (19) S_STATUTE -> . SOLUTION_DEF
    (20) S_STATUTE -> . STATUTE
    (102) empty -> .
    (21) SOLUTION_DEF -> . SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (23) STATUTE -> . CONDITION
    (24) STATUTE -> . CYCLE
    (25) STATUTE -> . ASSIGNATION
    (84) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (82) CYCLE -> . FOR
    (83) CYCLE -> . WHILE
    (75) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (81) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (80) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (69) ID_REF -> . ID O

    R_BRACE         reduce using rule 102 (empty -> .)
    SOL             shift and go to state 29
    IF              shift and go to state 38
    FOR_CYCLE       shift and go to state 33
    WHILE_CYCLE     shift and go to state 40
    ID              shift and go to state 37

    SOLUTION_DEF                   shift and go to state 26
    ID_REF                         shift and go to state 28
    S_STATUTE                      shift and go to state 27
    FOR                            shift and go to state 35
    STATUTE                        shift and go to state 32
    F                              shift and go to state 36
    WHILE                          shift and go to state 25
    ASSIGNATION                    shift and go to state 34
    CONDITION                      shift and go to state 30
    empty                          shift and go to state 39
    CYCLE                          shift and go to state 31

state 22

    (1) program -> PROGRAM ID create_global_fun COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK .

    $end            reduce using rule 1 (program -> PROGRAM ID create_global_fun COLON VARS COLON DECLARATIONS CORE COLON S_BLOCK .)


state 23

    (3) DECLARATIONS -> TYPE store_type A TICK . E
    (14) E -> . DECLARATIONS
    (15) E -> . empty
    (3) DECLARATIONS -> . TYPE store_type A TICK E
    (102) empty -> .
    (28) TYPE -> . INT
    (29) TYPE -> . FLOAT
    (30) TYPE -> . CHAR
    (31) TYPE -> . STRING
    (32) TYPE -> . BOOL
    (33) TYPE -> . LIST

    CORE            reduce using rule 102 (empty -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    CHAR            shift and go to state 13
    STRING          shift and go to state 9
    BOOL            shift and go to state 15
    LIST            shift and go to state 12

    DECLARATIONS                   shift and go to state 41
    E                              shift and go to state 42
    TYPE                           shift and go to state 14
    empty                          shift and go to state 43

state 24

    (5) A -> ID check_var_duplicates . B D
    (7) B -> . EQUALS C assign_var_value
    (8) B -> . empty
    (102) empty -> .

    EQUALS          shift and go to state 45
    COMMA           reduce using rule 102 (empty -> .)
    TICK            reduce using rule 102 (empty -> .)

    B                              shift and go to state 44
    empty                          shift and go to state 46

state 25

    (83) CYCLE -> WHILE .

    IF              reduce using rule 83 (CYCLE -> WHILE .)
    FOR_CYCLE       reduce using rule 83 (CYCLE -> WHILE .)
    WHILE_CYCLE     reduce using rule 83 (CYCLE -> WHILE .)
    ID              reduce using rule 83 (CYCLE -> WHILE .)
    R_BRACE         reduce using rule 83 (CYCLE -> WHILE .)
    SOL             reduce using rule 83 (CYCLE -> WHILE .)


state 26

    (19) S_STATUTE -> SOLUTION_DEF .

    SOL             reduce using rule 19 (S_STATUTE -> SOLUTION_DEF .)
    IF              reduce using rule 19 (S_STATUTE -> SOLUTION_DEF .)
    FOR_CYCLE       reduce using rule 19 (S_STATUTE -> SOLUTION_DEF .)
    WHILE_CYCLE     reduce using rule 19 (S_STATUTE -> SOLUTION_DEF .)
    ID              reduce using rule 19 (S_STATUTE -> SOLUTION_DEF .)
    R_BRACE         reduce using rule 19 (S_STATUTE -> SOLUTION_DEF .)


state 27

    (17) F -> S_STATUTE . F
    (17) F -> . S_STATUTE F
    (18) F -> . empty
    (19) S_STATUTE -> . SOLUTION_DEF
    (20) S_STATUTE -> . STATUTE
    (102) empty -> .
    (21) SOLUTION_DEF -> . SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (23) STATUTE -> . CONDITION
    (24) STATUTE -> . CYCLE
    (25) STATUTE -> . ASSIGNATION
    (84) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (82) CYCLE -> . FOR
    (83) CYCLE -> . WHILE
    (75) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (81) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (80) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (69) ID_REF -> . ID O

    R_BRACE         reduce using rule 102 (empty -> .)
    SOL             shift and go to state 29
    IF              shift and go to state 38
    FOR_CYCLE       shift and go to state 33
    WHILE_CYCLE     shift and go to state 40
    ID              shift and go to state 37

    SOLUTION_DEF                   shift and go to state 26
    ID_REF                         shift and go to state 28
    S_STATUTE                      shift and go to state 27
    FOR                            shift and go to state 35
    STATUTE                        shift and go to state 32
    F                              shift and go to state 47
    WHILE                          shift and go to state 25
    ASSIGNATION                    shift and go to state 34
    CONDITION                      shift and go to state 30
    empty                          shift and go to state 39
    CYCLE                          shift and go to state 31

state 28

    (75) ASSIGNATION -> ID_REF . EQUALS EXPRESSION TICK

    EQUALS          shift and go to state 48


state 29

    (21) SOLUTION_DEF -> SOL . S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (26) S_TYPE -> . VOID
    (27) S_TYPE -> . TYPE
    (28) TYPE -> . INT
    (29) TYPE -> . FLOAT
    (30) TYPE -> . CHAR
    (31) TYPE -> . STRING
    (32) TYPE -> . BOOL
    (33) TYPE -> . LIST

    VOID            shift and go to state 49
    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    CHAR            shift and go to state 13
    STRING          shift and go to state 9
    BOOL            shift and go to state 15
    LIST            shift and go to state 12

    S_TYPE                         shift and go to state 50
    TYPE                           shift and go to state 51

state 30

    (23) STATUTE -> CONDITION .

    IF              reduce using rule 23 (STATUTE -> CONDITION .)
    FOR_CYCLE       reduce using rule 23 (STATUTE -> CONDITION .)
    WHILE_CYCLE     reduce using rule 23 (STATUTE -> CONDITION .)
    ID              reduce using rule 23 (STATUTE -> CONDITION .)
    R_BRACE         reduce using rule 23 (STATUTE -> CONDITION .)
    SOL             reduce using rule 23 (STATUTE -> CONDITION .)


state 31

    (24) STATUTE -> CYCLE .

    IF              reduce using rule 24 (STATUTE -> CYCLE .)
    FOR_CYCLE       reduce using rule 24 (STATUTE -> CYCLE .)
    WHILE_CYCLE     reduce using rule 24 (STATUTE -> CYCLE .)
    ID              reduce using rule 24 (STATUTE -> CYCLE .)
    R_BRACE         reduce using rule 24 (STATUTE -> CYCLE .)
    SOL             reduce using rule 24 (STATUTE -> CYCLE .)


state 32

    (20) S_STATUTE -> STATUTE .

    SOL             reduce using rule 20 (S_STATUTE -> STATUTE .)
    IF              reduce using rule 20 (S_STATUTE -> STATUTE .)
    FOR_CYCLE       reduce using rule 20 (S_STATUTE -> STATUTE .)
    WHILE_CYCLE     reduce using rule 20 (S_STATUTE -> STATUTE .)
    ID              reduce using rule 20 (S_STATUTE -> STATUTE .)
    R_BRACE         reduce using rule 20 (S_STATUTE -> STATUTE .)


state 33

    (81) FOR -> FOR_CYCLE . S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (79) S_ASSIGNATION -> . ID_REF EQUALS EXPRESSION
    (69) ID_REF -> . ID O

    ID              shift and go to state 37

    ID_REF                         shift and go to state 52
    S_ASSIGNATION                  shift and go to state 53

state 34

    (25) STATUTE -> ASSIGNATION .

    IF              reduce using rule 25 (STATUTE -> ASSIGNATION .)
    FOR_CYCLE       reduce using rule 25 (STATUTE -> ASSIGNATION .)
    WHILE_CYCLE     reduce using rule 25 (STATUTE -> ASSIGNATION .)
    ID              reduce using rule 25 (STATUTE -> ASSIGNATION .)
    R_BRACE         reduce using rule 25 (STATUTE -> ASSIGNATION .)
    SOL             reduce using rule 25 (STATUTE -> ASSIGNATION .)


state 35

    (82) CYCLE -> FOR .

    IF              reduce using rule 82 (CYCLE -> FOR .)
    FOR_CYCLE       reduce using rule 82 (CYCLE -> FOR .)
    WHILE_CYCLE     reduce using rule 82 (CYCLE -> FOR .)
    ID              reduce using rule 82 (CYCLE -> FOR .)
    R_BRACE         reduce using rule 82 (CYCLE -> FOR .)
    SOL             reduce using rule 82 (CYCLE -> FOR .)


state 36

    (16) S_BLOCK -> L_BRACE F . R_BRACE

    R_BRACE         shift and go to state 54


state 37

    (69) ID_REF -> ID . O
    (70) O -> . L_BRACK EXPRESSION R_BRACK
    (71) O -> . empty
    (102) empty -> .

    L_BRACK         shift and go to state 55
    EQUALS          reduce using rule 102 (empty -> .)

    empty                          shift and go to state 57
    O                              shift and go to state 56

state 38

    (84) CONDITION -> IF . EXPRESSION COLON BLOCK R TICK
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    empty                          shift and go to state 62
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 65

state 39

    (18) F -> empty .

    R_BRACE         reduce using rule 18 (F -> empty .)


state 40

    (80) WHILE -> WHILE_CYCLE . EXPRESSION COLON BLOCK TICK
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    empty                          shift and go to state 62
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 67

state 41

    (14) E -> DECLARATIONS .

    CORE            reduce using rule 14 (E -> DECLARATIONS .)


state 42

    (3) DECLARATIONS -> TYPE store_type A TICK E .

    CORE            reduce using rule 3 (DECLARATIONS -> TYPE store_type A TICK E .)


state 43

    (15) E -> empty .

    CORE            reduce using rule 15 (E -> empty .)


state 44

    (5) A -> ID check_var_duplicates B . D
    (12) D -> . COMMA A
    (13) D -> . empty
    (102) empty -> .

    COMMA           shift and go to state 69
    TICK            reduce using rule 102 (empty -> .)

    D                              shift and go to state 68
    empty                          shift and go to state 70

state 45

    (7) B -> EQUALS . C assign_var_value
    (10) C -> . EXPRESSION
    (11) C -> . LIST_EXP
    (34) EXPRESSION -> . EXP G
    (72) LIST_EXP -> . L_BRACK EXPRESSION P R_BRACK
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_BRACK         shift and go to state 73
    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    LIST_EXP                       shift and go to state 71
    C                              shift and go to state 72
    M                              shift and go to state 59
    TERM                           shift and go to state 58
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 74
    empty                          shift and go to state 62

state 46

    (8) B -> empty .

    COMMA           reduce using rule 8 (B -> empty .)
    TICK            reduce using rule 8 (B -> empty .)


state 47

    (17) F -> S_STATUTE F .

    R_BRACE         reduce using rule 17 (F -> S_STATUTE F .)


state 48

    (75) ASSIGNATION -> ID_REF EQUALS . EXPRESSION TICK
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 75
    empty                          shift and go to state 62

state 49

    (26) S_TYPE -> VOID .

    ID              reduce using rule 26 (S_TYPE -> VOID .)


state 50

    (21) SOLUTION_DEF -> SOL S_TYPE . store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (4) store_type -> .

    ID              reduce using rule 4 (store_type -> .)

    store_type                     shift and go to state 76

state 51

    (27) S_TYPE -> TYPE .

    ID              reduce using rule 27 (S_TYPE -> TYPE .)


state 52

    (79) S_ASSIGNATION -> ID_REF . EQUALS EXPRESSION

    EQUALS          shift and go to state 77


state 53

    (81) FOR -> FOR_CYCLE S_ASSIGNATION . TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK

    TICK            shift and go to state 78


state 54

    (16) S_BLOCK -> L_BRACE F R_BRACE .

    $end            reduce using rule 16 (S_BLOCK -> L_BRACE F R_BRACE .)


state 55

    (70) O -> L_BRACK . EXPRESSION R_BRACK
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 79
    empty                          shift and go to state 62

state 56

    (69) ID_REF -> ID O .

    EQUALS          reduce using rule 69 (ID_REF -> ID O .)
    MULTIPLY        reduce using rule 69 (ID_REF -> ID O .)
    DIVIDE          reduce using rule 69 (ID_REF -> ID O .)
    PLUS            reduce using rule 69 (ID_REF -> ID O .)
    MINUS           reduce using rule 69 (ID_REF -> ID O .)
    LESS_T          reduce using rule 69 (ID_REF -> ID O .)
    GREATER_T       reduce using rule 69 (ID_REF -> ID O .)
    GREATER_T_EQUALS reduce using rule 69 (ID_REF -> ID O .)
    LESS_T_EQUALS   reduce using rule 69 (ID_REF -> ID O .)
    IS              reduce using rule 69 (ID_REF -> ID O .)
    AND             reduce using rule 69 (ID_REF -> ID O .)
    OR              reduce using rule 69 (ID_REF -> ID O .)
    PERCENTAGE      reduce using rule 69 (ID_REF -> ID O .)
    COLON           reduce using rule 69 (ID_REF -> ID O .)
    COMMA           reduce using rule 69 (ID_REF -> ID O .)
    TICK            reduce using rule 69 (ID_REF -> ID O .)
    R_BRACK         reduce using rule 69 (ID_REF -> ID O .)
    R_PAREN         reduce using rule 69 (ID_REF -> ID O .)


state 57

    (71) O -> empty .

    EQUALS          reduce using rule 71 (O -> empty .)
    MULTIPLY        reduce using rule 71 (O -> empty .)
    DIVIDE          reduce using rule 71 (O -> empty .)
    PLUS            reduce using rule 71 (O -> empty .)
    MINUS           reduce using rule 71 (O -> empty .)
    LESS_T          reduce using rule 71 (O -> empty .)
    GREATER_T       reduce using rule 71 (O -> empty .)
    GREATER_T_EQUALS reduce using rule 71 (O -> empty .)
    LESS_T_EQUALS   reduce using rule 71 (O -> empty .)
    IS              reduce using rule 71 (O -> empty .)
    AND             reduce using rule 71 (O -> empty .)
    OR              reduce using rule 71 (O -> empty .)
    PERCENTAGE      reduce using rule 71 (O -> empty .)
    COLON           reduce using rule 71 (O -> empty .)
    COMMA           reduce using rule 71 (O -> empty .)
    TICK            reduce using rule 71 (O -> empty .)
    R_BRACK         reduce using rule 71 (O -> empty .)
    R_PAREN         reduce using rule 71 (O -> empty .)


state 58

    (45) EXP -> TERM . I
    (46) I -> . J EXP
    (47) I -> . empty
    (48) J -> . PLUS
    (49) J -> . MINUS
    (102) empty -> .

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LESS_T          reduce using rule 102 (empty -> .)
    GREATER_T       reduce using rule 102 (empty -> .)
    GREATER_T_EQUALS reduce using rule 102 (empty -> .)
    LESS_T_EQUALS   reduce using rule 102 (empty -> .)
    IS              reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    PERCENTAGE      reduce using rule 102 (empty -> .)
    COLON           reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    TICK            reduce using rule 102 (empty -> .)
    R_BRACK         reduce using rule 102 (empty -> .)
    R_PAREN         reduce using rule 102 (empty -> .)

    I                              shift and go to state 80
    J                              shift and go to state 81
    empty                          shift and go to state 84

state 59

    (56) FACTOR -> M . CON_VAR
    (60) CON_VAR -> . ID_REF
    (61) CON_VAR -> . INT_CONT
    (62) CON_VAR -> . STRING_CONT
    (63) CON_VAR -> . CHAR_CONT
    (64) CON_VAR -> . FLOAT_CONT
    (65) CON_VAR -> . BOOL_CONT
    (66) CON_VAR -> . SOLUTION_CALL
    (69) ID_REF -> . ID O
    (92) SOLUTION_CALL -> . ID L_PAREN V R_PAREN TICK

    INT_CONT        shift and go to state 91
    STRING_CONT     shift and go to state 85
    CHAR_CONT       shift and go to state 87
    FLOAT_CONT      shift and go to state 86
    BOOL_CONT       shift and go to state 93
    ID              shift and go to state 92

    ID_REF                         shift and go to state 88
    SOLUTION_CALL                  shift and go to state 89
    CON_VAR                        shift and go to state 90

state 60

    (55) FACTOR -> L_PAREN . EXPRESSION R_PAREN
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 94
    empty                          shift and go to state 62

state 61

    (57) M -> PLUS .

    INT_CONT        reduce using rule 57 (M -> PLUS .)
    STRING_CONT     reduce using rule 57 (M -> PLUS .)
    CHAR_CONT       reduce using rule 57 (M -> PLUS .)
    FLOAT_CONT      reduce using rule 57 (M -> PLUS .)
    BOOL_CONT       reduce using rule 57 (M -> PLUS .)
    ID              reduce using rule 57 (M -> PLUS .)


state 62

    (59) M -> empty .

    INT_CONT        reduce using rule 59 (M -> empty .)
    STRING_CONT     reduce using rule 59 (M -> empty .)
    CHAR_CONT       reduce using rule 59 (M -> empty .)
    FLOAT_CONT      reduce using rule 59 (M -> empty .)
    BOOL_CONT       reduce using rule 59 (M -> empty .)
    ID              reduce using rule 59 (M -> empty .)


state 63

    (34) EXPRESSION -> EXP . G
    (35) G -> . H EXP
    (36) G -> . empty
    (37) H -> . LESS_T
    (38) H -> . GREATER_T
    (39) H -> . GREATER_T_EQUALS
    (40) H -> . LESS_T_EQUALS
    (41) H -> . IS
    (42) H -> . AND
    (43) H -> . OR
    (44) H -> . PERCENTAGE
    (102) empty -> .

    LESS_T          shift and go to state 99
    GREATER_T       shift and go to state 101
    GREATER_T_EQUALS shift and go to state 102
    LESS_T_EQUALS   shift and go to state 100
    IS              shift and go to state 98
    AND             shift and go to state 95
    OR              shift and go to state 104
    PERCENTAGE      shift and go to state 103
    COLON           reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    TICK            reduce using rule 102 (empty -> .)
    R_BRACK         reduce using rule 102 (empty -> .)
    R_PAREN         reduce using rule 102 (empty -> .)

    H                              shift and go to state 97
    empty                          shift and go to state 105
    G                              shift and go to state 96

state 64

    (50) TERM -> FACTOR . K
    (51) K -> . L TERM
    (52) K -> . empty
    (53) L -> . MULTIPLY
    (54) L -> . DIVIDE
    (102) empty -> .

    MULTIPLY        shift and go to state 109
    DIVIDE          shift and go to state 106
    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LESS_T          reduce using rule 102 (empty -> .)
    GREATER_T       reduce using rule 102 (empty -> .)
    GREATER_T_EQUALS reduce using rule 102 (empty -> .)
    LESS_T_EQUALS   reduce using rule 102 (empty -> .)
    IS              reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    PERCENTAGE      reduce using rule 102 (empty -> .)
    COLON           reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    TICK            reduce using rule 102 (empty -> .)
    R_BRACK         reduce using rule 102 (empty -> .)
    R_PAREN         reduce using rule 102 (empty -> .)

    K                              shift and go to state 107
    L                              shift and go to state 108
    empty                          shift and go to state 110

state 65

    (84) CONDITION -> IF EXPRESSION . COLON BLOCK R TICK

    COLON           shift and go to state 111


state 66

    (58) M -> MINUS .

    INT_CONT        reduce using rule 58 (M -> MINUS .)
    STRING_CONT     reduce using rule 58 (M -> MINUS .)
    CHAR_CONT       reduce using rule 58 (M -> MINUS .)
    FLOAT_CONT      reduce using rule 58 (M -> MINUS .)
    BOOL_CONT       reduce using rule 58 (M -> MINUS .)
    ID              reduce using rule 58 (M -> MINUS .)


state 67

    (80) WHILE -> WHILE_CYCLE EXPRESSION . COLON BLOCK TICK

    COLON           shift and go to state 112


state 68

    (5) A -> ID check_var_duplicates B D .

    TICK            reduce using rule 5 (A -> ID check_var_duplicates B D .)


state 69

    (12) D -> COMMA . A
    (5) A -> . ID check_var_duplicates B D

    ID              shift and go to state 20

    A                              shift and go to state 113

state 70

    (13) D -> empty .

    TICK            reduce using rule 13 (D -> empty .)


state 71

    (11) C -> LIST_EXP .

    COMMA           reduce using rule 11 (C -> LIST_EXP .)
    TICK            reduce using rule 11 (C -> LIST_EXP .)


state 72

    (7) B -> EQUALS C . assign_var_value
    (9) assign_var_value -> .

    COMMA           reduce using rule 9 (assign_var_value -> .)
    TICK            reduce using rule 9 (assign_var_value -> .)

    assign_var_value               shift and go to state 114

state 73

    (72) LIST_EXP -> L_BRACK . EXPRESSION P R_BRACK
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 115
    empty                          shift and go to state 62

state 74

    (10) C -> EXPRESSION .

    COMMA           reduce using rule 10 (C -> EXPRESSION .)
    TICK            reduce using rule 10 (C -> EXPRESSION .)


state 75

    (75) ASSIGNATION -> ID_REF EQUALS EXPRESSION . TICK

    TICK            shift and go to state 116


state 76

    (21) SOLUTION_DEF -> SOL S_TYPE store_type . ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK

    ID              shift and go to state 117


state 77

    (79) S_ASSIGNATION -> ID_REF EQUALS . EXPRESSION
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 118
    empty                          shift and go to state 62

state 78

    (81) FOR -> FOR_CYCLE S_ASSIGNATION TICK . EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    empty                          shift and go to state 62
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 119

state 79

    (70) O -> L_BRACK EXPRESSION . R_BRACK

    R_BRACK         shift and go to state 120


state 80

    (45) EXP -> TERM I .

    LESS_T          reduce using rule 45 (EXP -> TERM I .)
    GREATER_T       reduce using rule 45 (EXP -> TERM I .)
    GREATER_T_EQUALS reduce using rule 45 (EXP -> TERM I .)
    LESS_T_EQUALS   reduce using rule 45 (EXP -> TERM I .)
    IS              reduce using rule 45 (EXP -> TERM I .)
    AND             reduce using rule 45 (EXP -> TERM I .)
    OR              reduce using rule 45 (EXP -> TERM I .)
    PERCENTAGE      reduce using rule 45 (EXP -> TERM I .)
    COLON           reduce using rule 45 (EXP -> TERM I .)
    COMMA           reduce using rule 45 (EXP -> TERM I .)
    TICK            reduce using rule 45 (EXP -> TERM I .)
    R_BRACK         reduce using rule 45 (EXP -> TERM I .)
    R_PAREN         reduce using rule 45 (EXP -> TERM I .)


state 81

    (46) I -> J . EXP
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 121
    FACTOR                         shift and go to state 64
    empty                          shift and go to state 62

state 82

    (48) J -> PLUS .

    L_PAREN         reduce using rule 48 (J -> PLUS .)
    PLUS            reduce using rule 48 (J -> PLUS .)
    MINUS           reduce using rule 48 (J -> PLUS .)
    INT_CONT        reduce using rule 48 (J -> PLUS .)
    STRING_CONT     reduce using rule 48 (J -> PLUS .)
    CHAR_CONT       reduce using rule 48 (J -> PLUS .)
    FLOAT_CONT      reduce using rule 48 (J -> PLUS .)
    BOOL_CONT       reduce using rule 48 (J -> PLUS .)
    ID              reduce using rule 48 (J -> PLUS .)


state 83

    (49) J -> MINUS .

    L_PAREN         reduce using rule 49 (J -> MINUS .)
    PLUS            reduce using rule 49 (J -> MINUS .)
    MINUS           reduce using rule 49 (J -> MINUS .)
    INT_CONT        reduce using rule 49 (J -> MINUS .)
    STRING_CONT     reduce using rule 49 (J -> MINUS .)
    CHAR_CONT       reduce using rule 49 (J -> MINUS .)
    FLOAT_CONT      reduce using rule 49 (J -> MINUS .)
    BOOL_CONT       reduce using rule 49 (J -> MINUS .)
    ID              reduce using rule 49 (J -> MINUS .)


state 84

    (47) I -> empty .

    LESS_T          reduce using rule 47 (I -> empty .)
    GREATER_T       reduce using rule 47 (I -> empty .)
    GREATER_T_EQUALS reduce using rule 47 (I -> empty .)
    LESS_T_EQUALS   reduce using rule 47 (I -> empty .)
    IS              reduce using rule 47 (I -> empty .)
    AND             reduce using rule 47 (I -> empty .)
    OR              reduce using rule 47 (I -> empty .)
    PERCENTAGE      reduce using rule 47 (I -> empty .)
    COLON           reduce using rule 47 (I -> empty .)
    COMMA           reduce using rule 47 (I -> empty .)
    TICK            reduce using rule 47 (I -> empty .)
    R_BRACK         reduce using rule 47 (I -> empty .)
    R_PAREN         reduce using rule 47 (I -> empty .)


state 85

    (62) CON_VAR -> STRING_CONT .

    MULTIPLY        reduce using rule 62 (CON_VAR -> STRING_CONT .)
    DIVIDE          reduce using rule 62 (CON_VAR -> STRING_CONT .)
    PLUS            reduce using rule 62 (CON_VAR -> STRING_CONT .)
    MINUS           reduce using rule 62 (CON_VAR -> STRING_CONT .)
    LESS_T          reduce using rule 62 (CON_VAR -> STRING_CONT .)
    GREATER_T       reduce using rule 62 (CON_VAR -> STRING_CONT .)
    GREATER_T_EQUALS reduce using rule 62 (CON_VAR -> STRING_CONT .)
    LESS_T_EQUALS   reduce using rule 62 (CON_VAR -> STRING_CONT .)
    IS              reduce using rule 62 (CON_VAR -> STRING_CONT .)
    AND             reduce using rule 62 (CON_VAR -> STRING_CONT .)
    OR              reduce using rule 62 (CON_VAR -> STRING_CONT .)
    PERCENTAGE      reduce using rule 62 (CON_VAR -> STRING_CONT .)
    COLON           reduce using rule 62 (CON_VAR -> STRING_CONT .)
    COMMA           reduce using rule 62 (CON_VAR -> STRING_CONT .)
    TICK            reduce using rule 62 (CON_VAR -> STRING_CONT .)
    R_BRACK         reduce using rule 62 (CON_VAR -> STRING_CONT .)
    R_PAREN         reduce using rule 62 (CON_VAR -> STRING_CONT .)


state 86

    (64) CON_VAR -> FLOAT_CONT .

    MULTIPLY        reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    DIVIDE          reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    PLUS            reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    MINUS           reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    LESS_T          reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    GREATER_T       reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    GREATER_T_EQUALS reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    LESS_T_EQUALS   reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    IS              reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    AND             reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    OR              reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    PERCENTAGE      reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    COLON           reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    COMMA           reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    TICK            reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    R_BRACK         reduce using rule 64 (CON_VAR -> FLOAT_CONT .)
    R_PAREN         reduce using rule 64 (CON_VAR -> FLOAT_CONT .)


state 87

    (63) CON_VAR -> CHAR_CONT .

    MULTIPLY        reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    DIVIDE          reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    PLUS            reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    MINUS           reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    LESS_T          reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    GREATER_T       reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    GREATER_T_EQUALS reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    LESS_T_EQUALS   reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    IS              reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    AND             reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    OR              reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    PERCENTAGE      reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    COLON           reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    COMMA           reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    TICK            reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    R_BRACK         reduce using rule 63 (CON_VAR -> CHAR_CONT .)
    R_PAREN         reduce using rule 63 (CON_VAR -> CHAR_CONT .)


state 88

    (60) CON_VAR -> ID_REF .

    MULTIPLY        reduce using rule 60 (CON_VAR -> ID_REF .)
    DIVIDE          reduce using rule 60 (CON_VAR -> ID_REF .)
    PLUS            reduce using rule 60 (CON_VAR -> ID_REF .)
    MINUS           reduce using rule 60 (CON_VAR -> ID_REF .)
    LESS_T          reduce using rule 60 (CON_VAR -> ID_REF .)
    GREATER_T       reduce using rule 60 (CON_VAR -> ID_REF .)
    GREATER_T_EQUALS reduce using rule 60 (CON_VAR -> ID_REF .)
    LESS_T_EQUALS   reduce using rule 60 (CON_VAR -> ID_REF .)
    IS              reduce using rule 60 (CON_VAR -> ID_REF .)
    AND             reduce using rule 60 (CON_VAR -> ID_REF .)
    OR              reduce using rule 60 (CON_VAR -> ID_REF .)
    PERCENTAGE      reduce using rule 60 (CON_VAR -> ID_REF .)
    COLON           reduce using rule 60 (CON_VAR -> ID_REF .)
    COMMA           reduce using rule 60 (CON_VAR -> ID_REF .)
    TICK            reduce using rule 60 (CON_VAR -> ID_REF .)
    R_BRACK         reduce using rule 60 (CON_VAR -> ID_REF .)
    R_PAREN         reduce using rule 60 (CON_VAR -> ID_REF .)


state 89

    (66) CON_VAR -> SOLUTION_CALL .

    MULTIPLY        reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    DIVIDE          reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    PLUS            reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    MINUS           reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    LESS_T          reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    GREATER_T       reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    GREATER_T_EQUALS reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    LESS_T_EQUALS   reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    IS              reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    AND             reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    OR              reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    PERCENTAGE      reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    COLON           reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    COMMA           reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    TICK            reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    R_BRACK         reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)
    R_PAREN         reduce using rule 66 (CON_VAR -> SOLUTION_CALL .)


state 90

    (56) FACTOR -> M CON_VAR .

    MULTIPLY        reduce using rule 56 (FACTOR -> M CON_VAR .)
    DIVIDE          reduce using rule 56 (FACTOR -> M CON_VAR .)
    PLUS            reduce using rule 56 (FACTOR -> M CON_VAR .)
    MINUS           reduce using rule 56 (FACTOR -> M CON_VAR .)
    LESS_T          reduce using rule 56 (FACTOR -> M CON_VAR .)
    GREATER_T       reduce using rule 56 (FACTOR -> M CON_VAR .)
    GREATER_T_EQUALS reduce using rule 56 (FACTOR -> M CON_VAR .)
    LESS_T_EQUALS   reduce using rule 56 (FACTOR -> M CON_VAR .)
    IS              reduce using rule 56 (FACTOR -> M CON_VAR .)
    AND             reduce using rule 56 (FACTOR -> M CON_VAR .)
    OR              reduce using rule 56 (FACTOR -> M CON_VAR .)
    PERCENTAGE      reduce using rule 56 (FACTOR -> M CON_VAR .)
    R_PAREN         reduce using rule 56 (FACTOR -> M CON_VAR .)
    R_BRACK         reduce using rule 56 (FACTOR -> M CON_VAR .)
    COMMA           reduce using rule 56 (FACTOR -> M CON_VAR .)
    COLON           reduce using rule 56 (FACTOR -> M CON_VAR .)
    TICK            reduce using rule 56 (FACTOR -> M CON_VAR .)


state 91

    (61) CON_VAR -> INT_CONT .

    MULTIPLY        reduce using rule 61 (CON_VAR -> INT_CONT .)
    DIVIDE          reduce using rule 61 (CON_VAR -> INT_CONT .)
    PLUS            reduce using rule 61 (CON_VAR -> INT_CONT .)
    MINUS           reduce using rule 61 (CON_VAR -> INT_CONT .)
    LESS_T          reduce using rule 61 (CON_VAR -> INT_CONT .)
    GREATER_T       reduce using rule 61 (CON_VAR -> INT_CONT .)
    GREATER_T_EQUALS reduce using rule 61 (CON_VAR -> INT_CONT .)
    LESS_T_EQUALS   reduce using rule 61 (CON_VAR -> INT_CONT .)
    IS              reduce using rule 61 (CON_VAR -> INT_CONT .)
    AND             reduce using rule 61 (CON_VAR -> INT_CONT .)
    OR              reduce using rule 61 (CON_VAR -> INT_CONT .)
    PERCENTAGE      reduce using rule 61 (CON_VAR -> INT_CONT .)
    COLON           reduce using rule 61 (CON_VAR -> INT_CONT .)
    COMMA           reduce using rule 61 (CON_VAR -> INT_CONT .)
    TICK            reduce using rule 61 (CON_VAR -> INT_CONT .)
    R_BRACK         reduce using rule 61 (CON_VAR -> INT_CONT .)
    R_PAREN         reduce using rule 61 (CON_VAR -> INT_CONT .)


state 92

    (69) ID_REF -> ID . O
    (92) SOLUTION_CALL -> ID . L_PAREN V R_PAREN TICK
    (70) O -> . L_BRACK EXPRESSION R_BRACK
    (71) O -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 122
    L_BRACK         shift and go to state 55
    MULTIPLY        reduce using rule 102 (empty -> .)
    DIVIDE          reduce using rule 102 (empty -> .)
    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LESS_T          reduce using rule 102 (empty -> .)
    GREATER_T       reduce using rule 102 (empty -> .)
    GREATER_T_EQUALS reduce using rule 102 (empty -> .)
    LESS_T_EQUALS   reduce using rule 102 (empty -> .)
    IS              reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    PERCENTAGE      reduce using rule 102 (empty -> .)
    COLON           reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    TICK            reduce using rule 102 (empty -> .)
    R_BRACK         reduce using rule 102 (empty -> .)
    R_PAREN         reduce using rule 102 (empty -> .)

    empty                          shift and go to state 57
    O                              shift and go to state 56

state 93

    (65) CON_VAR -> BOOL_CONT .

    MULTIPLY        reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    DIVIDE          reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    PLUS            reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    MINUS           reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    LESS_T          reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    GREATER_T       reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    GREATER_T_EQUALS reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    LESS_T_EQUALS   reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    IS              reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    AND             reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    OR              reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    PERCENTAGE      reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    COLON           reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    COMMA           reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    TICK            reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    R_BRACK         reduce using rule 65 (CON_VAR -> BOOL_CONT .)
    R_PAREN         reduce using rule 65 (CON_VAR -> BOOL_CONT .)


state 94

    (55) FACTOR -> L_PAREN EXPRESSION . R_PAREN

    R_PAREN         shift and go to state 123


state 95

    (42) H -> AND .

    L_PAREN         reduce using rule 42 (H -> AND .)
    PLUS            reduce using rule 42 (H -> AND .)
    MINUS           reduce using rule 42 (H -> AND .)
    INT_CONT        reduce using rule 42 (H -> AND .)
    STRING_CONT     reduce using rule 42 (H -> AND .)
    CHAR_CONT       reduce using rule 42 (H -> AND .)
    FLOAT_CONT      reduce using rule 42 (H -> AND .)
    BOOL_CONT       reduce using rule 42 (H -> AND .)
    ID              reduce using rule 42 (H -> AND .)


state 96

    (34) EXPRESSION -> EXP G .

    COMMA           reduce using rule 34 (EXPRESSION -> EXP G .)
    R_PAREN         reduce using rule 34 (EXPRESSION -> EXP G .)
    TICK            reduce using rule 34 (EXPRESSION -> EXP G .)
    COLON           reduce using rule 34 (EXPRESSION -> EXP G .)
    R_BRACK         reduce using rule 34 (EXPRESSION -> EXP G .)


state 97

    (35) G -> H . EXP
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 124
    FACTOR                         shift and go to state 64
    empty                          shift and go to state 62

state 98

    (41) H -> IS .

    L_PAREN         reduce using rule 41 (H -> IS .)
    PLUS            reduce using rule 41 (H -> IS .)
    MINUS           reduce using rule 41 (H -> IS .)
    INT_CONT        reduce using rule 41 (H -> IS .)
    STRING_CONT     reduce using rule 41 (H -> IS .)
    CHAR_CONT       reduce using rule 41 (H -> IS .)
    FLOAT_CONT      reduce using rule 41 (H -> IS .)
    BOOL_CONT       reduce using rule 41 (H -> IS .)
    ID              reduce using rule 41 (H -> IS .)


state 99

    (37) H -> LESS_T .

    L_PAREN         reduce using rule 37 (H -> LESS_T .)
    PLUS            reduce using rule 37 (H -> LESS_T .)
    MINUS           reduce using rule 37 (H -> LESS_T .)
    INT_CONT        reduce using rule 37 (H -> LESS_T .)
    STRING_CONT     reduce using rule 37 (H -> LESS_T .)
    CHAR_CONT       reduce using rule 37 (H -> LESS_T .)
    FLOAT_CONT      reduce using rule 37 (H -> LESS_T .)
    BOOL_CONT       reduce using rule 37 (H -> LESS_T .)
    ID              reduce using rule 37 (H -> LESS_T .)


state 100

    (40) H -> LESS_T_EQUALS .

    L_PAREN         reduce using rule 40 (H -> LESS_T_EQUALS .)
    PLUS            reduce using rule 40 (H -> LESS_T_EQUALS .)
    MINUS           reduce using rule 40 (H -> LESS_T_EQUALS .)
    INT_CONT        reduce using rule 40 (H -> LESS_T_EQUALS .)
    STRING_CONT     reduce using rule 40 (H -> LESS_T_EQUALS .)
    CHAR_CONT       reduce using rule 40 (H -> LESS_T_EQUALS .)
    FLOAT_CONT      reduce using rule 40 (H -> LESS_T_EQUALS .)
    BOOL_CONT       reduce using rule 40 (H -> LESS_T_EQUALS .)
    ID              reduce using rule 40 (H -> LESS_T_EQUALS .)


state 101

    (38) H -> GREATER_T .

    L_PAREN         reduce using rule 38 (H -> GREATER_T .)
    PLUS            reduce using rule 38 (H -> GREATER_T .)
    MINUS           reduce using rule 38 (H -> GREATER_T .)
    INT_CONT        reduce using rule 38 (H -> GREATER_T .)
    STRING_CONT     reduce using rule 38 (H -> GREATER_T .)
    CHAR_CONT       reduce using rule 38 (H -> GREATER_T .)
    FLOAT_CONT      reduce using rule 38 (H -> GREATER_T .)
    BOOL_CONT       reduce using rule 38 (H -> GREATER_T .)
    ID              reduce using rule 38 (H -> GREATER_T .)


state 102

    (39) H -> GREATER_T_EQUALS .

    L_PAREN         reduce using rule 39 (H -> GREATER_T_EQUALS .)
    PLUS            reduce using rule 39 (H -> GREATER_T_EQUALS .)
    MINUS           reduce using rule 39 (H -> GREATER_T_EQUALS .)
    INT_CONT        reduce using rule 39 (H -> GREATER_T_EQUALS .)
    STRING_CONT     reduce using rule 39 (H -> GREATER_T_EQUALS .)
    CHAR_CONT       reduce using rule 39 (H -> GREATER_T_EQUALS .)
    FLOAT_CONT      reduce using rule 39 (H -> GREATER_T_EQUALS .)
    BOOL_CONT       reduce using rule 39 (H -> GREATER_T_EQUALS .)
    ID              reduce using rule 39 (H -> GREATER_T_EQUALS .)


state 103

    (44) H -> PERCENTAGE .

    L_PAREN         reduce using rule 44 (H -> PERCENTAGE .)
    PLUS            reduce using rule 44 (H -> PERCENTAGE .)
    MINUS           reduce using rule 44 (H -> PERCENTAGE .)
    INT_CONT        reduce using rule 44 (H -> PERCENTAGE .)
    STRING_CONT     reduce using rule 44 (H -> PERCENTAGE .)
    CHAR_CONT       reduce using rule 44 (H -> PERCENTAGE .)
    FLOAT_CONT      reduce using rule 44 (H -> PERCENTAGE .)
    BOOL_CONT       reduce using rule 44 (H -> PERCENTAGE .)
    ID              reduce using rule 44 (H -> PERCENTAGE .)


state 104

    (43) H -> OR .

    L_PAREN         reduce using rule 43 (H -> OR .)
    PLUS            reduce using rule 43 (H -> OR .)
    MINUS           reduce using rule 43 (H -> OR .)
    INT_CONT        reduce using rule 43 (H -> OR .)
    STRING_CONT     reduce using rule 43 (H -> OR .)
    CHAR_CONT       reduce using rule 43 (H -> OR .)
    FLOAT_CONT      reduce using rule 43 (H -> OR .)
    BOOL_CONT       reduce using rule 43 (H -> OR .)
    ID              reduce using rule 43 (H -> OR .)


state 105

    (36) G -> empty .

    COLON           reduce using rule 36 (G -> empty .)
    COMMA           reduce using rule 36 (G -> empty .)
    TICK            reduce using rule 36 (G -> empty .)
    R_BRACK         reduce using rule 36 (G -> empty .)
    R_PAREN         reduce using rule 36 (G -> empty .)


state 106

    (54) L -> DIVIDE .

    L_PAREN         reduce using rule 54 (L -> DIVIDE .)
    PLUS            reduce using rule 54 (L -> DIVIDE .)
    MINUS           reduce using rule 54 (L -> DIVIDE .)
    INT_CONT        reduce using rule 54 (L -> DIVIDE .)
    STRING_CONT     reduce using rule 54 (L -> DIVIDE .)
    CHAR_CONT       reduce using rule 54 (L -> DIVIDE .)
    FLOAT_CONT      reduce using rule 54 (L -> DIVIDE .)
    BOOL_CONT       reduce using rule 54 (L -> DIVIDE .)
    ID              reduce using rule 54 (L -> DIVIDE .)


state 107

    (50) TERM -> FACTOR K .

    PLUS            reduce using rule 50 (TERM -> FACTOR K .)
    MINUS           reduce using rule 50 (TERM -> FACTOR K .)
    LESS_T          reduce using rule 50 (TERM -> FACTOR K .)
    GREATER_T       reduce using rule 50 (TERM -> FACTOR K .)
    GREATER_T_EQUALS reduce using rule 50 (TERM -> FACTOR K .)
    LESS_T_EQUALS   reduce using rule 50 (TERM -> FACTOR K .)
    IS              reduce using rule 50 (TERM -> FACTOR K .)
    AND             reduce using rule 50 (TERM -> FACTOR K .)
    OR              reduce using rule 50 (TERM -> FACTOR K .)
    PERCENTAGE      reduce using rule 50 (TERM -> FACTOR K .)
    COMMA           reduce using rule 50 (TERM -> FACTOR K .)
    TICK            reduce using rule 50 (TERM -> FACTOR K .)
    COLON           reduce using rule 50 (TERM -> FACTOR K .)
    R_PAREN         reduce using rule 50 (TERM -> FACTOR K .)
    R_BRACK         reduce using rule 50 (TERM -> FACTOR K .)


state 108

    (51) K -> L . TERM
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 125
    M                              shift and go to state 59
    FACTOR                         shift and go to state 64
    empty                          shift and go to state 62

state 109

    (53) L -> MULTIPLY .

    L_PAREN         reduce using rule 53 (L -> MULTIPLY .)
    PLUS            reduce using rule 53 (L -> MULTIPLY .)
    MINUS           reduce using rule 53 (L -> MULTIPLY .)
    INT_CONT        reduce using rule 53 (L -> MULTIPLY .)
    STRING_CONT     reduce using rule 53 (L -> MULTIPLY .)
    CHAR_CONT       reduce using rule 53 (L -> MULTIPLY .)
    FLOAT_CONT      reduce using rule 53 (L -> MULTIPLY .)
    BOOL_CONT       reduce using rule 53 (L -> MULTIPLY .)
    ID              reduce using rule 53 (L -> MULTIPLY .)


state 110

    (52) K -> empty .

    PLUS            reduce using rule 52 (K -> empty .)
    MINUS           reduce using rule 52 (K -> empty .)
    LESS_T          reduce using rule 52 (K -> empty .)
    GREATER_T       reduce using rule 52 (K -> empty .)
    GREATER_T_EQUALS reduce using rule 52 (K -> empty .)
    LESS_T_EQUALS   reduce using rule 52 (K -> empty .)
    IS              reduce using rule 52 (K -> empty .)
    AND             reduce using rule 52 (K -> empty .)
    OR              reduce using rule 52 (K -> empty .)
    PERCENTAGE      reduce using rule 52 (K -> empty .)
    COLON           reduce using rule 52 (K -> empty .)
    COMMA           reduce using rule 52 (K -> empty .)
    TICK            reduce using rule 52 (K -> empty .)
    R_BRACK         reduce using rule 52 (K -> empty .)
    R_PAREN         reduce using rule 52 (K -> empty .)


state 111

    (84) CONDITION -> IF EXPRESSION COLON . BLOCK R TICK
    (76) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 126

    BLOCK                          shift and go to state 127

state 112

    (80) WHILE -> WHILE_CYCLE EXPRESSION COLON . BLOCK TICK
    (76) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 126

    BLOCK                          shift and go to state 128

state 113

    (12) D -> COMMA A .

    TICK            reduce using rule 12 (D -> COMMA A .)


state 114

    (7) B -> EQUALS C assign_var_value .

    COMMA           reduce using rule 7 (B -> EQUALS C assign_var_value .)
    TICK            reduce using rule 7 (B -> EQUALS C assign_var_value .)


state 115

    (72) LIST_EXP -> L_BRACK EXPRESSION . P R_BRACK
    (73) P -> . COMMA EXPRESSION P
    (74) P -> . empty
    (102) empty -> .

    COMMA           shift and go to state 130
    R_BRACK         reduce using rule 102 (empty -> .)

    P                              shift and go to state 129
    empty                          shift and go to state 131

state 116

    (75) ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .

    IF              reduce using rule 75 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    FOR_CYCLE       reduce using rule 75 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    WHILE_CYCLE     reduce using rule 75 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    ID              reduce using rule 75 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    R_BRACE         reduce using rule 75 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)
    SOL             reduce using rule 75 (ASSIGNATION -> ID_REF EQUALS EXPRESSION TICK .)


state 117

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID . check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK
    (22) check_sol_duplicates -> .

    L_PAREN         reduce using rule 22 (check_sol_duplicates -> .)

    check_sol_duplicates           shift and go to state 132

state 118

    (79) S_ASSIGNATION -> ID_REF EQUALS EXPRESSION .

    TICK            reduce using rule 79 (S_ASSIGNATION -> ID_REF EQUALS EXPRESSION .)
    COLON           reduce using rule 79 (S_ASSIGNATION -> ID_REF EQUALS EXPRESSION .)


state 119

    (81) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION . TICK S_ASSIGNATION COLON BLOCK TICK

    TICK            shift and go to state 133


state 120

    (70) O -> L_BRACK EXPRESSION R_BRACK .

    EQUALS          reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    MULTIPLY        reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    DIVIDE          reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    PLUS            reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    MINUS           reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    LESS_T          reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    GREATER_T       reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    GREATER_T_EQUALS reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    LESS_T_EQUALS   reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    IS              reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    AND             reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    OR              reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    PERCENTAGE      reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    COLON           reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    COMMA           reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    TICK            reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    R_BRACK         reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)
    R_PAREN         reduce using rule 70 (O -> L_BRACK EXPRESSION R_BRACK .)


state 121

    (46) I -> J EXP .

    LESS_T          reduce using rule 46 (I -> J EXP .)
    GREATER_T       reduce using rule 46 (I -> J EXP .)
    GREATER_T_EQUALS reduce using rule 46 (I -> J EXP .)
    LESS_T_EQUALS   reduce using rule 46 (I -> J EXP .)
    IS              reduce using rule 46 (I -> J EXP .)
    AND             reduce using rule 46 (I -> J EXP .)
    OR              reduce using rule 46 (I -> J EXP .)
    PERCENTAGE      reduce using rule 46 (I -> J EXP .)
    COLON           reduce using rule 46 (I -> J EXP .)
    COMMA           reduce using rule 46 (I -> J EXP .)
    TICK            reduce using rule 46 (I -> J EXP .)
    R_BRACK         reduce using rule 46 (I -> J EXP .)
    R_PAREN         reduce using rule 46 (I -> J EXP .)


state 122

    (92) SOLUTION_CALL -> ID L_PAREN . V R_PAREN TICK
    (93) V -> . W X
    (94) W -> . EXPRESSION
    (95) W -> . NEGATION
    (34) EXPRESSION -> . EXP G
    (67) NEGATION -> . N EXPRESSION
    (45) EXP -> . TERM I
    (68) N -> . NOT
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    NOT             shift and go to state 139
    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    W                              shift and go to state 136
    FACTOR                         shift and go to state 64
    M                              shift and go to state 59
    NEGATION                       shift and go to state 138
    N                              shift and go to state 135
    EXP                            shift and go to state 63
    V                              shift and go to state 137
    EXPRESSION                     shift and go to state 134
    empty                          shift and go to state 62

state 123

    (55) FACTOR -> L_PAREN EXPRESSION R_PAREN .

    MULTIPLY        reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    DIVIDE          reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    PLUS            reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    MINUS           reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    LESS_T          reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    GREATER_T       reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    GREATER_T_EQUALS reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    LESS_T_EQUALS   reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    IS              reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    AND             reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    OR              reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    PERCENTAGE      reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    R_PAREN         reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    R_BRACK         reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    COMMA           reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    COLON           reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)
    TICK            reduce using rule 55 (FACTOR -> L_PAREN EXPRESSION R_PAREN .)


state 124

    (35) G -> H EXP .

    COLON           reduce using rule 35 (G -> H EXP .)
    COMMA           reduce using rule 35 (G -> H EXP .)
    TICK            reduce using rule 35 (G -> H EXP .)
    R_BRACK         reduce using rule 35 (G -> H EXP .)
    R_PAREN         reduce using rule 35 (G -> H EXP .)


state 125

    (51) K -> L TERM .

    PLUS            reduce using rule 51 (K -> L TERM .)
    MINUS           reduce using rule 51 (K -> L TERM .)
    LESS_T          reduce using rule 51 (K -> L TERM .)
    GREATER_T       reduce using rule 51 (K -> L TERM .)
    GREATER_T_EQUALS reduce using rule 51 (K -> L TERM .)
    LESS_T_EQUALS   reduce using rule 51 (K -> L TERM .)
    IS              reduce using rule 51 (K -> L TERM .)
    AND             reduce using rule 51 (K -> L TERM .)
    OR              reduce using rule 51 (K -> L TERM .)
    PERCENTAGE      reduce using rule 51 (K -> L TERM .)
    COLON           reduce using rule 51 (K -> L TERM .)
    COMMA           reduce using rule 51 (K -> L TERM .)
    TICK            reduce using rule 51 (K -> L TERM .)
    R_BRACK         reduce using rule 51 (K -> L TERM .)
    R_PAREN         reduce using rule 51 (K -> L TERM .)


state 126

    (76) BLOCK -> L_BRACE . Q R_BRACE
    (77) Q -> . STATUTE Q
    (78) Q -> . empty
    (23) STATUTE -> . CONDITION
    (24) STATUTE -> . CYCLE
    (25) STATUTE -> . ASSIGNATION
    (102) empty -> .
    (84) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (82) CYCLE -> . FOR
    (83) CYCLE -> . WHILE
    (75) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (81) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (80) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (69) ID_REF -> . ID O

    R_BRACE         reduce using rule 102 (empty -> .)
    IF              shift and go to state 38
    FOR_CYCLE       shift and go to state 33
    WHILE_CYCLE     shift and go to state 40
    ID              shift and go to state 37

    STATUTE                        shift and go to state 141
    ASSIGNATION                    shift and go to state 34
    FOR                            shift and go to state 35
    ID_REF                         shift and go to state 28
    Q                              shift and go to state 142
    WHILE                          shift and go to state 25
    empty                          shift and go to state 140
    CONDITION                      shift and go to state 30
    CYCLE                          shift and go to state 31

state 127

    (84) CONDITION -> IF EXPRESSION COLON BLOCK . R TICK
    (85) R -> . S
    (86) R -> . T
    (87) S -> . ELIF EXPRESSION COLON BLOCK U
    (91) T -> . ELSE BLOCK

    ELIF            shift and go to state 143
    ELSE            shift and go to state 144

    S                              shift and go to state 145
    R                              shift and go to state 146
    T                              shift and go to state 147

state 128

    (80) WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK . TICK

    TICK            shift and go to state 148


state 129

    (72) LIST_EXP -> L_BRACK EXPRESSION P . R_BRACK

    R_BRACK         shift and go to state 149


state 130

    (73) P -> COMMA . EXPRESSION P
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 150
    empty                          shift and go to state 62

state 131

    (74) P -> empty .

    R_BRACK         reduce using rule 74 (P -> empty .)


state 132

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates . L_PAREN PARAMS R_PAREN COLON BLOCK TICK

    L_PAREN         shift and go to state 151


state 133

    (81) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK . S_ASSIGNATION COLON BLOCK TICK
    (79) S_ASSIGNATION -> . ID_REF EQUALS EXPRESSION
    (69) ID_REF -> . ID O

    ID              shift and go to state 37

    ID_REF                         shift and go to state 52
    S_ASSIGNATION                  shift and go to state 152

state 134

    (94) W -> EXPRESSION .

    COMMA           reduce using rule 94 (W -> EXPRESSION .)
    R_PAREN         reduce using rule 94 (W -> EXPRESSION .)


state 135

    (67) NEGATION -> N . EXPRESSION
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 153
    empty                          shift and go to state 62

state 136

    (93) V -> W . X
    (96) X -> . COMMA V
    (97) X -> . empty
    (102) empty -> .

    COMMA           shift and go to state 155
    R_PAREN         reduce using rule 102 (empty -> .)

    X                              shift and go to state 154
    empty                          shift and go to state 156

state 137

    (92) SOLUTION_CALL -> ID L_PAREN V . R_PAREN TICK

    R_PAREN         shift and go to state 157


state 138

    (95) W -> NEGATION .

    COMMA           reduce using rule 95 (W -> NEGATION .)
    R_PAREN         reduce using rule 95 (W -> NEGATION .)


state 139

    (68) N -> NOT .

    L_PAREN         reduce using rule 68 (N -> NOT .)
    PLUS            reduce using rule 68 (N -> NOT .)
    MINUS           reduce using rule 68 (N -> NOT .)
    INT_CONT        reduce using rule 68 (N -> NOT .)
    STRING_CONT     reduce using rule 68 (N -> NOT .)
    CHAR_CONT       reduce using rule 68 (N -> NOT .)
    FLOAT_CONT      reduce using rule 68 (N -> NOT .)
    BOOL_CONT       reduce using rule 68 (N -> NOT .)
    ID              reduce using rule 68 (N -> NOT .)


state 140

    (78) Q -> empty .

    R_BRACE         reduce using rule 78 (Q -> empty .)


state 141

    (77) Q -> STATUTE . Q
    (77) Q -> . STATUTE Q
    (78) Q -> . empty
    (23) STATUTE -> . CONDITION
    (24) STATUTE -> . CYCLE
    (25) STATUTE -> . ASSIGNATION
    (102) empty -> .
    (84) CONDITION -> . IF EXPRESSION COLON BLOCK R TICK
    (82) CYCLE -> . FOR
    (83) CYCLE -> . WHILE
    (75) ASSIGNATION -> . ID_REF EQUALS EXPRESSION TICK
    (81) FOR -> . FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK
    (80) WHILE -> . WHILE_CYCLE EXPRESSION COLON BLOCK TICK
    (69) ID_REF -> . ID O

    R_BRACE         reduce using rule 102 (empty -> .)
    IF              shift and go to state 38
    FOR_CYCLE       shift and go to state 33
    WHILE_CYCLE     shift and go to state 40
    ID              shift and go to state 37

    STATUTE                        shift and go to state 141
    ASSIGNATION                    shift and go to state 34
    FOR                            shift and go to state 35
    ID_REF                         shift and go to state 28
    Q                              shift and go to state 158
    WHILE                          shift and go to state 25
    empty                          shift and go to state 140
    CONDITION                      shift and go to state 30
    CYCLE                          shift and go to state 31

state 142

    (76) BLOCK -> L_BRACE Q . R_BRACE

    R_BRACE         shift and go to state 159


state 143

    (87) S -> ELIF . EXPRESSION COLON BLOCK U
    (34) EXPRESSION -> . EXP G
    (45) EXP -> . TERM I
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    M                              shift and go to state 59
    empty                          shift and go to state 62
    EXP                            shift and go to state 63
    FACTOR                         shift and go to state 64
    EXPRESSION                     shift and go to state 160

state 144

    (91) T -> ELSE . BLOCK
    (76) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 126

    BLOCK                          shift and go to state 161

state 145

    (85) R -> S .

    TICK            reduce using rule 85 (R -> S .)


state 146

    (84) CONDITION -> IF EXPRESSION COLON BLOCK R . TICK

    TICK            shift and go to state 162


state 147

    (86) R -> T .

    TICK            reduce using rule 86 (R -> T .)


state 148

    (80) WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .

    SOL             reduce using rule 80 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    IF              reduce using rule 80 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    FOR_CYCLE       reduce using rule 80 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    WHILE_CYCLE     reduce using rule 80 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    ID              reduce using rule 80 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)
    R_BRACE         reduce using rule 80 (WHILE -> WHILE_CYCLE EXPRESSION COLON BLOCK TICK .)


state 149

    (72) LIST_EXP -> L_BRACK EXPRESSION P R_BRACK .

    COMMA           reduce using rule 72 (LIST_EXP -> L_BRACK EXPRESSION P R_BRACK .)
    TICK            reduce using rule 72 (LIST_EXP -> L_BRACK EXPRESSION P R_BRACK .)


state 150

    (73) P -> COMMA EXPRESSION . P
    (73) P -> . COMMA EXPRESSION P
    (74) P -> . empty
    (102) empty -> .

    COMMA           shift and go to state 130
    R_BRACK         reduce using rule 102 (empty -> .)

    P                              shift and go to state 163
    empty                          shift and go to state 131

state 151

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN . PARAMS R_PAREN COLON BLOCK TICK
    (98) PARAMS -> . TYPE store_type ID check_param_duplicates Y
    (28) TYPE -> . INT
    (29) TYPE -> . FLOAT
    (30) TYPE -> . CHAR
    (31) TYPE -> . STRING
    (32) TYPE -> . BOOL
    (33) TYPE -> . LIST

    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    CHAR            shift and go to state 13
    STRING          shift and go to state 9
    BOOL            shift and go to state 15
    LIST            shift and go to state 12

    PARAMS                         shift and go to state 164
    TYPE                           shift and go to state 165

state 152

    (81) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION . COLON BLOCK TICK

    COLON           shift and go to state 166


state 153

    (67) NEGATION -> N EXPRESSION .

    COMMA           reduce using rule 67 (NEGATION -> N EXPRESSION .)
    R_PAREN         reduce using rule 67 (NEGATION -> N EXPRESSION .)


state 154

    (93) V -> W X .

    R_PAREN         reduce using rule 93 (V -> W X .)


state 155

    (96) X -> COMMA . V
    (93) V -> . W X
    (94) W -> . EXPRESSION
    (95) W -> . NEGATION
    (34) EXPRESSION -> . EXP G
    (67) NEGATION -> . N EXPRESSION
    (45) EXP -> . TERM I
    (68) N -> . NOT
    (50) TERM -> . FACTOR K
    (55) FACTOR -> . L_PAREN EXPRESSION R_PAREN
    (56) FACTOR -> . M CON_VAR
    (57) M -> . PLUS
    (58) M -> . MINUS
    (59) M -> . empty
    (102) empty -> .

    NOT             shift and go to state 139
    L_PAREN         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 66
    INT_CONT        reduce using rule 102 (empty -> .)
    STRING_CONT     reduce using rule 102 (empty -> .)
    CHAR_CONT       reduce using rule 102 (empty -> .)
    FLOAT_CONT      reduce using rule 102 (empty -> .)
    BOOL_CONT       reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)

    TERM                           shift and go to state 58
    W                              shift and go to state 136
    FACTOR                         shift and go to state 64
    M                              shift and go to state 59
    NEGATION                       shift and go to state 138
    N                              shift and go to state 135
    EXP                            shift and go to state 63
    V                              shift and go to state 167
    EXPRESSION                     shift and go to state 134
    empty                          shift and go to state 62

state 156

    (97) X -> empty .

    R_PAREN         reduce using rule 97 (X -> empty .)


state 157

    (92) SOLUTION_CALL -> ID L_PAREN V R_PAREN . TICK

    TICK            shift and go to state 168


state 158

    (77) Q -> STATUTE Q .

    R_BRACE         reduce using rule 77 (Q -> STATUTE Q .)


state 159

    (76) BLOCK -> L_BRACE Q R_BRACE .

    ELIF            reduce using rule 76 (BLOCK -> L_BRACE Q R_BRACE .)
    ELSE            reduce using rule 76 (BLOCK -> L_BRACE Q R_BRACE .)
    TICK            reduce using rule 76 (BLOCK -> L_BRACE Q R_BRACE .)


state 160

    (87) S -> ELIF EXPRESSION . COLON BLOCK U

    COLON           shift and go to state 169


state 161

    (91) T -> ELSE BLOCK .

    TICK            reduce using rule 91 (T -> ELSE BLOCK .)


state 162

    (84) CONDITION -> IF EXPRESSION COLON BLOCK R TICK .

    SOL             reduce using rule 84 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    IF              reduce using rule 84 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    FOR_CYCLE       reduce using rule 84 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    WHILE_CYCLE     reduce using rule 84 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    ID              reduce using rule 84 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)
    R_BRACE         reduce using rule 84 (CONDITION -> IF EXPRESSION COLON BLOCK R TICK .)


state 163

    (73) P -> COMMA EXPRESSION P .

    R_BRACK         reduce using rule 73 (P -> COMMA EXPRESSION P .)


state 164

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS . R_PAREN COLON BLOCK TICK

    R_PAREN         shift and go to state 170


state 165

    (98) PARAMS -> TYPE . store_type ID check_param_duplicates Y
    (4) store_type -> .

    ID              reduce using rule 4 (store_type -> .)

    store_type                     shift and go to state 171

state 166

    (81) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON . BLOCK TICK
    (76) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 126

    BLOCK                          shift and go to state 172

state 167

    (96) X -> COMMA V .

    R_PAREN         reduce using rule 96 (X -> COMMA V .)


state 168

    (92) SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .

    MULTIPLY        reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    DIVIDE          reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    PLUS            reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    MINUS           reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    LESS_T          reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    GREATER_T       reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    GREATER_T_EQUALS reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    LESS_T_EQUALS   reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    IS              reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    AND             reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    OR              reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    PERCENTAGE      reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    COLON           reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    COMMA           reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    TICK            reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    R_BRACK         reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)
    R_PAREN         reduce using rule 92 (SOLUTION_CALL -> ID L_PAREN V R_PAREN TICK .)


state 169

    (87) S -> ELIF EXPRESSION COLON . BLOCK U
    (76) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 126

    BLOCK                          shift and go to state 173

state 170

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN . COLON BLOCK TICK

    COLON           shift and go to state 174


state 171

    (98) PARAMS -> TYPE store_type . ID check_param_duplicates Y

    ID              shift and go to state 175


state 172

    (81) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK . TICK

    TICK            shift and go to state 176


state 173

    (87) S -> ELIF EXPRESSION COLON BLOCK . U
    (88) U -> . S
    (89) U -> . T
    (90) U -> . empty
    (87) S -> . ELIF EXPRESSION COLON BLOCK U
    (91) T -> . ELSE BLOCK
    (102) empty -> .

    ELIF            shift and go to state 143
    ELSE            shift and go to state 144
    TICK            reduce using rule 102 (empty -> .)

    S                              shift and go to state 177
    U                              shift and go to state 180
    T                              shift and go to state 179
    empty                          shift and go to state 178

state 174

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON . BLOCK TICK
    (76) BLOCK -> . L_BRACE Q R_BRACE

    L_BRACE         shift and go to state 126

    BLOCK                          shift and go to state 181

state 175

    (98) PARAMS -> TYPE store_type ID . check_param_duplicates Y
    (99) check_param_duplicates -> .

    COMMA           reduce using rule 99 (check_param_duplicates -> .)
    R_PAREN         reduce using rule 99 (check_param_duplicates -> .)

    check_param_duplicates         shift and go to state 182

state 176

    (81) FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .

    IF              reduce using rule 81 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    FOR_CYCLE       reduce using rule 81 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    WHILE_CYCLE     reduce using rule 81 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    ID              reduce using rule 81 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    R_BRACE         reduce using rule 81 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)
    SOL             reduce using rule 81 (FOR -> FOR_CYCLE S_ASSIGNATION TICK EXPRESSION TICK S_ASSIGNATION COLON BLOCK TICK .)


state 177

    (88) U -> S .

    TICK            reduce using rule 88 (U -> S .)


state 178

    (90) U -> empty .

    TICK            reduce using rule 90 (U -> empty .)


state 179

    (89) U -> T .

    TICK            reduce using rule 89 (U -> T .)


state 180

    (87) S -> ELIF EXPRESSION COLON BLOCK U .

    TICK            reduce using rule 87 (S -> ELIF EXPRESSION COLON BLOCK U .)


state 181

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK . TICK

    TICK            shift and go to state 183


state 182

    (98) PARAMS -> TYPE store_type ID check_param_duplicates . Y
    (100) Y -> . COMMA PARAMS
    (101) Y -> . empty
    (102) empty -> .

    COMMA           shift and go to state 184
    R_PAREN         reduce using rule 102 (empty -> .)

    Y                              shift and go to state 185
    empty                          shift and go to state 186

state 183

    (21) SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK .

    SOL             reduce using rule 21 (SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    IF              reduce using rule 21 (SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    FOR_CYCLE       reduce using rule 21 (SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    WHILE_CYCLE     reduce using rule 21 (SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    ID              reduce using rule 21 (SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)
    R_BRACE         reduce using rule 21 (SOLUTION_DEF -> SOL S_TYPE store_type ID check_sol_duplicates L_PAREN PARAMS R_PAREN COLON BLOCK TICK .)


state 184

    (100) Y -> COMMA . PARAMS
    (98) PARAMS -> . TYPE store_type ID check_param_duplicates Y
    (28) TYPE -> . INT
    (29) TYPE -> . FLOAT
    (30) TYPE -> . CHAR
    (31) TYPE -> . STRING
    (32) TYPE -> . BOOL
    (33) TYPE -> . LIST

    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    CHAR            shift and go to state 13
    STRING          shift and go to state 9
    BOOL            shift and go to state 15
    LIST            shift and go to state 12

    TYPE                           shift and go to state 165
    PARAMS                         shift and go to state 187

state 185

    (98) PARAMS -> TYPE store_type ID check_param_duplicates Y .

    R_PAREN         reduce using rule 98 (PARAMS -> TYPE store_type ID check_param_duplicates Y .)


state 186

    (101) Y -> empty .

    R_PAREN         reduce using rule 101 (Y -> empty .)


state 187

    (100) Y -> COMMA PARAMS .

    R_PAREN         reduce using rule 100 (Y -> COMMA PARAMS .)

